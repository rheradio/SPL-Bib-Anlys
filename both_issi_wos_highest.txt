
PT J
AU Tien, JM
AF Tien, JM
TI Toward a decision informatics paradigm: A real-time, information-based
   approach to decision making
SO IEEE TRANSACTIONS ON SYSTEMS MAN AND CYBERNETICS PART C-APPLICATIONS AND
   REVIEWS
LA English
DT Article
DE data analysis; data fusion; decision making; mass customization;
   quantitative modeling; systems engineering
ID SERVICES
AB The focus of this paper is on decision making; more specifically, on what decision making requirements are needed in the future. We augur for a decision informatics paradigm; it is a real-time, information-based approach to decision making. The paradigm is supported by two sets of technologies (i.e., information and decision technologies) and underpinned by three disciplines (i.e., data fusion/analysis, decision modeling, and systems engineering). We begin by considering the context-and needs-for decision making as the economies of the world change and evolve, especially in regard to emerging services; then our proposed decision informatics paradigm is detailed and illustrated, together with an in-depth review of a critical, underpinning research area (dealing with real-time fusion and analysis of multiple nonhomogeneous data sources), followed by several concluding remarks.
C1 Rensselaer Polytech Inst, Dept Decis Sci & Engn Syst, Troy, NY 12110 USA.
RP Tien, JM (reprint author), Rensselaer Polytech Inst, Dept Decis Sci & Engn Syst, Troy, NY 12110 USA.
CR AYACHE N, 1989, IEEE T ROBOTIC AUTOM, V5, P804, DOI 10.1109/70.88101
   Barnett V, 1994, OUTLIERS STAT DATA
   Baumol W. J., 1989, PRODUCTIVITY AM LEAD
   Berg D., 2001, IEEE T ENG MANAGE, V148, P330
   Biermann E, 2001, COMPUT SECUR, V20, P676, DOI 10.1016/S0167-4048(01)00806-9
   Cassaigne N, 2001, IEEE T SYST MAN CY C, V31, P96, DOI 10.1109/5326.923272
   Chau T, 1999, IEEE T KNOWL DATA EN, V11, P833, DOI 10.1109/69.824592
   David SHESKIN, 2000, HDB PARAMETRIC NONPA
   Domingos P, 2002, ADV NEUR IN, V14, P673
   ELLERMANN R, 1992, OPER RES, V40, P485, DOI 10.1287/opre.40.3.485
   EMBRECHTS M, 2000, MED INFORM, V25, P81
   FAWCETT T, 1996, P 5 INT C KNOWL DISC, P53
   Garvey T.D., 1981, P 7 INT JOINT C ART, P319
   Gunatilaka AH, 2001, IEEE T PATTERN ANAL, V23, P577, DOI 10.1109/34.927459
   Hammond J.S., 1999, SMART CHOICES PRACTI
   Hulten G., 2001, P 7 ACM SIGKDD INT C, P97, DOI DOI 10.1145/502512.502529
   Kandadai RM, 1997, IEEE T NEURAL NETWOR, V8, P1531, DOI 10.1109/72.641474
   Knorr E. M., 1998, Proceedings of the Twenty-Fourth International Conference on Very-Large Databases
   Kubat M, 1998, MACH LEARN, V30, P195, DOI 10.1023/A:1007452223027
   LANE T, 1998, P AAAI WORKSH PRED F, P64
   POLLARD SB, 1989, INT J ROBOT RES, V8, P3, DOI 10.1177/027836498900800401
   QUINN JB, 1987, SCI AM, V257, P50
   SANTOS PD, 2000, IEEE T SYST MAN CY C, V8, P17
   Schlimmer J. C., 1986, Proceedings AAAI-86: Fifth National Conference on Artificial Intelligence
   Subbu R, 1999, PROD PLAN CONTROL, V10, P627, DOI 10.1080/095372899232704
   TAN PN, 2000, P 6 INT C KNOWL DISC, P417, DOI 10.1145/347090.347177
   Tien J. M., 2003, Journal of Systems Science and Systems Engineering, V12, DOI 10.1007/s11518-006-0118-6
   Tien JM, 2000, IEEE T SYST MAN CY C, V30, P213, DOI 10.1109/5326.868443
   TIEN JM, 1994, IEEE T SYST MAN CYB, V25, P321
   TIEN JM, 1990, INFORM DECIS TECHNOL, V16, P137
   TIEN JM, 1986, COMPUT ENVIRON URBAN, V10, P157, DOI 10.1016/0198-9715(86)90004-9
   Tien J.M., 1986, PUBLIC ADM REV SPECI, V27, P553
   Tien J.M., 1981, EVALUATION WILMINGTO
   WEISS GM, 2000, HDB KNOWLEDGE DISCOV
   Widmer G, 1996, MACH LEARN, V23, P69, DOI 10.1007/BF00116900
   Yamanishi K., 2000, Proceedings. KDD-2000. Sixth ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, DOI 10.1145/347090.347160
   2000, GREAT ACHIEVEMENTS P
NR 37
TC 33
Z9 33
PU IEEE-INST ELECTRICAL ELECTRONICS ENGINEERS INC
PI NEW YORK
PA 345 E 47TH ST, NEW YORK, NY 10017-2394 USA
SN 1094-6977
J9 IEEE T SYST MAN CY C
JI IEEE Trans. Syst. Man Cybern. Part C-Appl. Rev.
PD FEB
PY 2003
VL 33
IS 1
BP 102
EP 113
DI 10.1109/TSMCC.2003.809345
PG 12
WC Computer Science, Artificial Intelligence; Computer Science,
   Cybernetics; Computer Science, Interdisciplinary Applications
SC Computer Science
GA 666FX
UT WOS:000182167400011
ER

PT S
AU Segura, S
   Benavides, D
   Ruiz-Cortes, A
   Trinidad, P
AF Segura, Sergio
   Benavides, David
   Ruiz-Cortes, Antonio
   Trinidad, Pablo
BE Lammel, R
   Visser, J
   Saraiva, J
TI Automated Merging of Feature Models Using Graph Transformations
SO GENERATIVE AND TRANSFORMATIONAL TECHNIQUES IN SOFTWARE ENGINEERING II
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 2nd International Summer School on Generative and Transformational
   Techniques in Software Engineering
CY JUL 02-07, 2007
CL Braga, PORTUGAL
SP Ctr Cienc Tecnol Comput, Luso Amer Fdn, Software Improvement Grp
AB Feature Models (FMs) are a key artifact for variability and commonality management in Software Product Lines (SPLs). In this context, the merging of FMs is being recognized as an important operation to support the adoption and evolution of SPLs. However, providing automated support for merging FMs still remains an open challenge. In this paper, we propose using graph transformations as a Suitable technology and associated formalism to automate the merging of FMs. In particular, we first present a catalogue of technology-independent visual rules to describe how to merge FMs. Next, we propose a prototype implementation Of Our catalogue using the AGG system, Finally, we show the feasibility of our proposal by means of a running example inspired by the mobile phone industry. To the best of our knowledge, this is the first approach providing automated support for merging FMs including feature attributes and cross-tree constraints.
C1 [Segura, Sergio; Benavides, David; Ruiz-Cortes, Antonio; Trinidad, Pablo] Univ Seville, Seville, Spain.
RP Segura, S (reprint author), Univ Seville, Seville, Spain.
EM sergiosegura@us.es; benavides@us.es; aruiz@us.es; ptrinidad@us.es
RI Benavides, David/K-2791-2014; Segura, Sergio/A-9615-2011; Ruiz-Cortes,
   Antonio/B-9056-2008; Trinidad, Pablo/D-5502-2013
OI Benavides, David/0000-0002-8449-3273; Segura,
   Sergio/0000-0001-8816-6213; Ruiz-Cortes, Antonio/0000-0001-9827-1834;
   Trinidad, Pablo/0000-0002-1320-2424
CR Alves V., 2006, GPCE 2006, P201
   APEL S, 2007, MIP070L U PASS DEP I
   BARESI L, 2002, ICGT 2002 P 1 INT C, P402
   BATORY D, 2006, COMMUNICATIONS A DEC
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Benavides D., 2006, JORN ING SOFTW BAS D
   Benavides D., 2007, P 1 INT WORKSH VAR M, P129
   BENAVIDES D, 2005, 1 EUR WORKSH MOD TRA
   Benavides D, 2005, LECT NOTES COMPUT SC, V3520, P491
   Clements P.C., 2001, SEI SERIES SOFTWARE
   Czarnecki K, 2007, 11 INT SOFTW PROD LI, P23
   Gheyi R., 2006, 1 ALL WORKSH PORTL U, P71
   Heckel R., 2002, ICGT 02, P161
   Czarnecki K, 2006, IBM SYST J, V45, P621
   Kang K., 1990, CMUSEI90TR21
   Krueger C., 2002, 4 INT WORKSH SOFTW P, P282
   Liu J., 2006, ICSE 06, P112
   Mens T, 2007, SOFTW SYST MODEL, V6, P269, DOI 10.1007/s10270-006-0044-6
   Mens T., 2006, ELECT NOTES THEORETI, V152, P143, DOI DOI 10.1016/J.ENTCS.2005.10.022
   Mens T, 2000, LECT NOTES COMPUT SC, V1779, P127
   Mens T, 2006, LECT NOTES COMPUT SC, V4143, P219
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Pena J, 2007, LECT NOTES COMPUT SC, V4405, P208
   Prange U., 2005, MTIP 2005 INT WORKSH
   Rozenberg G, 1997, HDB GRAPH GRAMMARS C, V1
   Schobbens P., 2006, P 14 IEEE INT REQ EN
   SEGURA S, 2007, 7 JORN PROGR LENG PR, P275
   Shvaiko Pavel, 2005, J DATA SEMANTICS, V3730, P146, DOI DOI 10.1007/11603412\-5
   TAENTZER G, 2004, LNCS, V3062
   Trujillo S., 2006, GPCE 06, P191, DOI DOI 10.1145/1173706.1173736
   Westfechtel B., 1991, Proceedings of the 3rd International Workshop on Software Configuration Management, DOI 10.1145/111062.111071
NR 31
TC 15
Z9 15
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-540-88642-6
J9 LECT NOTES COMPUT SC
PY 2008
VL 5235
BP 489
EP 505
PG 17
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BIP91
UT WOS:000261730200015
ER

PT S
AU Pena, J
   Hinchey, MG
   Ruiz-Cortes, A
   Trinidad, P
AF Pena, Joaquin
   Hinchey, Michael G.
   Ruiz-Cortes, Antonio
   Trinidad, Pablo
BE Padgham, L
   Zambonelli, F
TI Building the core architecture of a NASA multiagent system product line
SO AGENT-ORIENTED SOFTWARE ENGINEERING VII
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 7th International Workshop on Agent-Oriented Software Engineering
CY MAY 08, 2006
CL Hakodate, JAPAN
ID IMPLEMENTATION
AB The field of Software Product Lines (SPL) emphasizes building a family of software products from which concrete products can be derived rapidly. This helps to reduce time-to-market, costs, etc., and can result in improved software quality and safety. Current Agent-Oriented Software Engineering (AOSE) methodologies are concerned with developing a single Multiagent System. The main contribution of this paper is a proposal to developing the core architecture of a Multiagent Systems Product Line (MAS-PL), exemplifying our approach with reference to a concept NASA mission based on multiagent technology.
C1 Univ Seville, Seville, Spain.
RP Pena, J (reprint author), Univ Seville, Seville, Spain.
EM joaquinp@us.es; Michael.G.Hinchey@nasa.gov; aruiz@us.es;
   trinidad@lsi.us.es
RI Ruiz-Cortes, Antonio/B-9056-2008; Pena, Joaquin /K-8217-2012; Trinidad,
   Pablo/D-5502-2013
OI Ruiz-Cortes, Antonio/0000-0001-9827-1834; Pena, Joaquin
   /0000-0001-9216-9695; Trinidad, Pablo/0000-0002-1320-2424
CR BENAVIDES D, 2006, 15 J ING SOFTW BAS D
   Benavides D, 2005, LECT NOTES COMPUT SC, V3520, P491
   Clements P, 2001, SOFTWARE PRODUCT LIN
   Czarnecki K., 2000, GEN PROGRAMMING METH
   D'Souza D.F., 1999, OBJECTS COMPONENTS F
   Jansen AGJ, 2004, IEE PROC-SOFTW, V151, P187, DOI 10.1049/ip-sen:20040922
   Kang K, 1990, CMUSEI90TR021
   Kendall EA, 2000, IEEE CONCURR, V8, P34, DOI 10.1109/4434.846192
   LISKOV B, 1993, P 8 ANN C OBJ OR PRO, P16, DOI 10.1145/165854.165863
   Odell JJ, 2003, LECT NOTES COMPUT SC, V2603, P27
   OMG, 2003, 030802 OMG
   Parunak H. V. D., 2001, Proceedings of the Fifth International Conference on Autonomous Agents
   PENA J, 2005, INT IB J AI, V9, P19
   PENA J, 2006, 5 INT WORKSH SYST SO
   PENA J, 2003, ACM S APPL COMP SAC, P45
   Pena J, 2006, COMMUN ACM, V49, P82, DOI 10.1145/1183236.1183272
   PENA J, 2005, THESIS U SEVILLE
   PENA J, 2002, LECT NOTES ARTIF INT, V2699, P79
   Pohl K., 2005, SOFTWARE PRODUCT LIN
   Reenskaug T., 1996, WORKING OBJECTS OORA
   Smaragdakis Y, 2002, ACM T SOFTW ENG METH, V11, P215, DOI 10.1145/505145.505148
   Zambonelli F., 2003, ACM T SOFTWARE ENG M, V12
NR 22
TC 14
Z9 14
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-540-70944-2
J9 LECT NOTES COMPUT SC
PY 2007
VL 4405
BP 208
EP 224
PG 17
WC Computer Science, Artificial Intelligence; Computer Science, Software
   Engineering; Computer Science, Theory & Methods
SC Computer Science
GA BFY83
UT WOS:000245469300013
ER

PT S
AU Zhang, WS
   Jarzabek, S
AF Zhang, WS
   Jarzabek, S
BE Obbink, H
   Pohl, K
TI Reuse without compromising performance: Industrial experience from RPG
   software product line for mobile devices
SO SOFTWARE PRODUCT LINES, PROCEEDINGS
SE LECTURE NOTES IN COMPUTER SCIENCE
LA English
DT Article; Proceedings Paper
CT 9th International Software Product Lines Conference (SPLC 2005)
CY SEP 26-29, 2005
CL Rennes, FRANCE
AB It is often believed that reusable solutions, being generic, must necessarily compromise performance. In this paper, we consider a family of Role-Playing Games (RPGs). We analyzed similarities and differences among four RPGs. By applying a reuse technique of XVCL, we built an RPG product line architecture (RPG-PLA) from which we could derive any of the four RPGs. We built into the RPG-PLA a number of performance optimization strategies that could benefit any of the four (and possibly other similar) RPGs. By comparing the original vs. the new RPGs derived from the RPG-PLA, we demonstrated that reuse allowed us to achieve improved performance, both speed and memory utilization, as compared to each game developed individually. At the same time, our solution facilitated rapid development of new games, for new mobile devices, as well as ease of evolving with new features the RPG-PLA and custom games already in use.
C1 Tongji Univ, Sch Software Engn, Shanghai 201804, Peoples R China.
   Sch Comp, Dept Comp Sci, Singapore 117543, Singapore.
RP Zhang, WS (reprint author), Tongji Univ, Sch Software Engn, 4800 Cao An Highway, Shanghai 201804, Peoples R China.
EM zhangws@mail.tongji.edu.cn; stan@comp.nus.edu.sg
CR BASIT AH, 2005, IN PRESS ESEC FSE 05
   Bosch J, 2000, DESIGN USE SOFTWARE
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Clements P, 2001, SOFTWARE PRODUCT LIN
   DACONTA MC, 2003, MORE PAVA PITFALLS
   Deelstra S, 2004, LECT NOTES COMPUT SC, V3154, P165
   Fritsch C, 2004, LECT NOTES COMPUT SC, V3154, P51
   GIGUERE E, 2002, UNDERSTANDING J2ME A
   Kang K., CMUSEI90TR21
   KRUEGER C, 2002, IEEE SOFTWARE    JUL, P28
   MARINESCU R, 1998, OBJECT ORIENTED METR
   Opdahl A. L., 1993, Proceedings Advances in Software Reuse. Selected Papers from the Second International Workshop on Software Reusability (Cat. No.93TH0495-2), DOI 10.1109/ASR.1993.291708
   PETTERSSON U, 2005, IN PRESS ESEC FSE 05
   Thiel S., 2002, LNCS, V2379, P130
   YANG J, 2005, IN PRESS J INT C GEN
   Zhang W., 2003, Proceedings. Sixth International Workshop on Principles of Software Evolution
NR 16
TC 10
Z9 10
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 3-540-28936-4
J9 LECT NOTES COMPUT SC
PY 2005
VL 3714
BP 57
EP 69
PG 13
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BDG27
UT WOS:000233358200006
ER

PT S
AU Bagheri, E
   Asadi, M
   Gasevic, D
   Soltani, S
AF Bagheri, Ebrahim
   Asadi, Mohsen
   Gasevic, Dragan
   Soltani, Samaneh
BE Bosch, J
   Lee, JJ
TI Stratified Analytic Hierarchy Process: Prioritization and Selection of
   Software Features
SO SOFTWARE PRODUCT LINES: GOING BEYOND
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 14th International Software Product Lines Conference
CY SEP 13-17, 2010
CL Jeju Island, SOUTH KOREA
SP Korean Inst Informat Sci & Engn, CoSDEC, Hitachi, Carnegie Mellon, Software Engn Inst, BigLever Software Inc, IBM, Fraunhofer
ID REQUIREMENTS
AB Product line engineering allows for the rapid development of variants of a domain specific application by using a common set of reusable assets often known as core assets. Variability modeling is a critical issue in product line engineering, where the use of feature modeling is one of most commonly used formalisms. To support an effective and automated derivation of concrete products for a product family, staged configuration has been proposed in the research literature. In this paper, we propose the integration of well-known requirements engineering principles into stage configuration. Being inspired by the well-established Preview requirements engineering framework, we initially propose an extension of feature models with capabilities for capturing business oriented requirements. This representation enables a more effective capturing of stakeholders' preferences over the business requirements and objectives (e.g.,. implementation costs or security) in the form of fuzzy linguistic variables (e.g., high, medium, and low). On top of this extension, we propose a novel method, the Stratified Analytic Hierarchy process, which first helps to rank and select the most relevant high level business objectives for the target stakeholders (e.g., security over implementation costs), and then helps to rank and select the most relevant features from the feature model to be used as the starting point in the staged configuration process. Besides a complete formalization of the process, we define the place of our proposal in existing software product line lifecycles as well as demonstrate the use of our proposal on the widely-used e-Shop case study. Finally, we report on the results of our user study, which indicates a high appreciation of the proposed method by the participating industrial software developers. The tool support for S-AHP is also introduced.
C1 [Bagheri, Ebrahim; Asadi, Mohsen; Gasevic, Dragan; Soltani, Samaneh] Athabasca Univ, Athabasca, AB, Canada.
RP Bagheri, E (reprint author), Athabasca Univ, Athabasca, AB, Canada.
EM ebagheri@athabascau.ca; masadi@sfu.ca; dragang@athabascau.ca;
   soltanisa@gmail.com
CR Aurum A., 2005, ENG MANAGING SOFTWAR
   BAGHERI E, 2009, KNOWL INF SYST, V22, P27
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   BATORY D, 2006, COMMUN ACM, V49, P47
   Berander P, 2006, INT J SOFTW ENG KNOW, V16, P819, DOI 10.1142/S0218194006003026
   BOSKOVIC M, INT J SOFTW IN PRESS
   Clements P, 2001, SOFTWARE PRODUCT LIN
   CZARNECKI K, 2004, STAGED CONFIGURATION
   Czarnecki K., 2005, Software Process Improvement and Practice, V10, DOI 10.1002/spip.213
   Czarnecki K., 2005, INT WORKSH SOFTW FAC
   Heymans P, 2008, IET SOFTW, V2, P281, DOI 10.1049/iet-sen:20070055
   KARLSSON J, 1997, REQUERMENTS ENG, V2
   LINDEN F, 2005, SOFTWARE PRODUCT LIN
   Linden F.J.D., 2007, SOFTWARE PRODUCT LIN
   Makki M, 2008, LECT NOTES COMPUT SC, V5292, P264, DOI 10.1007/978-3-540-88030-1_20
   Perini A, 2009, INFORM SOFTWARE TECH, V51, P1021, DOI 10.1016/j.infsof.2008.12.001
   Saaty T. L., 1980, ANAL HIERARCHY PROCE
   Sommerville I, 1997, ANN SOFTW ENG, V3, P101, DOI 10.1023/A:1018946223345
   WHITE J, 2009, SPLC 2009
NR 19
TC 7
Z9 7
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-642-15578-9
J9 LECT NOTES COMPUT SC
PY 2010
VL 6287
BP 300
EP 315
PG 16
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BTD71
UT WOS:000286579500021
ER

PT S
AU Kishi, T
   Noda, N
   Katayama, T
AF Kishi, T
   Noda, N
   Katayama, T
BE Obbink, H
   Pohl, K
TI Design verification for product line development
SO SOFTWARE PRODUCT LINES, PROCEEDINGS
SE LECTURE NOTES IN COMPUTER SCIENCE
LA English
DT Article; Proceedings Paper
CT 9th International Software Product Lines Conference (SPLC 2005)
CY SEP 26-29, 2005
CL Rennes, FRANCE
AB Our society is becoming increasingly dependent on embedded software, and its reliability becomes more and more important. Although we can utilize powerful scientific methods such as model checking techniques to develop reliable embedded software, it is expensive to apply these methods to consumer embedded software development. In this paper, we propose an application of model checking techniques for design verification in product line development (PLD). We introduce reusable verification models in which we define variation points, and we show how to define traceability among feature models, design models and verification models. The reuse of verification models in PLD not only enables the systematic design verification of each product but also reduces the cost of applying model checking techniques.
C1 Japan Adv Inst Sci & Technol, Sch Informat Sci, Noumi, Ishikawa 9231292, Japan.
   NEC Corp Ltd, Minato Ku, Tokyo 1088557, Japan.
RP Kishi, T (reprint author), Japan Adv Inst Sci & Technol, Sch Informat Sci, 1-1 Asahidai, Noumi, Ishikawa 9231292, Japan.
EM tkishi@jaist.ac.jp; n-noda@cw.jp.nec.com; katayama@jaist.ac.jp
CR Bosch J, 2000, DESIGN USE SOFTWARE
   Clarke E. M., 1999, MODEL CHECKING
   Clements P, 2001, SOFTWARE PRODUCT LIN
   GIANNAKOPOULOU D, 2004, 26 INT C SOFTW ENG I
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   JAMIE J, 2004, INT WORKSH SOFTW PRO
   KANG K, 1990, CUMSEI90TR21
   KISHI T, 2004, 2 IEEE WORKSH SOFTW
   KISHI T, 2004, ASPECT ORIENTED REQU
   KISHI T, 2004, INT WORKSH SOFTW PRO
   LILIUS J, 1999, 272 TUCS
   Northrop LM, 2002, IEEE SOFTWARE, V19, P32, DOI 10.1109/MS.2002.1020285
   SchAfer T., 2001, ELECT NOTES THEORETI, V55
NR 13
TC 7
Z9 7
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 3-540-28936-4
J9 LECT NOTES COMPUT SC
PY 2005
VL 3714
BP 150
EP 161
PG 12
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BDG27
UT WOS:000233358200017
ER

PT S
AU Lopez-Herrejon, RE
   Egyed, A
AF Lopez-Herrejon, Roberto Erick
   Egyed, Alexander
BE Kuhne, T
   Selic, B
   Gervais, MP
   Terrier, F
TI Detecting Inconsistencies in Multi-View Models with Variability
SO MODELLING FOUNDATIONS AND APPLICATIONS, PROCEEDINGS
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 6th European Conference Modelling Foundations and Applications
CY JUN 15-18, 2010
CL Paris, FRANCE
ID SOFTWARE PRODUCT LINES; FRAMEWORK
AB Multi-View Modeling (MVM) is a common modeling practice that advocates the use of multiple, different and yet related models to represent the needs of diverse stakeholders. Of crucial importance in MVM is consistency checking - the description and verification of semantic relationships amongst the views. Variability is the capacity of software artifacts to vary, and its effective management is a core tenet of the research in Software Product Lines (SPL). MVM has proven useful for developing one-of-a-kind systems; however, to reap the potential benefits of MVM in SPL it is vital to provide consistency checking mechanisms that cope with variability. In this paper we describe how to address this need by applying Safe Composition - the guarantee that all programs of a product line are type safe. We evaluate our approach with a case study.
C1 [Lopez-Herrejon, Roberto Erick; Egyed, Alexander] Johannes Kepler Univ Linz, Inst Syst Engn & Automat, Linz, Austria.
RP Lopez-Herrejon, RE (reprint author), Johannes Kepler Univ Linz, Inst Syst Engn & Automat, Linz, Austria.
EM roberto.lopez@jku.at; alexander.egyed@jku.at
CR Apel S, 2009, LECT NOTES COMPUT SC, V5563, P4, DOI 10.1007/978-3-642-02408-5_2
   Batory D., 2005, P 9 INT C SOFTW PROD, P7
   Batory D., 2004, IEEE TSE, V30
   Batory D, 2004, IEEE T SOFTWARE ENG, V30, P355, DOI 10.1109/TSE.2004.23
   Batory D., 1992, ACM Transactions on Software Engineering and Methodology, V1, DOI 10.1145/136586.136587
   BATORY D, 2008, AHEAD TOOL SUITE
   Batory D, 2008, GPCE'08: PROCEEDINGS OF THE ACM SIGPLAN SEVENTH INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING, P35
   Batory D, 2002, ASE 2002: 17TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, P81
   Benavides D., 2007, VAMOS, V2007-01, P129
   Biere A., PICOSAT
   CLARKE S, 2005, THEME APPROACH
   Clements P, 2002, SOFTWARE PRODUCT LIN
   Czarnecki K., 2006, GPCE 06, P211
   Czarnecki K., 2000, GENERATIVE PROGRAMMI
   Egyed A., 2008, ASE, P99
   Egyed A, 2007, PROC INT CONF SOFTW, P292
   FINKELSTEIN A, 1992, INT J SOFTW ENG KNOW, V2, P31, DOI 10.1142/S0218194092000038
   FINKELSTEIN ACW, 1994, IEEE T SOFTWARE ENG, V20, P569, DOI 10.1109/32.310667
   Gomaa H, 2008, LECT NOTES COMPUT SC, V5030, P182, DOI 10.1007/978-3-540-68073-4_17
   GOMAA H, 2004, USE CASES PATTERN BA
   GROHER I, 2008, SPLC, P89
   GROHER I, 2009, T ASPECT ORIENTED SO, V6, P111
   Jacobson I., 2004, ASPECT ORIENTED SOFT
   Jayaraman P, 2007, LECT NOTES COMPUT SC, V4735, P151
   Kakola T., 2006, SOFTWARE PRODUCT LIN
   Kang K., 1990, CMUSEI90TR21
   Kastner C, 2009, LECT NOTES BUS INF, V33, P175
   KUHLEMANN M, 2009, GPCE, P177
   LOPEZHERREJON R, 2006, WORKSH S MODELS
   Lopez-Herrejon R., 2006, THESIS U TEXAS AUSTI
   Lopez-Herrejon R., 2001, LNCS, V2186, P10
   Lopez-Herrejon R., 2006, P INT S PART EV SEM, P68, DOI 10.1145/1111542.1111554
   Lopez-Herrejon R. E., 2009, JISBD, P269
   Lucas FJ, 2009, INFORM SOFTWARE TECH, V51, P1631, DOI 10.1016/j.infsof.2009.04.009
   Mezini M, 2004, SIGSOFT FSE, P127, DOI 10.1145/1029894.1029915
   NUSEIBEH B, 1994, IEEE T SOFTWARE ENG, V20, P760, DOI 10.1109/32.328995
   *OMG, 2009, UML INFR SPEC V2 2
   Pohl K., 2005, SOFTWARE PRODUCT LIN
   Steinberg D, 2008, EMF ECLIPSE MODELING
   Svahnberg M, 2005, SOFTWARE PRACT EXPER, V35, P705, DOI 10.1002/spe.652
   Thaker S., 2007, GPCE, P95
   Trujillo S., 2007, ICSE
   Umapathy S., 2007, THESIS U OXFORD
   USMAN M, 2008, ADV SOFTWARE ENG ITS, P57
   vandLinden F. J., 2007, SOFTWARE PRODUCT LIN
   Zave P., FAQ SHEET FEATURE IN
   ZHANG H, SCI COMPUT PROGRAM, V53, P381
NR 47
TC 7
Z9 7
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-642-13594-1
J9 LECT NOTES COMPUT SC
PY 2010
VL 6138
BP 217
EP 232
PG 16
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BPM84
UT WOS:000279345100018
ER

PT S
AU Kang, KC
   Kim, M
   Lee, J
   Kim, B
AF Kang, KC
   Kim, M
   Lee, J
   Kim, B
BE Obbink, H
   Pohl, K
TI Feature-oriented re-engineering of legacy systems into product line
   assets - a case study
SO SOFTWARE PRODUCT LINES, PROCEEDINGS
SE Lecture Notes in Computer Science
LA English
DT Article; Proceedings Paper
CT 9th International Software Product Lines Conference (SPLC 2005)
CY SEP 26-29, 2005
CL Rennes, FRANCE
AB Home service robots have a wide range of potential applications, such as home security, patient caring, cleaning, etc. The services provided by the robots in each application area are being defined as markets are formed and, therefore, they change constantly. Thus, robot applications need to evolve both quickly and flexibly adopting frequently changing requirements. This makes software product line framework ideal for the domain of home service robots. Unfortunately, however, robot manufacturers often focus on developing technical components (e.g., vision recognizer and speech processor) and then attempt to develop robots by integrating these components in an ad-hoc way. This practice produces robot applications that are hard to re-use and evolve when requirements change. We believe that re-engineering legacy robot applications into product line assets can significantly enhance reusability and evolvability.
   In this paper, we present our experience of re-engineering legacy home service robot applications into product line assets through feature modeling and analysis. First, through reverse engineering, we recovered architectures and components of the legacy applications. Second, based on the recovered information and domain knowledge, we reconstructed a feature model for the legacy applications. Anticipating changes in business opportunities or technologies, we restructured and refined the feature model to produce a feature model for the product line. Finally, based on the refined feature model and engineering principles we adopted for asset development, we designed a new architecture and components for robot applications.
C1 Pohang Univ Sci & Technol, Dept Comp Sci & Engn, Software Engn Lab, Pohang, South Korea.
RP Kang, KC (reprint author), Pohang Univ Sci & Technol, Dept Comp Sci & Engn, Software Engn Lab, Pohang, South Korea.
EM kck@postech.ac.kr; moonzoo@postech.ac.kr; gibman@postech.ac.kr;
   dayfly@postech.ac.kr
RI Kim, Moonzoo/C-1661-2011
CR BASSET P, 1997, FRAMING SOFTWARE REU
   Bayer J, 1999, LECT NOTES COMPUT SC, V1687, P446
   BERGEY J, 2001, OPTION ANAL REENGINE
   BOSCH J, 2000, LNCS, V1952, P168
   BOSCH J, 2001, LNCS, V2177
   DEBAUD JM, 1998, LNCS, V1492, P132
   EIXELSBERGER W, 2002, LNCS, V1429
   Fowler M, 2000, REFACTORING IMPROVIN
   Kang KC, 2002, IEEE SOFTWARE, V19, P58, DOI 10.1109/MS.2002.1020288
   Kim M, 2005, PROC INT CONF SOFTW, P505, DOI 10.1145/1062455.1062547
   LAGO P, 2004, LNCS, V3154
   LEE K, LECT NOTES COMPUTER, V2319
   Maccari A, 2002, LECT NOTES COMPUT SC, V2290, P64
   MEDVIDOVIC N, 1997, IEE P, V144
NR 14
TC 7
Z9 7
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 3-540-28936-4
J9 LECT NOTES COMPUT SC
PY 2005
VL 3714
BP 45
EP 56
PG 12
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BDG27
UT WOS:000233358200005
ER

PT B
AU Ternite, T
AF Ternite, Thomas
GP IEEE
TI Process lines: a product line approach designed for process model
   development
SO 2009 35TH EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED
   APPLICATIONS, PROCEEDINGS
LA English
DT Proceedings Paper
CT 35th Euromicro Conference on Software Engineering and Advanced
   Applications
CY AUG 27-29, 2009
CL Patras, GREECE
ID SOFTWARE PROCESS
AB Standard process models like RUP or the German V-Modell XT are developed to be used in an organizational environment. Yet introducing such a process model into an organization is no simple task. It is usually accompanied by either reorganizing internal processes to comply with a standard process model or by adaptation of the process model to organizational structures. The latter is an approach that can often be found in practice and is subject to this paper.
   The paper describes a generalization of the process model architecture of the V-Modell XT 1.3. Compared to the previous version 1.2.1.1, its metamodel has completely been revised with respect to a new adaptation concept. We will see how this concept allows the implementation of a so called process line. Software process lines are derived from software product lines and can be used for the adaptation of standard processes during process model development, project initialization and project runtime.
C1 Tech Univ Clausthal, Dept Informat, D-38678 Clausthal Zellerfeld, Germany.
RP Ternite, T (reprint author), Tech Univ Clausthal, Dept Informat, D-38678 Clausthal Zellerfeld, Germany.
EM thomas.ternite@tu-clausthal.de
CR Anastasopoulos M., 2001, P 2001 S SOFTW REUS, P109
   Armbrust Ove, 2008, Software Process: Improvement and Practice, V13, DOI 10.1002/spip.391
   Armbrust O, 2008, LECT NOTES COMPUT SC, V5007, P160, DOI 10.1007/978-3-540-79588-9_15
   ARMBRUST O, 2008, 01308D IESE
   BOEHM BW, 1988, COMPUTER, V21, P61, DOI 10.1109/2.59
   Clements P, 2002, SOFTWARE PRODUCT LIN
   JONES JG, 2002, CMUSEI2002TN012
   *KBST, 2008, OFF WEBS 5 MOD XT
   KUHRMANN M, 2007, IX MAGAZIN PROFESSIO, V4, P134
   Ocampo A., 2005, Software Process Improvement and Practice, V10, DOI 10.1002/spip.229
   *OMG, 2009, UML 2 2 INFR SPEC
   OMG, 2008, SOFTW PROC ENG MET V
   Rombach D, 2005, LECT NOTES COMPUT SC, V3840, P83
   Ternite T., 2009, TUM10905
NR 14
TC 7
Z9 7
PU IEEE COMPUTER SOC
PI LOS ALAMITOS
PA 10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA
BN 978-0-7695-3784-9
PY 2009
BP 173
EP 180
DI 10.1109/SEAA.2009.48
PG 8
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BNX96
UT WOS:000275857500023
ER

PT S
AU Damasevicius, R
   Stuikys, V
   Toldinas, J
AF Damasevicius, Robertas
   Stuikys, Vytautas
   Toldinas, Jevgenijus
BE Morrison, R
   Balasubramaniam, D
   Falkner, K
TI Domain Ontology-Based Generative Component Design Using Feature Diagrams
   and Meta-programming Techniques
SO SOFTWARE ARCHITECTURE
SE LECTURE NOTES IN COMPUTER SCIENCE
LA English
DT Proceedings Paper
CT 2nd European Conference on Software Architecture
CY SEP 29-OCT 01, 2008
CL Paphos, CYPRUS
AB In domains, where great variability of requirements and products exists such as embedded system design domain, a product line (PL) approach is emerging as the most promising design paradigm. The key for the PL implementation is the use of domain analysis and domain modelling methods. We propose to represent domain variability using feature models enriched with lightweight domain ontology. We transform such models into generative component specifications using meta-programming techniques. We suggest: 1) to use domain analysis methods from two perspectives, software engineering and cognitive science; 2) to enrich domain variability models explicitly by contextualization and repurposing (i.e., by lightweight domain ontology); 3) to represent the model using the enriched feature diagrams (EFDs); 4) to encode EFI)s using heterogeneous meta-progranuning.
C1 [Damasevicius, Robertas; Stuikys, Vytautas; Toldinas, Jevgenijus] Kaunas Univ Technol, LT-51368 Kaunas, Lithuania.
RP Damasevicius, R (reprint author), Kaunas Univ Technol, Studentu 50, LT-51368 Kaunas, Lithuania.
CR Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   COPLIEN J, 1998, COMMONALITY VARIABIL, V15, P37
   KANG KC, 2003, DOMAIN ORIENTED SYST
   Lai C. T. R., 1999, SOFTWARE PRODUCT LIN
   Stuikys V, 2003, AMBIENT INTELLIGENCE: IMPACT ON EMBEDDED SYSTEM DESIGN, P229
NR 5
TC 7
Z9 7
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-540-88029-5
J9 LECT NOTES COMPUT SC
PY 2008
VL 5292
BP 338
EP 341
PG 4
WC Computer Science, Hardware & Architecture; Computer Science, Software
   Engineering; Computer Science, Theory & Methods
SC Computer Science
GA BIJ51
UT WOS:000260077200032
ER

PT S
AU Bayer, J
   Girard, JF
   Wurthner, M
   DeBaud, JM
   Apel, M
AF Bayer, J
   Girard, JF
   Wurthner, M
   DeBaud, JM
   Apel, M
BE Nierstrasz, O
   Lemoine, M
TI Transitioning legacy assets to a product line architecture
SO SOFTWARE ENGINEERING - ESEC/FSE '99, PROCEEDINGS
SE LECTURE NOTES IN COMPUTER SCIENCE
LA English
DT Article; Proceedings Paper
CT 7th European Software Engineering Conference/7th ACM SIGSOFT Symposium
   on the Foundations of Software Engineering
CY SEP 06-10, 1999
CL TOULOUSE, FRANCE
SP ACM SIGSOFT
DE software product line; architecture recovery; reengineering; reuse;
   domain-specific software architecture
ID SOFTWARE
AB A successful software system evolves over time, but this evolution often occurs in an ad-hoc fashion. One approach to structure system evolution is the concept of software product lines where a core architecture supports a variety of application contexts. However, in practice, the high cost and high risks of redevelopment as well as the substantial investments made to develop the existing systems most often mandate significant leverage of the legacy assets. Yet, there is little guidance in the literature on how to transition legacy assets into a product line set-up.
   In this paper, we present RE-PLACE, an approach developed to support the transition of existing software assets towards a product line architecture while taking into account anticipated new system variants. We illustrate this approach with its application in an industrial setting.
C1 Fraunhofer Inst Expt Software Engn, D-67661 Kaiserslautern, Germany.
   Lucent PaceLine Technol LLC, Naperville, IL 60566 USA.
   Tecmath GmbH & Co KG, D-67661 Kaiserslautern, Germany.
RP Bayer, J (reprint author), Fraunhofer Inst Expt Software Engn, Sauerwiesen 6, D-67661 Kaiserslautern, Germany.
CR Achee BL, 1997, J SYST SOFTWARE, V39, P179, DOI 10.1016/S0164-1212(96)00171-9
   Bayer J., 1999, SSR'99. Proceedings of the Fifth Symposium on Software Reusability. Bridging the Gap Between Research and Practice
   CANFORA G, 1994, J SOFTW MAINT-RES PR, V6, P53, DOI 10.1002/smr.4360060202
   CIMITILE A, 1995, J SYST SOFTWARE, V28, P117, DOI 10.1016/0164-1212(94)00049-S
   DEBAUD JM, 1998, P 2 INT WORKSH DES E, P102
   DEBAUD JM, 1997, WORK C REV ENG AMST, P164
   Fiutem R, 1996, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P319
   Gamma E., 1994, DESIGN PATTERNS ELEM
   Harris D. R., 1995, INT C SOFTW ENG LOS, P186
   Harris D. R., 1996, Automated Software Engineering, V3, DOI 10.1007/BF00126961
   Kazman R., 1996, IEEE SOFTWARE    NOV, P47
   KLOESCH R, 1995, OBJEKT ORIENTIERTES
   Lakhotia A, 1997, J SYST SOFTWARE, V36, P211, DOI 10.1016/0164-1212(95)00098-4
   MAROCK J, BASIC SUPPORT COOPER
   MULLER H, 1994, 62 CONGR ACFAS MONTR
   NING JQ, 1993, WORK C REV ENG MAY, P64
   *REAS SYST INC, 1990, REF US GUID
   SNEED HM, 1996, WORK C REV ENG MONT, P104
   *SOFTW TECHN AD RE, 1996, STARSVCA02500100
   Software Productivity Consortium Services Corporation, 1993, SPC92019CMC
   TRACZ W, 1992, ADAGEIBM9202 LOR FED
   WEIDERMAN N, 1998, P 2 INT WORKSH DES E
NR 22
TC 7
Z9 7
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 3-540-66538-2
J9 LECT NOTES COMPUT SC
PY 1999
VL 1687
BP 446
EP 463
PG 18
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BT95H
UT WOS:000174580100026
ER

PT S
AU Nguyen, T
   Colman, A
   Han, J
AF Tuan Nguyen
   Colman, Alan
   Han, Jun
BE Kappel, G
   Maamar, Z
   MotahariNezhad, HR
TI Modeling and Managing Variability in Process-Based Service Compositions
SO SERVICE-ORIENTED COMPUTING
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 9th International Conference on Service-Oriented Computing (ICSOC)
CY DEC 05-08, 2011
CL Paphos, CYPRUS
SP Univ Cyprus, Comp Sci Dept, Hewlett Packard, IBM Res, Salesforce, Springer, ServTech
DE Process variability; service variability; variability management;
   service composition; feature modeling; model mapping; Software Product
   Line (SPL); Model Driven Engineering (MDE)
AB Variability in process-based service compositions needs to be explicitly modeled and managed in order to facilitate service/process customization and increase reuse in service/process development. While related work has been able to capture variability and variability dependencies within a composition, these approaches fail to capture variability dependencies between the composition and partner services. Consequently, these approaches cannot address the situation when a composite service is orchestrated from partner services some of which are customizable. In this paper, we propose a feature-based approach that is able to effectively model variability within and across compositions. The approach is supported by a process development methodology that enables the systematic reuse and management of variability. We develop a prototype system supporting extended BPMN 2.0 to demonstrate the feasibility of our approach.
C1 [Tuan Nguyen; Colman, Alan; Han, Jun] Swinburne Univ Technol, Fac Informat & Commun Technol, Melbourne, Vic, Australia.
RP Nguyen, T (reprint author), Swinburne Univ Technol, Fac Informat & Commun Technol, Melbourne, Vic, Australia.
EM tmnguyen@swin.edu.au; acolman@swin.edu.au; jhan@swin.edu.au
CR Barros A. P., 2006, IT Professional, V8, DOI 10.1109/MITP.2006.123
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Benavides D, 2010, INFORM SYST, V35, P615, DOI 10.1016/j.is.2010.01.001
   Chang S.H., 2007, P 11 INT C SOFTW PRO
   Czarnecki K., 2005, Software Process Improvement and Practice, V10, DOI 10.1002/spip.213
   Didonet M., 2006, P ECL MOD S ECL SUMM
   Griss M., 1998, P 5 INT C SOFTW REUS
   Hadaytullah, 2009, IEEE INT C WEB SERV
   Hallerbach A, 2010, J SOFTW MAINT EVOL-R, V22, P519, DOI 10.1002/smr.491
   Jouault F, 2008, SCI COMPUT PROGRAM, V72, P31, DOI 10.1016/j.scico.2007.08.002
   Kang K.C., 1990, TECHNICAL REPORT
   Kang KC, 1998, ANN SOFTW ENG, V5, P143, DOI 10.1023/A:1018980625587
   Koning M, 2009, INFORM SOFTWARE TECH, V51, P258, DOI 10.1016/j.infsof.2007.12.002
   Liang H., 2006, P 2 IEEE INT S SERV
   Mietzner R., 2008, IEEE INT C SERV COMP
   Nguyen T., 2011, P 5 INT WORKSH VAR M
   Nguyen T., 2010, IEEE INT C WEB SERV, P393
   Pohl K., 2005, SOFTWARE PRODUCT LIN
   Razavian M., 2008, 5 INT C INF TECHN NE
   Schmid K, 2004, SCI COMPUT PROGRAM, V53, P259, DOI 10.1016/j.scico.2003.04.002
   Schnieders A., 2006, P 9 INT C BUS INF SY, P583
   Sinnema M, 2004, LECT NOTES COMPUT SC, V3154, P197
   Stollberg M, 2010, LECT NOTES COMPUT SC, V6275, P425
   Sun C.-A., 2009, SYST SOFTW, V83, P502
   Svahnberg M, 2005, SOFTWARE PRACT EXPER, V35, P705, DOI 10.1002/spe.652
NR 25
TC 7
Z9 7
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-642-25534-2
J9 LECT NOTES COMPUT SC
PY 2011
VL 7084
BP 404
EP 420
PG 17
WC Computer Science, Theory & Methods
SC Computer Science
GA BBZ59
UT WOS:000309203200027
ER

PT S
AU Bagheri, E
   Di Noia, T
   Ragone, A
   Gasevic, D
AF Bagheri, Ebrahim
   Di Noia, Tommaso
   Ragone, Azzurra
   Gasevic, Dragan
BE Bosch, J
   Lee, JJ
TI Configuring Software Product Line Feature Models Based on Stakeholders'
   Soft and Hard Requirements
SO SOFTWARE PRODUCT LINES: GOING BEYOND
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 14th International Software Product Lines Conference
CY SEP 13-17, 2010
CL Jeju Island, SOUTH KOREA
SP Korean Inst Informat Sci & Engn, CoSDEC, Hitachi, Carnegie Mellon, Software Engn Inst, BigLever Software Inc, IBM, Fraunhofer
AB Feature modeling is a technique for capturing commonality and variability. Feature models symbolize a representation of the possible application configuration space, and can be customized based on specific domain requirements and stakeholder goals. Most feature model configuration processes neglect the need to have a holistic approach towards the integration and satisfaction of the stakeholder's soft and hard constraints, and the application-domain integrity constraints. In this paper, we will show how the structure and constraints of a feature model can be modeled uniformly through Propositional Logic extended with concrete domains, called P(N). Furthermore, we formalize the representation of soft constraints in fuzzy P(N) and explain how semi-automated feature model configuration is performed. The model configuration derivation process that we propose respects the soundness and completeness properties.
RI Di Noia, Tommaso/
OI Di Noia, Tommaso/0000-0002-0939-5462
CR Ausiello G., 2003, COMPLEXITY APPROXIMA
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Benavides D., 2007, VAMOS, V2007-01, P129
   Benavides D, 2005, LECT NOTES COMPUT SC, V3520, P491
   Benavides D, 2006, 1 STEP FRAMEWORK AUT
   Czarnecki K, 2004, LECT NOTES COMPUT SC, V3154, P266
   Czarnecki K, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P22
   Gheyi R., 2006, 1 ALL WORKSH PORTL U, P71
   Jackson D, 2002, ACM T SOFTW ENG METH, V11, P256, DOI 10.1145/505145.505149
   Janota M, 2007, SPLC 2007: 11TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P13
   Kang KC, 2002, IEEE SOFTWARE, V19, P58, DOI 10.1109/MS.2002.1020288
   Lopez-Herrejon R., 2001, LNCS, V2186, P10
   Mamdani E. H., 1976, 6th International Symposium on Multi-Valued Logic
   Mendonca M, 2008, GPCE'08: PROCEEDINGS OF THE ACM SIGPLAN SEVENTH INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING, P13
   Papadimitriou C.H., 1982, COMBINATORIAL OPTIMI
   Pohl K., 2005, SOFTWARE PRODUCT LIN
   Ragone A, 2008, AUTON AGENT MULTI-AG, V16, P249, DOI 10.1007/s10458-008-9033-1
   Robak S, 2003, ECBS 2003: 10TH IEEE INTERNATIONAL CONFERENCE AND WORKSHOP ON THE ENGINEERING OF COMPUTER-BASED SYSTEMS, PROCEEDINGS, P305
   Schobbens P-Y, 2006, 14 IEEE INT C REQ EN, P136, DOI [10.1109/RE.2006.23, DOI 10.1109/RE.2006.23]
   Sommerville I, 1997, ANN SOFTW ENG, V3, P101, DOI 10.1023/A:1018946223345
   Wang HH, 2007, J WEB SEMANT, V5, P117, DOI 10.1016/j.websem.2006.11.006
   Yager R.R., 1994, ESSENTIALS FUZZY MOD
NR 22
TC 6
Z9 6
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-642-15578-9
J9 LECT NOTES COMPUT SC
PY 2010
VL 6287
BP 16
EP 31
PG 16
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BTD71
UT WOS:000286579500002
ER

PT J
AU O'Leary, P
   McCaffery, F
   Thiel, S
   Richardson, I
AF O'Leary, Padraig
   McCaffery, Fergal
   Thiel, Steffen
   Richardson, Ita
TI An agile process model for product derivation in software product line
   engineering
SO JOURNAL OF SOFTWARE-EVOLUTION AND PROCESS
LA English
DT Article
DE software product lines; product derivation; agile approaches
AB Software product lines (SPL) and Agile practices have emerged as new paradigms for developing software. Both approaches share common goals; such as improving productivity, reducing time to market, decreasing development costs and increasing customer satisfaction. These common goals provide the motivation for this research. We believe that integrating Agile practices into SPL can bring a balance between agility and formalism. However, there has been a little research on such integration. We have been researching the potential of integrating Agile approaches in one of the key SPL process areas, product derivation (PD). In this paper, we present an outline of our Agile process model for PD that was developed through industry-based case study research. Copyright (c) 2010 John Wiley & Sons, Ltd.
C1 [O'Leary, Padraig; McCaffery, Fergal; Richardson, Ita] Univ Limerick, Lero, Limerick, Ireland.
   [McCaffery, Fergal] Dundalk Inst Technol, Dundalk, Ireland.
   [Thiel, Steffen] Furtwangen Univ Appl Sci, Dept Comp Sci, Furtwangen, Germany.
RP O'Leary, P (reprint author), Univ Limerick, Lero, Limerick, Ireland.
EM padraig.oleary@lero.ie
RI Rocha, Fabio/M-4694-2014
OI Rocha, Fabio/0000-0002-0512-5406
FU IRCSET [RS/06/167]; Science Foundation Ireland [03/CE2/I303_1,
   07/SK/I1299]
FX This work is partially funded by IRCSET under grant no. RS/06/167 and by
   Science Foundation Ireland under grant nos. 03/CE2/I303_1 and
   07/SK/I1299.
CR [Anonymous], 2007, ECL PROC FRAM COMP E
   Beck K, 2004, EXTREME PROGRAMMING, V2nd
   Beck K, 1999, COMPUTER, V32, P70, DOI 10.1109/2.796139
   Beck K, 2006, MANIFESTO AGILE SOFT
   Beck K, 1999, EXTREME PROGRAMMING, P190
   Bosch, 2006, PRESENTATION PRODUCT
   Braun R, 2006, REFERENCE MODELING B, P331
   Carbon R, 2006, 1 INT WORKSH AG PROD
   Clements P, 2001, SOFTWARE PRODUCT LIN
   Deelstra S, 2005, J SYST SOFTWARE, V74, P173, DOI 10.1016/j.jss.2003.11.012
   Grenning J, 2001, USING XP BIG PROCESS
   Griss ML, 2000, ICSR 6 P 6 INT C SOF, P137
   Highsmith J, 2001, COMPUTER, V34, P120, DOI 10.1109/2.947100
   Hotz L., 2003, P SOFTW VAR MAN WORK
   Karlstrom D, 2002, 3 INT C EXTREME PROG
   Kurmann R, 2006, 1 INT WORKSH AG PROD
   Larman C, 2003, AGILE ITERATIVE DEV, P342
   Mikael L, 2004, COMPUTING PRACTICES, V37, P38
   Muccini H, 2003, ELECT NOTES THEORETI, V82
   Navarrete F, 2006, 1 INT WORKSH AG PROD
   Noor M, 2006, 1 INT WORKSH AG PROD
   Northrop L, 2008, FRAMEWORK SOFTWARE P
   O'Leary P, 2007, 4 INT WORKSH RAP INT
   O'Leary P., 2007, P 2 IFIP CENTR E EUR
   O'Leary P, 2009, 16 EUR C SOFTW PROC
   O'Leary P, 2009, PRODUCT DERIVATION P, P241
   O'Leary P, 2009, SOFTW PROD LIN C P 1
   O'Leary P., 2008, 3 IFIP TC2 CENTR E E
   O'Leary P, 2008, BOSCH TECHNICAL REPO
   O'Leary P, 2009, 4 INT C SOFTW DAT TE
   Perrouin G, 2008, 12 INT SOFTW PROD LI
   Poppendieck M, 2006, ADDISON WESLEY SIGNA, P304
   RABISER R, 2007, 11 INT SOFTW PROD LI
   Rising L, 2000, IEEE SOFTWARE, V17, P26, DOI 10.1109/52.854065
   Schwaber K., 2001, AGILE SOFTWARE DEV S, V1st
   Tian K., 2006, 1 INT WORKSH AG PROD
   Trinidad P, 2006, 1 INT WORKSH AG PROD
NR 37
TC 6
Z9 6
PU WILEY-BLACKWELL
PI HOBOKEN
PA 111 RIVER ST, HOBOKEN 07030-5774, NJ USA
SN 2047-7481
J9 J SOFTW-EVOL PROC
JI J. Softw.-Evol. Proc.
PD AUG
PY 2012
VL 24
IS 5
SI SI
BP 561
EP 571
DI 10.1002/smr.498
PG 11
WC Computer Science, Software Engineering
SC Computer Science
GA 975AO
UT WOS:000306479100011
ER

PT J
AU Lochau, M
   Oster, S
   Goltz, U
   Schurr, A
AF Lochau, Malte
   Oster, Sebastian
   Goltz, Ursula
   Schuerr, Andy
TI Model-based pairwise testing for feature interaction coverage in
   software product line engineering
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software product lines; Model-based engineering and testing; Test
   generation and coverage; Combinatorial testing; Feature interaction
ID STATECHARTS; SYSTEMS
AB Testing software product lines (SPLs) is very challenging due to a high degree of variability leading to an enormous number of possible products. The vast majority of today's testing approaches for SPLs validate products individually using different kinds of reuse techniques for testing. Because of their reusability and adaptability capabilities, model-based approaches are suitable to describe variability and are therefore frequently used for implementation and testing purposes of SPLs. Due to the enormous number of possible products, individual product testing becomes more and more infeasible. Pairwise testing offers one possibility to test a subset of all possible products. However, according to the best of our knowledge, there is no contribution discussing and rating this approach in the SPL context. In this contribution, we provide a mapping between feature models describing the common and variable parts of an SPL and a reusable test model in the form of statecharts. Thereby, we interrelate feature model-based coverage criteria and test model-based coverage criteria such as control and data flow coverage and are therefore able to discuss the potentials and limitations of pairwise testing. We pay particular attention to test requirements for feature interactions constituting a major challenge in SPL engineering. We give a concise definition of feature dependencies and feature interactions from a testing point of view, and we discuss adequacy criteria for SPL coverage under pairwise feature interaction testing and give a generalization to the T-wise case. The concept and implementation of our approach are evaluated by means of a case study from the automotive domain.
C1 [Oster, Sebastian; Schuerr, Andy] Tech Univ Darmstadt, Real Time Syst Grp, Darmstadt, Germany.
   [Lochau, Malte; Goltz, Ursula] TU Braunschweig, Inst Programming & React Syst, Braunschweig, Germany.
RP Oster, S (reprint author), Tech Univ Darmstadt, Real Time Syst Grp, Darmstadt, Germany.
EM lochau@ips.cs.tu-bs.de; oster@es.tu-darmstadt.de; goltz@ips.cs.tu-bs.de;
   schuerr@es.tu-darmstadt.de
CR Belli F, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P718
   Bogdanov K, 1999, LECT NOTES COMPUT SC, V1641, P107
   Calder M, 2003, COMPUT NETW, V41, P115, DOI 10.1016/S1389-1286(02)00352-3
   Cichos H., 2011, LECT NOTES COMPUTER
   Clements P, 2001, SOFTWARE PRODUCT LIN
   Cohen D. M., 1994, Proceedings. 5th International Symposium on Software Reliability Engineering (Cat. No.94TH8017), DOI 10.1109/ISSRE.1994.341392
   Cohen M. B., 2007, P INT S SOFTW TEST A, P129, DOI 10.1145/1273463.1273482
   Cohen M.B., 2006, P ISSTA 2006 WORKSH, P53, DOI 10.1145/1147249.1147257
   Cormen T.H., 2001, INTRO ALGORITHMS
   Czarnecki K., 2005, SOFTWARE PROCESS IMP, P7
   Czarnecki K, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P22
   Czarnecki K., 2005, Software Process Improvement and Practice, V10, DOI 10.1002/spip.225
   Dziobek C., 2009, MBEES, P36
   Ferber S., 2002, P 2 INT C SOFTW PROD, P235
   Gonzalez A., 2008, P INT C CHIL COMP SC, P32
   Gronniger H., 2008, MODELLIERUNG
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Harel D., 1996, ACM Transactions on Software Engineering and Methodology, V5, DOI 10.1145/235321.235322
   Hartmann J., 2004, P INT WORKSH SOFTW P, P58
   Heymans P, 2008, IET SOFTW, V2, P281, DOI 10.1049/iet-sen:20070055
   Hong HS, 2000, SOFTW TEST VERIF BEH, V10, P203, DOI 10.1002/1099-1689(200012)10:4<203::AID-STVR212>3.0.CO;2-2
   Juarez-Dominguez A. L., 2008, P 2008 INT WORKSH MO, P45, DOI 10.1145/1370731.1370743
   Kang K.C., 1990, D91 SECURESCM
   Kishi Tomoji, 2004, P INT WORKSH SOFTW P, P19
   Kolb R., 2003, P CONQUEST 03 NUR GE, P81
   Lei Y., 1998, IEEE HIGH ASS SYST E, P254
   Lochau M., 2010, P 6 INT WORKSH MOD B
   MASIERO PC, 1994, INFORM SOFTWARE TECH, V36, P615, DOI 10.1016/0950-5849(94)90021-3
   McGregor J. D., 2001, CMUSEI2001TR022
   Metzger A, 2004, COMPUT NETW, V45, P625, DOI 10.1016/j.comnet.2004.03.002
   Metzger A, 2007, INT REQUIR ENG CONF, P243, DOI 10.1109/RE.2007.61
   Metzger A., 2005, FEATURE INTERACTIONS, P198
   Muller T., 2009, 06 TU BS
   Olimpiew E.M., 2008, THESIS G MASON U
   OMG, 2009, UML VERS 2 2
   Oster S., 2009, P INT SOFTW PROD LIN
   Oster S., 2010, MODEL BASED TESTING
   Oster S., 2011, 5 INT WORKSH VAR MOD, P79
   Oster S, 2010, LECT NOTES COMPUT SC, V6287, P196, DOI 10.1007/978-3-642-15579-6_14
   Perrouin G., 2010, 3 INT C SOFTW TEST V, P459
   Pohl K., 2005, SOFTWARE PRODUCT LIN
   Pretschner A., 2004, MODEL BASED TESTING, P281
   Reuys A, 2005, LECT NOTES COMPUT SC, V3520, P519
   Souza S., 2000, P LAT AM C INF, P167
   Stevens B., 1998, C CTR ADV STUD COLL, P22
   Szasz N., 2008, P 2 INT WORKSH VAR M, P131
   Tevanlinna A., 2004, ACM SIGSOFT SOFTWARE, V29, P12, DOI DOI 10.1145/979743.979766
   Utting M, 2007, PRACTICAL MODEL BASE
   van Glabbeek R, 2001, ACTA INFORM, V37, P229, DOI 10.1007/s002360000041
   von der Beeck M., 1994, Formal Techniques in Real-Time and Fault-Tolerant Systems. Third International Symposium Proceedings. ProCoS
   Weissleder S., 2008, P 1 WORKSH MOD BAS T
   White J, 2009, J SYST SOFTWARE, V82, P1268, DOI 10.1016/j.jss.2009.02.011
NR 52
TC 6
Z9 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2012
VL 20
IS 3-4
SI SI
BP 567
EP 604
DI 10.1007/s11219-011-9165-4
PG 38
WC Computer Science, Software Engineering
SC Computer Science
GA 995IQ
UT WOS:000308001900005
ER

PT S
AU Reiser, MO
   Weber, M
AF Reiser, MO
   Weber, M
BE Obbink, H
   Pohl, K
TI Using product sets to define complex product decisions
SO SOFTWARE PRODUCT LINES, PROCEEDINGS
SE LECTURE NOTES IN COMPUTER SCIENCE
LA English
DT Article; Proceedings Paper
CT 9th International Software Product Lines Conference (SPLC 2005)
CY SEP 26-29, 2005
CL Rennes, FRANCE
AB Product family engineering consists of several activities commonly separated into the areas of domain engineering and product engineering. The main part of product engineering is the definition of product decisions, which means in the context of feature modeling that for each feature the product engineer has to define in what products it will be included. In the automotive domain - and probably in many other embedded real-time domains as well - the considerations that influence these feature selections are extremely complex and, at the same time, need to be documented as closely as possible for later reference. In this paper, we (1) present a detailed description of this problem and (2) try to show that existing approaches do not sufficiently meet these concerns. We then (3) provide a detailed definition of product sets as a means to solve the problem and (4) show what methodological implications arise from the use of this concept.
C1 Tech Univ Berlin, Fachgebiet Softwaretech, Sekretariat FR56, D-10587 Berlin, Germany.
   DaimlerChrysler AG, Res & Technol, REI, SM, D-10559 Berlin, Germany.
RP Reiser, MO (reprint author), Tech Univ Berlin, Fachgebiet Softwaretech, Sekretariat FR56, Franklinstr 28-29, D-10587 Berlin, Germany.
EM moreiser@cs.tu-berlin.de; N.Weber@DaimlerChrysler.com
CR BOCKLE G, 2004, SOFTWARE PRODUKTLINI
   BUHNE S, 2004, WORKSH SOFTW ENG AUT
   Clements P, 2002, SOFTWARE PRODUCT LIN
   Czarnecki K, 2004, LECT NOTES COMPUT SC, V3154, P266
   CZARNEKI K, 2000, GEN PROGRAMMING METH
   FEY D, 2002, LNCS, V2379, P198
   Greenfield J., 2004, SOFTWARE FACTORIES
   Grimm K, 2003, PROC INT CONF SOFTW, P498, DOI 10.1109/ICSE.2003.1201228
   Kang K., 1990, CMUSEI90TR21
   Kang KC, 2002, IEEE SOFTWARE, V19, P58, DOI 10.1109/MS.2002.1020288
   Kang Kyo C., 1998, ANN SOFTWARE ENG, V5
   Pohl K., 2005, SOFTWARE PRODUCT LIN
   WEBER M, 2002, RE2002, P331
   WEBER W, 2004, INCOSE 2004 TOUL FRA
NR 14
TC 6
Z9 6
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 3-540-28936-4
J9 LECT NOTES COMPUT SC
PY 2005
VL 3714
BP 21
EP 32
PG 12
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BDG27
UT WOS:000233358200003
ER

PT S
AU Cabral, I
   Cohen, MB
   Rothermel, G
AF Cabral, Isis
   Cohen, Myra B.
   Rothermel, Gregg
BE Bosch, J
   Lee, JJ
TI Improving the Testing and Testability of Software Product Lines
SO SOFTWARE PRODUCT LINES: GOING BEYOND
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 14th International Software Product Lines Conference
CY SEP 13-17, 2010
CL Jeju Island, SOUTH KOREA
SP Korean Inst Informat Sci & Engn, CoSDEC, Hitachi Ltd, Carnegie Mellon, Software Engn Inst, BigLever Software Inc, IBM, Fraunhofer Inst Appl Informat Technol
AB Software Product Line (SPL) engineering offers several advantages in the development of families of software products. There is still a need, however, for better understanding of testability issues and for testing techniques that can operate cost-effectively on SPLs. In this paper we consider these testability issues and highlight some differences between optional versus alternative features. We then provide a graph based testing approach called the FIG Basis Path method that selects products and features for testing based on a feature dependency graph. We conduct a case study on several non-trivial SPLs and show that for these subjects, the FIG Basis Path method is as effective as testing all products, but tests no more than 24% of the products in the SPL.
C1 [Cabral, Isis; Cohen, Myra B.; Rothermel, Gregg] Univ Nebraska, Dept Comp Sci, Lincoln, NE 68583 USA.
RP Cabral, I (reprint author), Univ Nebraska, Dept Comp Sci, Lincoln, NE 68583 USA.
EM icabral@cse.unl.edu; myra@cse.unl.edu; grother@cse.unl.edu
CR BACHMEYER RC, 2007, INT C CONC STRUCT, P179
   Batory D, 2004, IEEE T SOFTWARE ENG, V30, P355, DOI 10.1109/TSE.2004.23
   BERTOLINO A, 2006, LNCS, P425
   Clements P, 2001, SOFTWARE PRODUCT LIN
   Cohen DM, 1997, IEEE T SOFTWARE ENG, V23, P437, DOI 10.1109/32.605761
   Cohen M.B., 2006, WORKSH ROL ARCH TEST, P53
   Czarnecki K, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P22
   Czarnecki K., 2005, Software Process Improvement and Practice, V10, DOI 10.1002/spip.225
   CZARNECKI K, 2005, LNCS, V3566, P313
   DENGER C, 2006, INT S EMP SOFTW ENG, P184
   Figueiredo E, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P261
   HARROLD MJ, 1998, WORKSH ROL ARCH TEST, P73
   Jaring M, 2008, SEVENTH INTERNATIONAL CONFERENCE ON COMPOSITION-BASED SOFTWARE SYSTEMS, PROCEEDINGS, P120, DOI 10.1109/ICCBSS.2008.9
   Kang K. C., 1990, FEATURE ORIENTED DOM
   KOLB R, 2006, WORKSH ROL SOFTW ARC, P22
   Lopez-Herrejon R., 2001, LNCS, V2186, P10
   McGregor J. D., 2001, TESTING SOFTWARE PRO
   Pohl K., 2005, SOFTWARE PRODUCT LIN
   Qu X., 2008, INT S SOFTW TEST AN, P75
   Schobbens P. -Y., 2006, IEEE INT C REQ ENG R, P136
   SCHURR A, 2010, THEORY PRACTICE COMP, P112
   Thaker S., 2007, INT C GEN PROGR COMP, P95
   Uzuncaova E., 2008, INT S SOFTW REL ENG, P249
   WALL T, 2010, ABBOT JAVA GUI TEST
   Yan J, 2008, INFORM PROCESS LETT, V107, P87, DOI 10.1016/j.ipl.2008.01.007
NR 25
TC 6
Z9 6
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-642-15578-9
J9 LECT NOTES COMPUT SC
PY 2010
VL 6287
BP 241
EP 255
PG 15
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BTD71
UT WOS:000286579500017
ER

PT S
AU von der Massen, T
   Lichter, H
AF von der Massen, T
   Lichter, H
BE Obbink, H
   Pohl, K
TI Determining the variation degree of feature models
SO SOFTWARE PRODUCT LINES, PROCEEDINGS
SE LECTURE NOTES IN COMPUTER SCIENCE
LA English
DT Article; Proceedings Paper
CT 9th International Software Product Lines Conference (SPLC 2005)
CY SEP 26-29, 2005
CL Rennes, FRANCE
AB When developing a product line the knowledge about the variation degree is of vital importance for development, maintenance and evolution of a product line. In this paper we focus on the variation degree of product line feature models, considering different types of variability and dependency relationships between features.
C1 Rhein Westfal TH Aachen, Res Grp Software Construct, D-5100 Aachen, Germany.
RP von der Massen, T (reprint author), Rhein Westfal TH Aachen, Res Grp Software Construct, D-5100 Aachen, Germany.
EM vdmass@cs.rwth-aachen.de; lichter@cs.rwth-aachen.de
CR EISENECKER U, 2001, OBJECTSPEKTRUM, V5, P23
   KANG K, 2000, CMUSEI90TR021
   LICHTER H, 2003, VERGLEICH ANSATZEN F
   VANDEURSEN A, 2001, J COMPUTING INFORMAT
   VONDERMASSEN T, 2004, INT WORKSH SPLC 2004
NR 5
TC 6
Z9 6
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 3-540-28936-4
J9 LECT NOTES COMPUT SC
PY 2005
VL 3714
BP 82
EP 88
PG 7
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BDG27
UT WOS:000233358200008
ER

PT S
AU Geppert, B
   Li, J
   Rossler, F
   Weiss, DM
AF Geppert, B
   Li, J
   Rossler, F
   Weiss, DM
BE Bosch, J
   Krueger, C
TI Towards generating acceptance tests for product lines
SO SOFTWARE REUSE: METHODS, TECHNIQUES, AND TOOLS: PROCEEDINGS
SE LECTURE NOTES IN COMPUTER SCIENCE
LA English
DT Article; Proceedings Paper
CT 8th International Conference on Software Reuse
CY JUL 05-09, 2004
CL Madrid, SPAIN
AB Software product-line engineering aims at improving the efficiency and effectiveness of software development by exploiting the product line members' commonalities and by controlling their variabilities. The duality of commonalities and variabilities holds for all kinds of assets ranging from requirements specifications over design documents to test cases. A decision model controls the way a product can be distinguished from the rest of the family and is used to extract product-specific information (e.g., product requirements) from the family specifications. Though we traditionally employ decision models for generating code, we aim on capitalizing on the investment for designing the decision model by leveraging it to generate test cases. In this paper we focus on acceptance testing of functions and features, and introduce our approach of using the decision model concept to maintain and generate acceptance test cases for one of our major product lines. Preliminary evaluation of this method demonstrates very promising savings of space and effort as compared to conventional methods.
C1 Avaya Labs, Basking Ridge, NJ 07920 USA.
RP Geppert, B (reprint author), Avaya Labs, 233 Mt Airy Rd, Basking Ridge, NJ 07920 USA.
EM bgeppert@research.avayalabs.com; jjli@research.avayalabs.com;
   weiss@research.avayalabs.com; roessler@research.avayalabs.com
CR Ardis M, 2000, SOFTWARE PRACT EXPER, V30, P825, DOI 10.1002/(SICI)1097-024X(200006)30:7<825::AID-SPE322>3.0.CO;2-1
   Bosch J, 2000, DESIGN USE SOFTWARE
   BOSCH J, 2001, 23 INT C SOFTW ENG I
   Clements P, 2002, SOFTWARE PRODUCT LIN
   GEPPERT B, 2001, INT WORKSH PROD LIN
   GEPPERT B, 2003, 9 INT SOFTW METR C S
   GEPPERT B, 2003, ICSE WORKSH VAR MAN
   LI JJ, 2002, P IEEE ISORC
   MCGREGOR JD, CMUSEI2001TR022
   Muccini H, 2003, ELECT NOTES THEORETI, V82
   Parnas D, 2001, SOFTWARE FUNDAMENTAL
   RAPPS S, 1985, IEEE T SOFTWARE ENG, V11, P367, DOI 10.1109/TSE.1985.232226
   RUMBAUGH J, 1998, UML REFERENCE MANUAL
   WEISS D, 1999, SOFTWRAE PRODUCT LIN
NR 14
TC 6
Z9 6
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 3-540-22335-5
J9 LECT NOTES COMPUT SC
PY 2004
VL 3107
BP 35
EP 48
PG 14
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BAK57
UT WOS:000222635800004
ER

PT S
AU Elsner, C
   Ulbrich, P
   Lohmann, D
   Schroder-Preikschat, W
AF Elsner, Christoph
   Ulbrich, Peter
   Lohmann, Daniel
   Schroeder-Preikschat, Wolfgang
BE Bosch, J
   Lee, JJ
TI Consistent Product Line Configuration across File Type and Product Line
   Boundaries
SO SOFTWARE PRODUCT LINES: GOING BEYOND
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 14th International Software Product Lines Conference
CY SEP 13-17, 2010
CL Jeju Island, SOUTH KOREA
SP Korean Inst Informat Sci & Engn, CoSDEC, Hitachi, Carnegie Mellon, Software Engn Inst, BigLever Software Inc, IBM, Fraunhofer
AB Creating a valid software configuration of a product line can require laborious customizations involving multiple configuration file types, such as feature models, domain-specific languages, or preprocessor defines in C header files. Using configurable off-the-shelf components causes additional complexity. Without checking of constraints across file types boundaries already at configuration time, intricate inconsistencies are likely to be introduced-resulting in product defects, which are costly to discover and resolve later on.
   Up to now, at best ad-hoc solutions have been applied. To tackle this problem in a general way, we have developed an approach and a corresponding plug-in infrastructure. It allows for convenient definition and checking of constraints across configuration file types and product line boundaries. Internally, all configuration files are converted to models, facilitating the use of model-based constraint languages (e.g., OCL). Converter plug-ins for arbitrary configuration file types may be integrated and hide a large amount of complexity usually associated with modeling. We have validated our approach using a quadrotor helicopter product line comprising three sub-product-lines and four different configuration file formats. The results give evidence that our approach is practically applicable, reduces time and effort for product derivation (by avoiding repeated compiling, testing, and reconfiguration cycles), and prevents faulty software deployment.
C1 [Elsner, Christoph] Siemens Corp Res & Technol, Erlangen, Germany.
RP Elsner, C (reprint author), Siemens Corp Res & Technol, Erlangen, Germany.
EM christoph.elsner.ext@siemens.com; ulbrich@cs.fau.de; lohmann@cs.fau.de;
   wosch@cs.fau.de
CR [Anonymous], 2010, OBJ CONSTR LANG VERS
   BENAVIDES D, 2007, 1 INT WSHOP VAR MOD
   Beuche D., 2006, VARIANT MANAGEMENT P
   Bezivin J., 2005, SOFTWARE SYSTEM MODE, V4, P171, DOI DOI 10.1007/S10270-005-0079-0
   CZARNECKI K, 2000, METHODS TOOLS APPL
   CZARNECKI K, 2006, 6 INT C GEN PROGR CO, P211
   Deelstra S, 2005, J SYST SOFTWARE, V74, P173, DOI 10.1016/j.jss.2003.11.012
   EGYED A, 2001, 16 IEEE INT C AUT SO
   ELSNER C, 2009, 1 WSHOP FEAT OR SOFT
   Kelly S, 2008, DOMAIN SPECIFIC MODE
   Lohmann D., 2009, 2009 USENIX TC USENI, P215
   Metzger A, 2007, INT REQUIR ENG CONF, P243, DOI 10.1109/RE.2007.61
   ROSENMLLER M, 2010, 4 INT WSHOP VAR MOD
   Stephan M., 2008, ECORE FMP TOOL EDITI
   TRUJILLO S, 2007, 1 WORKSH SERV OR ARC
   ULBRICH P, I4COPTER PROJECT RES
   van Ommering R., 2002, 24 INT C SOFTW ENG I, P255
   Voelter M, 2006, MODEL DRIVEN SOFTWAR
   VOLTER M, 2007, 11 SOFTW PROD LIN C, P233
NR 19
TC 5
Z9 5
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-642-15578-9
J9 LECT NOTES COMPUT SC
PY 2010
VL 6287
BP 181
EP 195
PG 15
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BTD71
UT WOS:000286579500013
ER

PT S
AU Buhrdorf, R
   Churchett, D
   Krueger, CW
AF Buhrdorf, R
   Churchett, D
   Krueger, CW
BE VanDerLinden, F
TI Salion's experience with a reactive software product line approach
SO SOFTWARE PRODUCT-FAMILY ENGINEERING
SE LECTURE NOTES IN COMPUTER SCIENCE
LA English
DT Article; Proceedings Paper
CT 5th International Workshop on Product Family Engineering (PFE-5)
CY NOV 04-06, 2003
CL Siena, ITALY
SP European Ind
AB Using a reactive software product line approach, Salion made the transition to software product lines with 2 person-months of effort, the equivalent of 1% of the effort required to build its baseline enterprise software product. This is two orders-of-magnitude less than the effort typically reported with proactive software product line transition efforts. Since the transition, Salion has achieved 90-day time-to-market intervals for seven new commercial products in its software product line, with each new product deployment requiring only 10% of the effort required to build its baseline enterprise software product. This report summarizes Salion's experience with a reactive software product line approach, some of the unique contributions of the experience, and generalizations that characterize how other organizations may benefit from reactive product line techniques.
C1 Sal Inc, Austin, TX 78701 USA.
   BigLever Software Inc, Austin, TX 78730 USA.
RP Buhrdorf, R (reprint author), Sal Inc, 720 Brazos St,Ste 700, Austin, TX 78701 USA.
EM ross.buhrdorf@salion.com; dale.churchett@salion.com;
   ckrueger@biglever.com
CR BUHRDORF R, SALION DEV APPROACH
   Clements P., 2002, IEEE SOFTWARE    JUL, P28
   Clements P.C., 2002, CMUSEI2002TR038
   KRUEGER C, 2002, P 2 INT C SPLC 2 SAN, P257
   KRUEGER C, 2002, 200207081 BIGL SOFTW
   KRUEGER C, 2002, P OOPSLA 2002 PLEES, P43
   KRUEGER CW, 2001, P 4 INT WORKSH PROD
NR 7
TC 5
Z9 5
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 3-540-21941-2
J9 LECT NOTES COMPUT SC
PY 2004
VL 3014
BP 317
EP 322
PG 6
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BAG00
UT WOS:000222041400024
ER

PT S
AU Halmans, G
   Pohl, K
   Sikora, E
AF Halmans, Guenter
   Pohl, Klaus
   Sikora, Ernst
BE Bellahsene, Z
   Leonard, M
TI Documenting application-specific adaptations in software product line
   engineering
SO ADVANCED INFORMATION SYSTEMS ENGINEERING, PROCEEDINGS
SE LECTURE NOTES IN COMPUTER SCIENCE
LA English
DT Proceedings Paper
CT 20th International Conference on Advanced Information Systems
   Engineering
CY JUN 16-20, 2008
CL Montpellier, FRANCE
SP Google, MICROSOFT, European Res Consort Informat & Math, Univ Montpellier 2, LIRMM, Lab Informat Robot Microelect Montpellier, Ctr Natl Rech Sci
DE product line engineering; variability modelling; application-specific
   adaptations; traceability
AB Software product line engineering distinguishes between two types of development processes: domain engineering and application engineering. In domain engineering software artefacts are developed for reuse. In application engineering domain artefacts are reused to create specific applications.
   Application engineers often face the problem that individual customer needs cannot be satisfied completely by reusing domain artefacts and thus application-specific adaptations are required. Either the domain artefacts or the application artefacts need to be modified to incorporate the application-specific adaptations. We consider the case that individual customer needs are realised by adapting the application artefacts and propose a technique for maintaining traceability between the adapted application artefacts and the domain artefacts. The traceable documentation of application-specific adaptations is facilitated by an application variability model (AVM) which records the differences between the domain artefacts and the application artefacts of a particular application. The approach is formalised using graph transformations.
C1 [Halmans, Guenter] RDS Consulting GmbH, D-40470 Dusseldorf, Germany.
RP Halmans, G (reprint author), RDS Consulting GmbH, Morsenbroicher Weg 200, D-40470 Dusseldorf, Germany.
CR Atkinson C., 2002, COMPONENT BASED PROD
   Baum L., 2000, Proceedings Fourth International Conference on Requirements Engineering. ICRE 2000. (Cat. No.98TB100219), DOI 10.1109/ICRE.2000.855606
   BOSCH J, 2000, SOFTWARE ARCHITECTUR, P169
   Buhne S, 2005, 13TH IEEE INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P41, DOI 10.1109/RE.2005.45
   Clements P, 2001, SOFTWARE PRODUCT LIN
   Ehrig H., 2006, FUNDAMENTALS ALGEBRA
   Eriksson M, 2005, LECT NOTES COMPUT SC, V3714, P33
   GOMAA H., 2004, DESIGNING SOFTWARE P
   HALMANS G, 2007, THESIS
   Lai C. T. R., 1999, SOFTWARE PRODUCT LIN
   Mannion M., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), DOI 10.1109/ICSE.1999.841035
   Mohan K, 2006, COMMUN ACM, V49, P68, DOI 10.1145/1183236.1183269
   Padmanabhan P, 2005, AUTOMAT SOFTW ENG, V12, P447, DOI 10.1007/s10515-005-2648-4
   Pohl K., 2005, SOFTWARE PRODUCT LIN
   Raatikainen M., 2005, Software Process Improvement and Practice, V10, DOI 10.1002/spip.211
   Reuys A, 2005, LECT NOTES COMPUT SC, V3520, P519
NR 16
TC 5
Z9 5
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-540-69533-2
J9 LECT NOTES COMPUT SC
PY 2008
VL 5074
BP 109
EP 123
PG 15
WC Computer Science, Information Systems; Computer Science, Theory &
   Methods
SC Computer Science
GA BHW75
UT WOS:000257089900008
ER

PT S
AU Barbosa, EA
   Batista, T
   Garcia, A
   Silva, E
AF Barbosa, Eiji Adachi
   Batista, Thais
   Garcia, Alessandro
   Silva, Eduardo
BE Crnkovic, I
   Gruhn, V
   Book, M
TI PL-AspectualACME: An Aspect-Oriented Architectural Description Language
   for Software Product Lines
SO SOFTWARE ARCHITECTURE
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 5th European Conference on Software Architecture (ECSA 2011)
CY SEP 13-16, 2011
CL Essen, GERMANY
SP Univ Duisburg Essen, PALUNO, Ruhr Inst Software Technol, Adesso, e on
DE Software Product Line; ADL; PL-AspectualACME
AB Software Product Line (SPL) development typically relies on feature models to represent the commonalities and variabilities of a family of software products. Although feature models play an important role in describing SPL elements, they are limited to provide high-level feature decompositions that do not explicitly represent the SPL architecture. To tackle this problem, we present PL-AspectualACME, an extension of the ACME architecture description language that enriches existing abstractions to express architectural variabilities. They support the specification of product variations without forcing architects to learn many new abstractions. We evaluate the applicability of our proposal in the context of a real large-scale system, the Ginga SPL architecture.
C1 [Barbosa, Eiji Adachi; Garcia, Alessandro] Pontificia Univ Catolica Rio de Janeiro, Dept Informat, OPUS Res Grp, Rio de Janeiro, Brazil.
RP Barbosa, EA (reprint author), Pontificia Univ Catolica Rio de Janeiro, Dept Informat, OPUS Res Grp, Rio de Janeiro, Brazil.
EM ebarbosa@inf.puc-rio.br; thais@ufrnet.br; afgarcia@inf.puc-rio.br;
   duh.ciencomp@gmail.com
CR Batista T., 2006, P 5 INT WORKSH EARL
   Clements P, 2001, SOFTWARE PRODUCT LIN
   Figueiredo Eduardo, 2008, 2008 ACM/IEEE 30th International Conference on Software Engineering. ICSE'08, DOI 10.1145/1368088.1368124
   Garlan D., 1997, P 1997 C CTR AD STUD
   Garlan D., 1993, INTRO SOFTWARE ARCHI
   Ginga, BRAZ TERR DIG TV SYS
   Kang K., 1990, CMUSEI90TR21
   Kiczales G., 1997, P 14 EUR C OBJ OR PR
   LOUGHRAN N, 2008, P SOFTW COMP, V4954, P36
   Medvidovic N., 1997, IEE Proceedings-Software Engineering, V144, DOI 10.1049/ip-sen:19971608
   Saraiva D, 2010, LECT NOTES COMPUT SC, V6285, P166, DOI 10.1007/978-3-642-15114-9_14
NR 11
TC 5
Z9 5
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-642-23797-3
J9 LECT NOTES COMPUT SC
PY 2011
VL 6903
BP 139
EP 146
PG 8
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BBB92
UT WOS:000306397800014
ER

PT S
AU Fantinato, M
   Gimenes, IMDS
   de Toledo, MBF
AF Fantinato, Marcelo
   Gimenes, Itana Maria de S.
   de Toledo, Maria Beatriz F.
BE Kramer, BJ
   Lin, KJ
   Narasimhan, P
TI Supporting QoS negotiation with feature modeling
SO Service-Oriented Computing - ICSOC 2007, Proceedings
SE LECTURE NOTES IN COMPUTER SCIENCE
LA English
DT Proceedings Paper
CT 5th International Conference on Service-Oriented Computing (ICSOC 2007)
CY SEP 17-20, 2007
CL Vienna, AUSTRIA
SP ACM SIGHH, ACM SIGWeb, ACM SIGSE, Networked European Software & Services Intitiat
DE e-contracts; Web services; QoS; information reuse; features
ID WEB SERVICES; CONTRACT
AB Feature modeling is a technique that has been widely used for capturing and managing commonalities and variabilities of product families in the context of software product line. This paper presents a feature-based approach to be applied in QoS negotiation during the establishment of a Web services e-contract. Its motivation is that the e-negotiation process, aiming at defining attributes and levels for QoS - in a particular business domain, usually involves a set of well-defined common and variation points.
C1 Univ Estadual Campinas, Inst Comp, Campinas, Brazil.
RP Fantinato, M (reprint author), Univ Estadual Campinas, Inst Comp, Campinas, Brazil.
RI Fantinato, Marcelo/G-1071-2012
CR Andrieux A, WEB SERVICES AGREEME
   Antkiewicz M., 2004, P 2004 OOPSLA WORKSH, P67, DOI 10.1145/1066129.1066143
   Berry A, 2005, INT J COOP INF SYST, V14, P131, DOI 10.1142/S0218843005001109
   Chiu D., 2003, P HICSS, P74
   Czarnecki K., 2005, Software Process Improvement and Practice, V10, DOI 10.1002/spip.225
   Fantinato M., 2006, P IEEE CEC EEE SAN F, P34
   Fantinato M, 2006, LECT NOTES COMPUT SC, V4102, P290
   Hoffner Y, 2001, COMPUT NETW, V37, P111, DOI 10.1016/S1389-1286(01)00210-9
   Hoffner Y, 2005, INT J COOP INF SYST, V14, P217, DOI 10.1142/S0218843005001134
   JERTILA A, 2005, P 7 INT IEEE C E COM, P396
   Kaminski H., 2006, P IEEE CEC EEE SAN F, P47
   KANG K, 1990, CMUSEI90TR021 SEI CM
   Kang KC, 1998, ANN SOFTW ENG, V5, P143, DOI 10.1023/A:1018980625587
   Keller A., 2003, Journal of Network and Systems Management, V11, DOI 10.1023/A:1022445108617
   Krishna P., 2005, INFORM TECHNOL MANAG, V6, P363, DOI 10.1007/s10799-005-3901-z
   Marjanovic O., 2001, Proceedings Fifth IEEE International Enterprise Distributed Object Computing Conference, DOI 10.1109/EDOC.2001.950423
   Menasce DA, 2002, IEEE INTERNET COMPUT, V6, P72, DOI 10.1109/MIC.2002.1067740
   Rinderle S, 2005, LECT NOTES COMPUT SC, V3806, P443
   Rouached M, 2005, LECT NOTES COMPUT SC, V3649, P410
   Sahai A, 2002, P 13 IFIP IEEE INT W, P28
   STREITBERGER W, 2005, P IEEE CEC MUN, P370
NR 21
TC 5
Z9 5
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-540-74973-8
J9 LECT NOTES COMPUT SC
PY 2007
VL 4749
BP 429
EP 434
PG 6
WC Computer Science, Information Systems; Computer Science, Theory &
   Methods
SC Computer Science
GA BGU25
UT WOS:000250572800039
ER

PT S
AU Etxeberria, L
   Sagardui, G
AF Etxeberria, L
   Sagardui, G
BE Obbink, H
   Pohl, K
TI Product-line architecture: New issues for evaluation
SO SOFTWARE PRODUCT LINES, PROCEEDINGS
SE LECTURE NOTES IN COMPUTER SCIENCE
LA English
DT Article; Proceedings Paper
CT 9th International Software Product Lines Conference (SPLC 2005)
CY SEP 26-29, 2005
CL Rennes, FRANCE
ID FAMILY; VARIABILITY; CONTEXT
AB In the product-line context, where a lack or mismatch in a quality attribute is potentially replicated among all products, product-line evaluation could detect problems before concrete products are developed. The life span of a software product-line architecture is much longer than the one of an ordinary software product and it serves as a basis for a set of related systems. Therefore, the product-line architecture should be adaptable to evolution as well as support a number of different products, All these characteristics set new requirements to the product-line architecture evaluation. This paper highlights the new issues that can arise when evaluating a product-line architecture versus evaluating a single-system architecture, including classifications of relevant attributes in product-line architecture evaluation, new evaluation moments and techniques. These issues are used as components of a framework to survey product-line architecture evaluation methods and metrics.
C1 Univ Mondragon, Dept Comp Sci, Arrasate Mondragon 20500, Spain.
RP Etxeberria, L (reprint author), Univ Mondragon, Dept Comp Sci, Loramendi 4, Arrasate Mondragon 20500, Spain.
EM letxeberria@eps.mondragon.edu; gsagardui@eps.mondragon.edu
CR Abowd G., 1997, CMUSEI96TR025
   ALONSO A, 1998, LNCS, V142, P161
   America P, 2004, LECT NOTES COMPUT SC, V3154, P284
   Auerswald M, 2002, LECT NOTES COMPUT SC, V2290, P83
   Bass L, 2004, LECT NOTES COMPUT SC, V3014, P454
   Bass L., 1998, SOFTWARE ARCHITECTUR
   BAYER J, 2000, LECT NOTES COMPUTER, V1951, P210
   Bosch J, 2000, DESIGN USE SOFTWARE
   Clements P., 2001, EVALUATING SOFTWARE
   Clements P, 2002, SOFTWARE PRODUCT LIN
   Deelstra S, 2004, LECT NOTES COMPUT SC, V3154, P165
   DEELSTRA S, 2004, 2 GRON WORKSH SOFTW
   de Lange F, 2004, LECT NOTES COMPUT SC, V3014, P445
   DOBRICA L, 2000, STRATEGY ANAL PRODUC
   Dolan T.J., 2002, THESIS EINDHOVEN U T
   Ferber S, 2002, LECT NOTES COMPUT SC, V2290, P364
   GALLAGHER BP, 2000, USING ARCHITECTURE T
   Gannod G. C., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, DOI 10.1109/ICSE.2000.870447
   Graaf B, 2005, NINTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P354, DOI 10.1109/CSMR.2005.28
   IONITA MT, 2005, P HAW INT C SYST SCI
   KORHONEN M, 2003, P INT C SOFTW ENG RE, V1, P135
   Maccari A., 2002, Proceedings of the 24th International Conference on Software Engineering. ICSE 2002, DOI 10.1109/ICSE.2002.1008003
   Matinlassi M., 2002, QUALITY DRIVEN ARCHI
   Niemela E, 2004, LECT NOTES COMPUT SC, V3154, P130
   Pinzger M, 2004, LECT NOTES COMPUT SC, V3014, P332
   Rahman Abdul Malek Abdul, 2004, THESIS
   Riva C, 2003, SIXTH INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION, PROCEEDINGS, P161, DOI 10.1109/IWPSE.2003.1231223
   STOERMER C, 2003, CMUSEI2003TR006
   Stoermer C, 2001, WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P35
   SVAHNBERG M, 2003, INT J SOFTWARE ENG K, V13
   Thiel S., 2002, LNCS, V2379, P130
   Thiel S, 2002, LECT NOTES COMPUT SC, V2290, P125
   VANDERHOEK A, 2001, UCSCSE2001507
   van der Linden F, 2004, LECT NOTES COMPUT SC, V3154, P110
   Wijnstra JG, 2004, LECT NOTES COMPUT SC, V3014, P111
   ZHANG H, 2005, IN PRESS IJSEKE
   Zhang HY, 2003, LECT NOTES COMPUT SC, V2681, P681
NR 37
TC 5
Z9 5
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 3-540-28936-4
J9 LECT NOTES COMPUT SC
PY 2005
VL 3714
BP 174
EP 185
PG 12
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BDG27
UT WOS:000233358200019
ER

PT J
AU Bodden, E
   Toledo, T
   Ribeiro, M
   Brabrand, C
   Borba, P
   Mezini, M
AF Bodden, Eric
   Toledo, Tarsis
   Ribeiro, Marcio
   Brabrand, Claus
   Borba, Paulo
   Mezini, Mira
TI SPLLIFT - Statically Analyzing Software Product Lines in Minutes Instead
   of Years
SO ACM SIGPLAN NOTICES
LA English
DT Article; Proceedings Paper
CT 34th ACM SIGPLAN Conference on Programming Language Design and
   Implementation (PLDI)
CY JUN 16-19, 2013
CL Seattle, WA
SP ACM SIGPLAN
DE Software product lines; inter-procedural static analysis; context
   sensitive; flow sensitive; Design; Languages; Performance
ID DATA-FLOW ANALYSIS; CONSTANT PROPAGATION; SHAPE-ANALYSIS
AB A software product line (SPL) encodes a potentially large variety of software products as variants of some common code base. Up until now, re-using traditional static analyses for SPLs was virtually intractable, as it required programmers to generate and analyze all products individually. In this work, however, we show how an important class of existing inter-procedural static analyses can be transparently lifted to SPLs. Without requiring programmers to change a single line of code, our approach SPLLIFT automatically converts any analysis formulated for traditional programs within the popular IFDS framework for inter-procedural, finite, distributive, subset problems to an SPL-aware analysis formulated in the IDE framework, a well-known extension to IFDS. Using a full implementation based on Heros, Soot, CIDE and JavaBDD, we show that with SPLLIFT one can reuse IFDS-based analyses without changing a single line of code. Through experiments using three static analyses applied to four Java-based product lines, we were able to show that our approach produces correct results and outperforms the traditional approach by several orders of magnitude.
C1 [Bodden, Eric; Mezini, Mira] Tech Univ Darmstadt, EC SPRIDE, Darmstadt, Germany.
   [Brabrand, Claus] IT Univ Copenhagen, Copenhagen, Denmark.
   [Toledo, Tarsis; Ribeiro, Marcio; Borba, Paulo] Univ Fed Pernambuco, Recife, PE, Brazil.
   [Ribeiro, Marcio] Univ Fed Alagoas, Maceio, Brazil.
RP Bodden, E (reprint author), Tech Univ Darmstadt, EC SPRIDE, Darmstadt, Germany.
EM bodden@acm.org; twt@cin.ufpe.br; marcio@ic.ufal.br; brabrand@itu.dk;
   phmb@cin.ufpe.br; mira.mezini@cased.de
RI Borba, Paulo/
OI Borba, Paulo/0000-0002-0381-2843
CR Ammons G, 2004, ACM SIGPLAN NOTICES, V39, P568, DOI 10.1145/989393.989451
   Apel S, 2010, AUTOMAT SOFTW ENG, V17, P251, DOI 10.1007/s10515-010-0066-8
   Apel S., 2011, ASE 11, P372
   Ball T, 2001, ACM SIGPLAN NOTICES, P97
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Bodden E., 2012, SOAP 2012 JUL, P3
   Bodden E, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P241, DOI 10.1145/1985793.1985827
   Bodden E., 2010, ICSE 2010, P5
   Bodden E., 2012, PLAS 2012 JUN
   Brabrand C., 2012, AOSD 12, P13, DOI DOI 10.1145/2162049.2162052
   Classen A., 2010, ICSE 10, P335
   Classen A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P321, DOI 10.1145/1985793.1985838
   Drechsler R., 1998, BINARY DECISION DIAG
   Fink S.J., 2008, ACM T SOFTW ENG METH, V17
   Guarnieri S., 2011, ISSTA, P177
   Hwan C., 2011, P 10 INT C ASP OR SO, P57
   Kastner Christian, 2008, 2008 ACM/IEEE 30th International Conference on Software Engineering. ICSE'08, DOI 10.1145/1368088.1368131
   KASTNER C, 2011, OOPSLA 11, V46, P805, DOI DOI 10.1145/2076021.2048128
   Kastner C., 2010, THESIS U MAGDEBURG
   Kastner C., 2009, J OBJECT TECHNOLOGY, V8, P59
   Kastner C., 2008, ASE, P258
   Kim CHP, 2010, LECT NOTES COMPUT SC, V6418, P285, DOI 10.1007/978-3-642-16612-9_22
   Liebig J., 2011, AOSD 11, P191, DOI DOI 10.1145/1960275.1960299
   Moon S., 1998, INT C SUP, P204
   Naeem NA, 2009, ISMM'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P79
   Naeem NA, 2008, ACM SIGPLAN NOTICES, V43, P347, DOI 10.1145/1449955.1449792
   Post H., 2008, ASE 08, P347
   Reps T., 2003, LECT NOTES COMPUTER, V2694, P1075
   Reps T.W., 1995, P ACM S PRINC PROGR, P49, DOI 10.1145/199448.199462
   Ribeiro M., 2010, SPLASH 10, P11
   Rinetzky N, 2005, LECT NOTES COMPUT SC, V3672, P284
   Sagiv M, 1996, THEOR COMPUT SCI, V167, P131, DOI 10.1016/0304-3975(96)00072-2
   Shi JF, 2012, LECT NOTES COMPUT SC, V7212, P270
   Shoham S, 2008, IEEE T SOFTWARE ENG, V34, P651, DOI 10.1109/TSE.2008.63
   Stricker V, 2010, LECT NOTES COMPUT SC, V6287, P226, DOI 10.1007/978-3-642-15579-6_16
   Sundaresan V, 2000, ACM SIGPLAN NOTICES, V35, P264, DOI 10.1145/354222.353189
   Thum T., 2012, FIN0042012 Y MAGD SC
   Vallee-Rai R., 1999, P CASCON 1999, P125
   WEGMAN MN, 1991, ACM T PROGR LANG SYS, V13, P181, DOI 10.1145/103135.103136
   Yang H, 2008, LECT NOTES COMPUT SC, V5123, P385
NR 40
TC 5
Z9 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0362-1340
J9 ACM SIGPLAN NOTICES
JI ACM Sigplan Not.
PD JUN
PY 2013
VL 48
IS 6
SI SI
BP 355
EP 364
PG 10
WC Computer Science, Software Engineering
SC Computer Science
GA 184CX
UT WOS:000321865400034
ER

PT S
AU Karatas, AS
   Oguztuzun, H
   Dogru, A
AF Karatas, Ahmet Serkan
   Oguztuzun, Halit
   Dogru, Ali
BE Cohen, D
TI Global Constraints on Feature Models
SO PRINCIPLES AND PRACTICE OF CONSTRAINT PROGRAMMING-CP 2010
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 16th Annual International Conference on the Principles and Practice of
   Constraint Programming
CY SEP 06-10, 2010
CL St Andrews, SCOTLAND
SP 4C, Cork Constraint Computat Ctr, Assoc Constraint Programming, Google, EMEA Univ Programs, IBM Res, Cornell Univ, Inst Computat Sustainabil, Natl Informat & Communicat Technol, Ecole Polytechn, Optimisat Sustainable Dev, Swedish Inst Comp Sci
AB Feature modeling has been found very effective for modeling and managing variability in Software Product Lines. The nature of feature models invites, sometimes even requires, the use of global constraints. This paper lays the groundwork for the inclusion of global constraints in automated reasoning on feature models. We present a mapping from extended feature models to constraint logic programming over finite domains, and show that this mapping enables using global constraints on feature attributes, as well as features, for a variety of analysis operations on feature models. We also present performance test results and discuss the benefits of using global constraints.
C1 [Karatas, Ahmet Serkan; Oguztuzun, Halit; Dogru, Ali] Middle E Tech Univ, Dept Comp Engn, TR-06531 Ankara, Turkey.
RP Karatas, AS (reprint author), Middle E Tech Univ, Dept Comp Engn, TR-06531 Ankara, Turkey.
EM karatas@ceng.metu.edu.tr; oguztuzn@ceng.metu.edu.tr;
   dogru@ceng.metu.edu.tr
CR Benavides D., 2007, P 1 INT WORKSH VAR M, P129
   Benavides D, 2010, INFORM SYST, V35, P615, DOI 10.1016/j.is.2010.01.001
   Benavides D., 2004, P 2 GRON WORKSH SOFT
   Benavides D, 2005, LECT NOTES COMPUT SC, V3520, P491
   BENAVIDES D, 2005, 17 INT C SOFTW ENG K, P677
   Carlsson M., 1997, P PROGR LANG IMPL LO
   Czarnecki K, 2002, LECT NOTES COMPUT SC, V2487, P156
   Fernandez A. J., 2000, Constraints, V5, DOI 10.1023/A:1009816801567
   Kang K., 1990, CMUSEI90TR21
   Kang KC, 1998, ANN SOFTW ENG, V5, P143, DOI 10.1023/A:1018980625587
   KARATAS AS, 2010, 14 INT SOFTW PROD LI
   Schobbens PY, 2007, COMPUT NETW, V51, P456, DOI 10.1016/j.comnet.2006.08.008
   Simos M., 1996, STARSVCA02500100 LOC
   van Hoeve WJ, 2006, FOUND ARTIF INTELL, P169
NR 14
TC 5
Z9 5
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-642-15395-2
J9 LECT NOTES COMPUT SC
PY 2010
VL 6308
BP 537
EP 551
PG 15
WC Computer Science, Theory & Methods
SC Computer Science
GA BTC72
UT WOS:000286485800043
ER

PT S
AU Savolainen, J
   Oliver, I
   Mannion, M
   Zuo, HL
AF Savolainen, J
   Oliver, I
   Mannion, M
   Zuo, HL
GP IEEE Comp Soc
TI Transitioning from product line requirements to product line
   architecture
SO Proceedings of the 29th Annual International Computer Software and
   Applications Conference
SE PROCEEDINGS - INTERNATIONAL COMPUTER SOFTWARE & APPLICATIONS CONFERENCE
LA English
DT Proceedings Paper
CT 29th Annual International Computer Software and Applications Conference
CY JUL 26-28, 2005
CL Edinburgh, SCOTLAND
SP IEEE Comp Soc
AB Software product line development is a compromise between customer requirements, existing product line architectural constraints and commercial needs. Managing variability is the key to a successful product line development. Product line models of requirements and features can be constructed that contain variation points. New products can be driven by making requirement selections from a product line model of requirements but as the product line evolves selections are constrained by the design of the existing product line architecture and the cost of making these changes. We present a set of rules that map the selection constraint values of requirements to the selection constraint values of features which in turn map on to the selection constraint values of architectural assets. We illustrate the application of the rules using a worked example.
CR BUSH D, P 11 IEEE INT C REQ, P23
   Clements P, 2001, SOFTWARE PRODUCT LIN
   Czarnecki K., 2000, GENERATIVE PROGRAMMI
   Ferber S., 2002, LNCS, V2379, P235
   Griss M. L., 1998, Proceedings. Fifth International Conference on Software Reuse (Cat. No.98TB100203), DOI 10.1109/ICSR.1998.685732
   GRISS ML, 2000, P 1 INT SOFTW PROD L
   HALL JG, 2002, P 10 INT C REQ ENG R
   HAYES JH, P 11 IEEE INT C REQ, P138
   IEEE, 1990, 610121990 IEEE
   IEEE, 2000, 14712000 IEEE
   JACKSON M., 2001, PROBLEM FRAMES ANAL
   Kang K., 1990, CMUSEI90TR21
   Kang KC, 2002, IEEE SOFTWARE, V19, P58, DOI 10.1109/MS.2002.1020288
   Kuusela J., 2000, INT C SOFTW ENG LIM, P61
   Lai C. T. R., 1999, SOFTWARE PRODUCT LIN
   LEE K, 2000, SOFTWARE PRACTICE EX, P1025
   LORENTSEN L, 2001, P 7 S PROGR LANG SOF, P221
   Mannion M., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), DOI 10.1109/ICSE.1999.841035
   MANNION M, 2003, P 5 WORKSH PROD FAM
   SAVALAINEN J, 2001, P 5 IEEE INT S REQ E
   SAVOLAINEN J, 2002, P 7 AUSTR WORKSH REQ, P19
   Thiel S., 2002, Software Product Lines. Second International Conference, SPLC 2. Proceedings (Lecture Notes in Computer Science Vol. 2370)
NR 22
TC 5
Z9 5
PU IEEE COMPUTER SOC
PI LOS ALAMITOS
PA 10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA
SN 0730-3157
BN 0-7695-2413-3
J9 P INT COMP SOFTW APP
PY 2005
BP 186
EP 195
PG 10
WC Computer Science, Software Engineering
SC Computer Science
GA BCW71
UT WOS:000231586500031
ER

PT S
AU Stricker, V
   Metzger, A
   Pohl, K
AF Stricker, Vanessa
   Metzger, Andreas
   Pohl, Klaus
BE Bosch, J
   Lee, JJ
TI Avoiding Redundant Testing in Application Engineering
SO SOFTWARE PRODUCT LINES: GOING BEYOND
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 14th International Software Product Lines Conference
CY SEP 13-17, 2010
CL Jeju Island, SOUTH KOREA
SP Korean Inst Informat Sci & Engn, CoSDEC, Hitachi, Carnegie Mellon, Software Engn Inst, BigLever Software Inc, IBM, Fraunhofer
DE Software product line testing; application engineering; data flow;
   regression testing
ID PRODUCT LINES
AB Many software product line testing techniques have been presented in the literature. The majority of those techniques address how to define reusable test assets (such as test models or test scenarios) in domain engineering and how to exploit those assets during application engineering. In addition to test case reuse however, the execution of test cases constitutes one important activity during application testing. Without a systematic support for the test execution in application engineering, while considering the specifics of product lines, product line artifacts might be tested redundantly. Redundant testing in application engineering, however, can lead to an increased testing effort without increasing the chance of uncovering failures. In this paper, we propose the model-based ScenTED-DF technique to avoid redundant testing in application engineering. Our technique builds on data flow-based testing techniques for single systems and adapts and extends those techniques to consider product line variability. The paper sketches the prototypical implementation of our technique to show its general feasibility and automation potential, and it describes the results of experiments using an academic product line to demonstrate that ScenTED-DF is capable of avoiding redundant tests in application engineering.
C1 [Stricker, Vanessa; Metzger, Andreas; Pohl, Klaus] Univ Duisburg Essen, Paluno Ruhr Inst Software Technol, D-45127 Essen, Germany.
RP Stricker, V (reprint author), Univ Duisburg Essen, Paluno Ruhr Inst Software Technol, D-45127 Essen, Germany.
EM Vanessa.Stricker@sse.uni-due.de; Andreas.Metzger@sse.uni-due.de;
   Klaus.Pohl@sse.uni-due.de
CR Bertolino Antonia, 2003, P 9 EUR SOFTW ENG C, P355
   Geppert B, 2004, LECT NOTES COMPUT SC, V3107, P35
   LAMANCHA BM, 2009, P 4 INT C SOFTW DAT, V1, P23
   LI JJ, 2007, SPLIT WORKSH P 11 IN, P65
   LI Y, 1999, ACM SIGSOFT SOFTWARE, V24, P69
   McGregor J. D., 2001, CMUSEI2001TR022
   METZGER A, 2006, 10 INT SOFTW PROD LI
   Metzger A, 2007, INT REQUIR ENG CONF, P243, DOI 10.1109/RE.2007.61
   Nebut C, 2004, LECT NOTES COMPUT SC, V3014, P198
   Pohl K, 2006, COMMUN ACM, V49, P78, DOI 10.1145/1183236.1183271
   Pohl K., 2005, SOFTWARE PRODUCT LIN
   Rapps S., 1982, P 6 INT C SOFTW ENG, P272
   TEVANLINNA A, 2004, ACM SIGSOFT SOFTWARE, V29, P2
   von der Massen T, 2005, LECT NOTES COMPUT SC, V3714, P82
NR 14
TC 5
Z9 5
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-642-15578-9
J9 LECT NOTES COMPUT SC
PY 2010
VL 6287
BP 226
EP 240
PG 15
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BTD71
UT WOS:000286579500016
ER

PT J
AU Kastner, C
   Ostermann, K
   Erdweg, S
AF Kaestner, Christian
   Ostermann, Klaus
   Erdweg, Sebastian
TI A Variability-Aware Module System
SO ACM SIGPLAN NOTICES
LA English
DT Article
DE Design; Languages; variability; module system; composition; linker; C;
   preprocessor; #ifdef; conditional compilation; Busybox; software product
   lines
AB Module systems enable a divide and conquer strategy to software development. To implement compile-time variability in software product lines, modules can be composed in different combinations. However, this way, variability dictates a dominant decomposition. As an alternative, we introduce a variability-aware module system that supports compile-time variability inside a module and its interface. So, each module can be considered a product line that can be type checked in isolation. Variability can crosscut multiple modules. The module system breaks with the antimodular tradition of a global variability model in product-line development and provides a path toward software ecosystems and product lines of product lines developed in an open fashion. We discuss the design and implementation of such a module system on a core calculus and provide an implementation for C as part of the TypeChef project. Our implementation supports variability inside modules from #ifdef preprocessor directives and variable linking at the composition level. With our implementation, we type check all configurations of all modules of the open source product line Busybox with 811 compile-time options, perform linker check of all configurations, and report found type and linker errors - without resorting to a brute-force strategy.
C1 [Kaestner, Christian; Ostermann, Klaus; Erdweg, Sebastian] Univ Marburg, D-35032 Marburg, Germany.
RP Kastner, C (reprint author), Univ Marburg, D-35032 Marburg, Germany.
FU ERC [203099]
FX The work was inspired by Karl Klose's work on modular metaprogramming.
   We thank Tillmann Rendel, Sven Apel, Yannis Smarakdakis, Don Batory,
   Chungchieh Shan, Martin Erwig, and Paolo G. Giarrusso for their valuable
   discussions on early presentations of this work. This work is supported
   by ERC grant #203099.
CR Acher M, 2010, LECT NOTES COMPUT SC, V6138, P3, DOI 10.1007/978-3-642-13595-8_3
   Anastasopoulos M., 2001, P 2001 S SOFTW REUS, P109
   Apel S, 2010, SCI COMPUT PROGRAM, V75, P1022, DOI 10.1016/j.scico.2010.02.001
   Apel S, 2010, AUTOMAT SOFTW ENG, V17, P251, DOI 10.1007/s10515-010-0066-8
   Apel S., 2008, P ICSE WORKSH SYST D, P53, DOI 10.1145/1370916.1370930
   Aversano L., 2002, Proceedings Second IEEE International Workshop on Source Code Analysis and Manipulation, DOI 10.1109/SCAM.2002.1134108
   Bass L., 1998, SOFTWARE ARCHITECTUR
   Batory D, 2004, IEEE T SOFTWARE ENG, V30, P355, DOI 10.1109/TSE.2004.23
   Benavides D, 2010, INFORM SYST, V35, P615, DOI 10.1016/j.is.2010.01.001
   Bergel A, 2005, ACM SIGPLAN NOTICES, V40, P177, DOI 10.1145/1103845.1094826
   Berger T., 2010, P IEEE ACM INT C AUT, P73, DOI 10.1145/1858996.1859010
   Beuche D, 2004, SCI COMPUT PROGRAM, V53, P333, DOI 10.1016/j.scico.2003.04.005
   Blume M, 1999, ACM T PROGR LANG SYS, V21, P813, DOI 10.1145/325478.325518
   Brabrand C., 2012, P INT C ASP IN PRESS
   Cardelli L., 1997, POPL 97 24 ACM SIGPL, P266, DOI 10.1145/263699.263735
   Chae W, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P307, DOI 10.1109/SPLC.2008.28
   Chen S., 2012, EXTENDING T IN PRESS
   Classen A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P321, DOI 10.1145/1985793.1985838
   Czarnecki K., 2000, GENERATIVE PROGRAMMI
   Czarnecki K., 2006, P INT C GEN PROGR CO, P211, DOI 10.1145/1173706.1173738
   de Jonge M., 2002, LNCS, V2319, P261
   Delaware B, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P243, DOI 10.1145/1595696.1595733
   Emir B, 2006, LECT NOTES COMPUT SC, V4067, P279
   Ernst E, 2006, ACM SIGPLAN NOTICES, V41, P270, DOI 10.1145/1111320.1111062
   Ernst M., 1998, P ECOOP 98 EUR C OBJ, P186
   Erwig M., 2011, ACM T SOFTW ENG METH, V21
   Erwig M., 2012, GENERATIVE TRANSFORM
   Gasiunas V, 2007, ACM SIGPLAN NOTICES, V42, P133, DOI 10.1145/1297105.1297038
   Griss ML, 2000, KLUWER INT SER ENG C, V576, P271
   Huang S. S., 2007, P INT C ASP OR SOFTW, P185, DOI 10.1145/1218563.1218584
   Huang SS, 2008, ACM SIGPLAN NOTICES, V43, P79, DOI 10.1145/1379022.1375592
   Kastner C, 2011, ACM SIGPLAN NOTICES, V46, P805, DOI 10.1145/2076021.2048128
   Kastner C., 2011, P SPLC WORKSH FEAT O
   Kastner C., 2012, ACM T SOFTW ENG METH, V21, P141
   Kienzle J, 2002, LECT NOTES COMPUT SC, V2374, P37
   Klose K, 2010, ACM SIGPLAN NOTICES, V45, P484, DOI 10.1145/1932682.1869499
   Li H. C., 2002, Proceedings ASE 2002. 17th IEEE International Conference on Automated Software Engineering, DOI 10.1109/ASE.2002.1115013
   Liebig J., 2010, P INT C SOFTW ENG IC, P105
   Liskov B., 1981, LNCS, V114
   Liu J., 2006, P INT C SOFTW ENG IC, P112, DOI 10.1145/1134285.1134303
   Mendonca M., 2009, P INT SOFTW PROD LIN, P231
   Millstein T, 2003, ACM SIGPLAN NOTICES, V38, P224, DOI 10.1145/949343.949325
   Millstein T., 2009, ACM T PROGR LANG SYS, V31, P71
   Myers A. C., 1997, P 24 ACM S PRINC PRO, P132
   PEREZ J, 2009, 2009 JOINT WORK IEEE, P221
   Prehofer C, 1997, LECT NOTES COMPUT SC, V1241, P419
   PRIETODIAZ R, 1986, J SYST SOFTWARE, V6, P307, DOI 10.1016/0164-1212(86)90002-6
   Reisner E., 2010, P INT C SOFTW ENG IC, P445
   Rrueger C. W., 2006, P 10 INT SOFTW PROD, P95
   Schaefer I., 2011, P INT C ASP OR SOFTW, P43, DOI DOI 10.1145/1960275.1960283
   Siegmund N., 2010, P 4 INT WORKSH VAR M, P123
   SPENCER H, 1992, PROCEEDINGS OF THE SUMMER 1992 USENIX CONFERENCE, P185
   Tarr P., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), DOI 10.1109/ICSE.1999.841000
   Tartler R, 2011, EUROSYS 11: PROCEEDINGS OF THE EUROSYS 2011 CONFERENCE, P47
   Thaker S., 2007, P INT C GEN PROGR CO, P95, DOI DOI 10.1145/1289971.1289989
   Thum T., 2012, FIN0042012 U MAGD SC
   van Ommering R., 2002, Proceedings of the 24th International Conference on Software Engineering. ICSE 2002, DOI 10.1109/ICSE.2002.1007973
   van der Storm T, 2004, LECT NOTES COMPUT SC, V3107, P157
   Walker D., 2005, ADV TOPICS TYPES PRO, P3
NR 59
TC 4
Z9 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0362-1340
J9 ACM SIGPLAN NOTICES
JI ACM Sigplan Not.
PD OCT
PY 2012
VL 47
IS 10
BP 773
EP 791
DI 10.1145/2398857.2384673
PG 19
WC Computer Science, Software Engineering
SC Computer Science
GA 040CE
UT WOS:000311296200045
ER

PT J
AU Ahmed, F
   Capretz, LF
AF Ahmed, Faheem
   Capretz, Luiz Fernando
TI A business maturity model of software product line engineering
SO INFORMATION SYSTEMS FRONTIERS
LA English
DT Article
DE Software product line; Software process assessment; Maturity evaluation;
   Business process; Organizational management; Software process model
ID MARKET ORIENTATION; MANAGEMENT
AB In the recent past, software product line engineering has become one of the most promising practices in software industry with the potential to substantially increase the software development productivity. Software product line engineering approach spans the dimensions of business, architecture, software engineering process and organization. The increasing popularity of software product line engineering in the software industry necessitates a process maturity evaluation methodology. Accordingly, this paper presents a business maturity model of software product line, which is a methodology to evaluate the current maturity of the business dimension of a software product line in an organization. This model examines the coordination between product line engineering and the business aspects of software product line. It evaluates the maturity of the business dimension of software product line as a function of how a set of business practices are aligned with product line engineering in an organization. Using the model presented in this paper, we conducted two case studies and reported the assessment results. This research contributes towards establishing a comprehensive and unified strategy for a process maturity evaluation of software product lines.
C1 [Ahmed, Faheem] United Arab Emirates Univ, Coll Informat Technol, Al Ain, U Arab Emirates.
   [Capretz, Luiz Fernando] Univ Western Ontario, Dept Elect & Comp Engn, London, ON N6A 5B9, Canada.
RP Ahmed, F (reprint author), United Arab Emirates Univ, Coll Informat Technol, POB 17551, Al Ain, U Arab Emirates.
EM f.ahmed@uaeu.ac.ae; lcapretz@uwo.ca
RI Capretz, Luiz/K-5944-2013
OI Capretz, Luiz/0000-0001-6966-2369
CR Aguilar-Saven RS, 2004, INT J PROD ECON, V90, P129, DOI 10.1016/S0925-5273(03)00102-6
   Ahmed F, 2007, INFORM SOFTWARE TECH, V49, P194, DOI 10.1016/j.infsof.2006.05.004
   ANSOFF H, 1967, HARVARD BUS REV, V43, P71
   Bayer J, 1999, P 5 ACM SIGSOFT S SO, P122, DOI 10.1145/303008.303063
   BERGSTROM A, 2000, STRATEGY LEADERSHIP, V28, P10, DOI 10.1108/10878570010378645
   BIRK GH, 2003, IEEE SOFTWARE, V20, P52
   BOCKLE G, 2005, P 9 INT C SOFTW PROD, P124
   CAMPBELL DT, 1959, PSYCHOL BULL, V56, P81, DOI 10.1037/h0046016
   CATTELL RB, 1966, MULTIVAR BEHAV RES, V1, P245, DOI 10.1207/s15327906mbr0102_10
   Chen JCH, 2002, IND MANAGE DATA SYST, V102, P80, DOI 10.1108/02635570210419627
   Clements P, 2002, SOFTWARE PRODUCT LIN
   Clements PC, 2005, IEEE SOFTWARE, V22, P54, DOI 10.1109/MS.2005.133
   CLEMENTS PC, 2001, P 4 INT WORKSH SOFTW, P69
   Comrey AL, 1992, 1 COURSE FACTOR ANAL, V2nd
   CRONBACH LJ, 1951, PSYCHOMETRIKA, V16, P297
   CROSBY LA, 1990, J MARKETING, V54, P68, DOI 10.2307/1251817
   Davenport T. H., 1993, PROCESS INNOVATION
   DECASTRO J, 1995, J BUS RES, V33, P165, DOI 10.1016/0148-2963(94)00066-N
   Ebert C, 2003, PROC INT CONF SOFTW, P520, DOI 10.1109/ICSE.2003.1201231
   Ferry D. L., 1980, MEASURING ASSESSING
   FRITSCH C, 2004, P 3 INT C SOFTW PROD, P228
   Harrison EF, 1995, MANAGEMENT DECISIONS, V33, P48, DOI 10.1108/00251749510081728
   Jones LG, 2002, CMUSEI2002TN012
   KAISER HF, 1960, EDUC PSYCHOL MEAS, V20, P141, DOI 10.1177/001316446002000116
   KAISER HF, 1970, PSYCHOMETRIKA, V35, P401, DOI 10.1007/BF02291817
   KANG K. C., 2002, P 2 INT C SOFTW PROD, P366
   Knauber P, 2000, IEEE SOFTWARE, V17, P88, DOI 10.1109/52.877873
   KOHLI AK, 1990, J MARKETING, V54, P1, DOI 10.2307/1251866
   Kuvaja P, 1994, SOFTWARE PROCESS ASS
   Lai C. T. R., 1999, SOFTWARE PRODUCT LIN
   van der Linden F, 2002, IEEE SOFTWARE, V19, P41, DOI 10.1109/MS.2002.1020286
   Martensen A., 1999, INT J QUALITY RELIAB, V16, P734, DOI DOI 10.1108/02656719910283344
   NARVER JC, 1990, J MARKETING, V54, P20, DOI 10.2307/1251757
   NIEMELA E, 2005, P 9 INT C SOFTW PROD, P186
   Nunnally J, 1994, PSYCHOMETRIC THEORY
   Osterhof A., 2001, CLASSROOM APPL ED ME
   PAULK MC, 1993, IEEE SOFTWARE, V10, P18, DOI 10.1109/52.219617
   ROBINSON WT, 1992, STRATEGIC MANAGE J, V13, P609, DOI 10.1002/smj.4250130804
   Schmid K, 2002, IEEE SOFTWARE, V19, P50, DOI 10.1109/MS.2002.1020287
   Stevens J., 1986, APPL MULTIVARIATE ST
   SUTTON B, 1993, LIBR INFORM SCI RES, V15, P299
   TOFT P, 2000, P 1 SOFTW PROD LIN C, P111
   van der Linden F., 2004, P 3 INT C SOFTW PROD, P110
   Verlage M, 2005, PROC INT CONF SOFTW, P534
   Wang Y., 2000, SOFTWARE ENG PROCESS
   WAPPLER T, 2000, P 1 SOFTW PROD LIN C, P73
   Wijnstra J. G., 2002, P 2 INT C SOFTW PROD, P68
   Wilson D., 1995, J ACAD MARKET SCI, V23, P335, DOI DOI 10.1177/009207039502300414
NR 48
TC 4
Z9 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 1387-3326
J9 INFORM SYST FRONT
JI Inf. Syst. Front.
PD SEP
PY 2011
VL 13
IS 4
BP 543
EP 560
DI 10.1007/s10796-010-9230-8
PG 18
WC Computer Science, Information Systems; Computer Science, Theory &
   Methods
SC Computer Science
GA 850NP
UT WOS:000297202100007
ER

PT S
AU Gil, Y
   Kremer-Davidson, S
   Maman, I
AF Gil, Yossi
   Kremer-Davidson, Shiri
   Maman, Itay
BE Bosch, J
   Lee, JJ
TI Sans Constraints? Feature Diagrams vs. Feature Models
SO SOFTWARE PRODUCT LINES: GOING BEYOND
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 14th International Software Product Lines Conference
CY SEP 13-17, 2010
CL Jeju Island, SOUTH KOREA
SP Korean Inst Informat Sci & Engn, CoSDEC, Hitachi, Carnegie Mellon, Software Engn Inst, BigLever Software Inc, IBM, Fraunhofer
ID FORMULAS
AB In this paper we study constraints inter-dependencies between basic features in a feature model which are not captured by diagrams. We offer a method for the removal of these constraints and explain why their removal require an (inevitable) exponential increase to the tree size. We show that the elimination of constraints makes it possible to provide an efficient solution for the feature editing problem, recently raised by Thum, Batory and Kastner. We tie feature models with computer science fields which may appear very foreign to our domain, including circuit complexity, graph algorithms and algebraic complexity. The objective of this tie is double folded: drawing the attention of the foreign community to the problems we address in our field, and to suggest the use of current results in these fields for better understanding of the mathematics behind the modeling of software product lines.
C1 [Gil, Yossi; Kremer-Davidson, Shiri; Maman, Itay] IBM Res Haifa, Haifa, Israel.
RP Gil, Y (reprint author), IBM Res Haifa, Haifa, Israel.
CR ALON N, 1987, COMBINATORICA
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   CZARNECKI K, 2005, SOFTWARE PROCESS IMP
   CZARNECKI K, 2007, SPLC 2007
   GILBERT EN, 1954, J MATH PHYS
   GOLUMBIC MC, 2008, DISCRETE APPL MATH
   HEYMANS P, 2008, IET SOFTWARE
   Kaltofen E., 1989, RANDOMNESS COMPUTATI, P375
   Kang K., 1990, CMUSEI90TR21
   KARCHMER M, 1990, SIAM J DISCRETE MATH
   KARCHMER M, 1993, J DISCRETE MATH
   MCGEER PC, 1989, DAC 1989
   Meinel C., 1998, ALGORITHMS DATA STRU
   Mendonca M., 2009, SPLC 2009
   NEWMAN I, 1995, SIAM J DISCRETE MATH
   SCHOBBENS PY, 2007, COMPUTER NETWORKS
   Shpilka A, 2009, LECT NOTES COMPUT SC, V5687, P700, DOI 10.1007/978-3-642-03685-9_52
   THUM T, 2009, ICSE
   TRIGAUX JC, 2008, THESIS U NAMUR NAMUR
   VANDENBROEK P, 2009, VARIABILITY MODELLIN
   VANDENBROEK P, 2008, SPLC 2008
   ZAVE P, 1993, COMPUTER
   Zhang W, 2004, LECT NOTES COMPUT SC, V3308, P115
NR 23
TC 4
Z9 4
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-642-15578-9
J9 LECT NOTES COMPUT SC
PY 2010
VL 6287
BP 271
EP 285
PG 15
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BTD71
UT WOS:000286579500019
ER

PT S
AU Cetina, C
   Giner, P
   Fons, J
   Pelechano, V
AF Cetina, Carlos
   Giner, Pau
   Fons, Joan
   Pelechano, Vicente
BE Bosch, J
   Lee, JJ
TI Designing and Prototyping Dynamic Software Product Lines: Techniques and
   Guidelines
SO SOFTWARE PRODUCT LINES: GOING BEYOND
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 14th International Software Product Lines Conference
CY SEP 13-17, 2010
CL Jeju Island, SOUTH KOREA
SP Korean Inst Informat Sci & Engn, CoSDEC, Hitachi Ltd, Carnegie Mellon, Software Engn Inst, BigLever Software Inc, IBM, Fraunhofer Inst Appl Informat Technol
AB Dynamic Software Product Lines (DSPL) encompass systems that are capable of modifying their own configuration with respect to changes in their operating environment by using run-time reconfigurations. A failure in these reconfigurations can directly impact the user experience since the reconfigurations are performed when the system is already under the users control. Prototyping DSPLs at an early development stage can help to pinpoint potential issues and optimize design. In this work, we identify and addresses two challenges associated with the involvement of human subjects in DSPL prototyping: enabling DSPL users to (I) trigger the run-time reconfigurations and to (2) understand the effects of the reconfigurations. These techniques have been applied with the participation of human subjects by means of a Smart Hotel case study which was deployed with real devices. The application of these techniques reveals DSPL-design issues with recovering from a failed reconfiguration or a reconfiguration triggered by mistake. To address these issues, we discuss some guidelines learned in the Smart Hotel case study.
C1 [Cetina, Carlos; Giner, Pau; Fons, Joan; Pelechano, Vicente] Univ Politecn Valencia, Ctr Invest Metodos Prod Software, E-46022 Valencia, Spain.
RP Cetina, C (reprint author), Univ Politecn Valencia, Ctr Invest Metodos Prod Software, Camino de Vera S-N, E-46022 Valencia, Spain.
EM ccetina@dsic.upv.es; pginer@dsic.upv.es; jjfons@dsic.upv.es;
   pele@dsic.upv.es
CR CETINA C, 2008, 2 INT WORKSH DYN SOF
   CETINA C, 2008, 12 INT SOFTW PROD LI
   Dey AK, 2009, J AMB INTEL SMART EN, V1, P57, DOI 10.3233/AIS-2009-0008
   Etxeberria L, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P243, DOI 10.1109/SPLC.2008.37
   Evesti A., 2009, P 8 INT C MOB UB MUL, P158
   Gibbs WW, 2005, SCI AM, V292, P54
   Gomaa H, 2004, LECT NOTES COMPUT SC, V3014, P435
   Hallsteinsen S, 2008, COMPUTER, V41, P93, DOI 10.1109/MC.2008.123
   HALLSTEINSEN S, 2006, 10 INT SOFTW PROD LI
   IMMONEN A, 2006, SOFTWARE PRODUCT LIN, P373, DOI DOI 10.1007/978-3-540-33253-4_10
   Jarzabek S, 2006, IEE PROC-SOFTW, V153, P61, DOI 10.1049/ip-sen:20050008
   Lee J., 2006, 10 INT SOFTW PROD LI
   Lemlouma T, 2004, 2004 IEEE INTERNATIONAL CONFERENCE ON MOBILE DATA MANAGEMENT, P106
   Liu Y, 2008, LECT NOTES COMPUT SC, V5281, P189
   PARRA C, 2009, 13 INT SOFTW PROD LI, P24
   Sinnema M, 2004, LECT NOTES COMPUT SC, V3154, P197
   Tichy WF, 1998, COMPUTER, V31, P32, DOI 10.1109/2.675631
   Weal MJ, 2007, Fifth Annual IEEE International Conference on Pervasive Computing and Communications, Proceedings, P108, DOI 10.1109/PERCOM.2007.34
   White J., 2007, 11 INT SOFTW PROD LI, P129
   Yacoub SM, 2002, IEEE T SOFTWARE ENG, V28, P529, DOI 10.1109/TSE.2002.1010058
   ZHANG H, 2003, QUALITY PREDICTION A, P1031
NR 21
TC 3
Z9 3
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-642-15578-9
J9 LECT NOTES COMPUT SC
PY 2010
VL 6287
BP 331
EP 345
PG 15
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BTD71
UT WOS:000286579500023
ER

PT S
AU Martinez, J
   Diaz, J
   Perez, J
   Garbajosa, J
AF Martinez, Jabier
   Diaz, Jessica
   Perez, Jennifer
   Garbajosa, Juan
BE Abrahamsson, P
   Marchesi, M
   Maurer, F
TI Software Product Line Engineering Approach for Enhancing Agile
   Methodologies
SO AGILE PROCESSES IN SOFTWARE ENGINEERING AND EXTREME PROGRAMMING
SE Lecture Notes in Business Information Processing
LA English
DT Proceedings Paper
CT 10th International Conference on Agile Processes in Software Engineering
   and Extreme Programming
CY MAY 25-29, 2009
CL Pula, ITALY
AB One of the main principles of Agile methodologies consists in the early and continuous delivery of valuable software by short time-framed iterations. After each iteration, a working product is delivered according to the requirements defined at the beginning of the iteration. Testing tools facilitate the task of checking if the system provides the expected behavior according to the specified requirements. However, since testing tools need to be adapted in order to test new working products in each iteration, a significant effort has to be invested. This work presents a Software Product Line Engineering (SPLE) approach that allows flexibility in the adaption of testing tools with the working products in an iterative way. A case study is also presented using PLUM (Product Line Unified Modeller) as the tool Suite for SPL implementation and management.
C1 [Martinez, Jabier] Fdn European Software Inst ESI Tecnalia, E-48170 Zamudio, Bizkaia, Spain.
RP Martinez, J (reprint author), Fdn European Software Inst ESI Tecnalia, Parque Tecnol 204, E-48170 Zamudio, Bizkaia, Spain.
EM jabier.martinez@esi.es; yesica.diaz@upm.es; jennifer.perez@eui.upm.es;
   jgs@eui.upm.es
RI Diaz, Jessica/J-9751-2012; Garbajosa, Juan/B-5818-2012; PEREZ,
   JENIFER/M-2506-2014
OI Diaz, Jessica/0000-0001-6738-9370; Garbajosa, Juan/0000-0003-0161-3485;
   PEREZ, JENIFER/0000-0003-3192-7995
CR ABRAHAMSSON P, 2002, 112 VTT EL
   ALDAZABAL A, 2007, ECLIPSE SUMMIT EUROP
   Beck K., 2002, TEST DRIVEN DEV EXAM
   Beedle M, 2002, AGILE SOFTWARE DEV S
   Cockburn A., 2006, AGILE SOFTWARE DEV C
   Duvall P., 2007, CONTINUOUS INTEGRATI
   Highsmith J, 2001, COMPUTER, V34, P120, DOI 10.1109/2.947100
   Pohl K., 2005, SOFTWARE PRODUCT LIN
NR 8
TC 3
Z9 3
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 1865-1348
BN 978-3-642-01852-7
J9 LECT NOTES BUS INF
PY 2009
VL 31
BP 247
EP 248
PG 2
WC Computer Science, Software Engineering
SC Computer Science
GA BJR99
UT WOS:000267057500052
ER

PT S
AU Ghanam, Y
   Maurer, F
AF Ghanam, Yaser
   Maurer, Frank
BE Bosch, J
   Lee, JJ
TI Linking Feature Models to Code Artifacts Using Executable Acceptance
   Tests
SO SOFTWARE PRODUCT LINES: GOING BEYOND
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 14th International Software Product Lines Conference
CY SEP 13-17, 2010
CL Jeju Island, SOUTH KOREA
SP Korean Inst Informat Sci & Engn, CoSDEC, Hitachi, Carnegie Mellon, Software Engn Inst, BigLever Software Inc, IBM, Fraunhofer
DE agile product line engineering; feature models; traceability;
   variability evolution; executable acceptance tests
ID TRACEABILITY
AB A feature model is a representation of the requirements in a given system abstracted at the feature level. Linking conceptual requirements in feature models to actual implementation artifacts provides for many advantages such as increased program comprehension, implementation completeness assessment, impact analysis, and reuse opportunities. However, in practice, as systems evolve, traceability links between the model and the code artifacts may become broken or outdated. In this paper, we contribute an approach to provide traceability links in a way that ensures consistency between the feature model and the code artifacts, enables the evolution of variability in the feature model, and supports the product derivation process. We do that by using executable acceptance tests as a direct traceability link between feature models and code artifacts. We evaluate our approach and present a brief overview of the tool support we provide.
C1 [Ghanam, Yaser; Maurer, Frank] Univ Calgary, Dept Comp Sci, Calgary, AB T2N 1N4, Canada.
RP Ghanam, Y (reprint author), Univ Calgary, Dept Comp Sci, 2500 Univ Dr NW, Calgary, AB T2N 1N4, Canada.
EM yghanam@ucalgary.ca; fmaurer@ucalgary.ca
CR Antoniol G, 2002, IEEE T SOFTWARE ENG, V28, P970, DOI 10.1109/TSE.2002.1041053
   BERG K, 2005, 2005 ANN RES C S AFR
   Cho H, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P3, DOI 10.1109/SPLC.2008.23
   Cleland-Huang J., 2004, Proceedings. 12th IEEE International Requirements Engineering Conference
   FEY D, 2002, LNCS, V2379, P198
   FILHO IM, 2002, P 4 INT C ENT INF SY
   FUCHS NE, 1992, SOFTWARE ENG J, V7, P323
   GHANAM Y, 2010, 11 INT C AG PROC EXT
   Gotel O. C. Z., 1994, 1 INT C REQ ENG, P94
   HUANG JC, 2006, P 30 ANN INT COMP SO, P41
   KANER C, 2003, BETTER SOFTWARE, V5, P16
   Kang K, 1990, CMUSEI90TR021
   Kang KC, 1998, ANN SOFTW ENG, V5, P143, DOI 10.1023/A:1018980625587
   KERIEVSKY J, STORYTESTING
   Melnik G, 2006, AGILE 2006, PROCEEDINGS, P35, DOI 10.1109/AGILE.2006.26
   PARK SS, 2008, APOS 2008, P19
   Parra C., 2009, P 13 INT SOFTW PROD
   PASHOV I, 2004, THESIS TU ILMENAU
   Perry W.E., 2000, EFFECTIVE METHODS SO
   Ramesh B, 2001, IEEE T SOFTWARE ENG, V27, P58, DOI 10.1109/32.895989
   RIEBISCH M, 2003, MODELLING VARIABILIT
   Riebisch M., 2004, Proceedings. 11th IEEE International Conference and Workshop on the Engineering of Computer-Based Systems, DOI 10.1109/ECBS.2004.1316721
   TUN TT, 2009, INT SOFTW PROD LIN C
NR 23
TC 3
Z9 3
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-642-15578-9
J9 LECT NOTES COMPUT SC
PY 2010
VL 6287
BP 211
EP 225
PG 15
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BTD71
UT WOS:000286579500015
ER

PT S
AU Zhang, HY
   Jarzabek, S
AF Zhang, Hongyu
   Jarzabek, Stan
BE Bosch, J
   Lee, JJ
TI A Hybrid Approach to Feature-Oriented Programming in XVCL
SO SOFTWARE PRODUCT LINES: GOING BEYOND
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 14th International Software Product Lines Conference
CY SEP 13-17, 2010
CL Jeju Island, SOUTH KOREA
SP Korean Inst Informat Sci & Engn, CoSDEC, Hitachi Ltd, Carnegie Mellon, Software Engn Inst, BigLever Software Inc, IBM, Fraunhofer Inst Appl Informat Technol
ID SOFTWARE PRODUCT LINES
AB Feature-Oriented Programming (FOP) is a programming paradigm for developing programs by composing features. It is especially useful for software product line development, as each product line member implements some combinations of features. FOP attempts to modularize features and to enable their flexible composition into programs. Recent studies have shown that it is not practical to modularize and then compose features that have fine-grained impact on base programs. In this paper, we present a hybrid approach to feature modularization/composition problem. We modularize only separable features that can be well contained in dedicated files. We handle inseparable features by annotating base programs using preprocessing-like directives. We show how the hybrid approach can be achieved in XVCL, a generative technique to manage variabilities in software product lines.
C1 [Zhang, Hongyu] Tsinghua Univ, Sch Software, Beijing 100084, Peoples R China.
RP Zhang, HY (reprint author), Tsinghua Univ, Sch Software, Beijing 100084, Peoples R China.
EM hongyu@tsinghua.edu.cn; stan@comp.nus.edu.sg
CR Apel S, 2008, IEEE T SOFTWARE ENG, V34, P162, DOI 10.1109/TSE.2007.70770
   Batory D, 2004, IEEE T SOFTWARE ENG, V30, P355, DOI 10.1109/TSE.2004.23
   Czarnecki K., 2000, GENERATIVE PROGRAMMI
   JARZABEK S, 2001, P INT S REQ ENG RE 2
   Jarzabek S, 2009, PROC INT CONF SOFTW, P215, DOI 10.1109/ICSE-COMPANION.2009.5070985
   Jarzabek S., 2007, EFFECTIVE SOFTWARE M
   Kastner Christian, 2008, 2008 ACM/IEEE 30th International Conference on Software Engineering. ICSE'08, DOI 10.1145/1368088.1368131
   Kastner C., 2007, P INT SOFTW PROD LIN, P223
   Lopez-Herrejon R., 2001, LNCS, V2186, P10
   Mezini M, 2004, P INT S FDN SOFTW EN, P127, DOI 10.1145/1029894.1029915
   Prehofer C, 2001, CONCURR COMP-PRACT E, V13, P465, DOI 10.1002/cpe.583
   Sun J., 2005, P 10 IEEE INT C ENG, P303
   TARR P, 1999, P ICSE 1999 LOS ANG
   Zhang HY, 2004, SCI COMPUT PROGRAM, V53, P381, DOI 10.1016/j.scico.2003.04.007
NR 14
TC 3
Z9 3
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-642-15578-9
J9 LECT NOTES COMPUT SC
PY 2010
VL 6287
BP 440
EP 445
PG 6
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BTD71
UT WOS:000286579500033
ER

PT S
AU Gomaa, H
AF Gomaa, Hassan
BE Nierstrasz, O
   Whittle, J
   Harel, D
   Reggio, G
TI A software modeling odyssey: Designing evolutionary architecture-centric
   real-time systems and product lines
SO MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS, PROCEEDINGS
SE LECTURE NOTES IN COMPUTER SCIENCE
LA English
DT Article; Proceedings Paper
CT 9th International Conference on Model Driven Engineering Languages and
   Systems
CY OCT 01-06, 2006
CL Genova, ITALY
SP Univ Genova, Dipartimento Informat Sci Informax, ACM SIGSE, IEEE Comp Soc
DE software modeling; software design; real-time systems; software product
   lines; software architecture
AB According to OMG, "modeling is the designing of software applications before coding." This paper describes a modeling approach to software design. The paper describes the key elements of design methods for component based software product lines, which promote reuse, variability management, and evolution. Approaches for executable models and performance analysis of concurrent and real-time design are discussed. Finally, some outstanding challenges are outlined, in particular the design of evolutionary and dynamically reconfigurable software architectures.
C1 George Mason Univ, Dept Informat & Software Engn, Fairfax, VA 22030 USA.
RP Gomaa, H (reprint author), George Mason Univ, Dept Informat & Software Engn, Fairfax, VA 22030 USA.
EM hgomaa@gmu.edu
CR Bass L., 2003, SOFTWARE ARCHITECTUR
   Buschmann F., 1996, PATTERN ORIENTED SOF
   Clements P, 2002, SOFTWARE PRODUCT LIN
   GOMAA H, 2004, P 4 WORK IEEE IFIP C
   GOMAA H, 2001, P ACM S SOFTW REUS T, P69, DOI 10.1145/375212.375252
   Gomaa H., 2004, SPRINGER LNCS, V3107
   GOMAA H, 2001, SPRINGER VERLAG LNCS, V2047
   GOMAA H, 2005, ADDISONWESLEY OBJECT
   GOMAA H, 2000, ADDISONWESLEY OBJECT
   GOMAA H, 2006, SPRINGER LNCS, V4039
   Gomaa H., 1996, Automated Software Engineering, V3
   GRISS M, 5 INT C SOFTW REUS P, P1
   HAREL D, 1996, P 18 INT C SOFTW ENG
   Jacobson I, 1997, SOFTWARE REUSE ARCHI
   Kang K., 1990, CMUSEI90TR21
   Lai C. T. R., 1999, SOFTWARE PRODUCT LIN
   MAGEE J, 1994, J DISTRIBUTED SYSTEM, P304
   Menasce DA, 2000, IEEE T SOFTWARE ENG, V26, P1066, DOI 10.1109/32.881718
   O'Hara-Schettino E, 1998, J SYST SOFTWARE, V41, P93, DOI 10.1016/S0164-1212(97)10010-3
   OMAA H, 1999, IEE P SOFTWARE, V146
   PARNAS D, 1979, IEEE T SOFTWARE  MAR
   PETTIT R, 2006, P INT C SOFTW ENG SH
   Rumbaugh J., 2005, UNIFIED MODELING LAN, VSecond
   Webber DL, 2004, SCI COMPUT PROGRAM, V53, P305, DOI 10.1016/j.scico.2003.04.004
NR 24
TC 3
Z9 3
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 3-540-45772-0
J9 LECT NOTES COMPUT SC
PY 2006
VL 4199
BP 1
EP 15
PG 15
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BFE35
UT WOS:000241450700001
ER

PT S
AU Siegmund, N
   Rosenmuller, M
   Kuhlemann, M
   Kastner, C
   Saake, G
AF Siegmund, Norbert
   Rosenmueller, Marko
   Kuhlemann, Martin
   Kaestner, Christian
   Saake, Gunter
TI Measuring Non-functional Properties in Software Product Lines for
   Product Derivation
SO APSEC 2008:15TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE,
   PROCEEDINGS
SE Asia-Pacific Software Engineering Conference
LA English
DT Proceedings Paper
CT 15th Asia-Pacific Software Engineering Conference
CY DEC 02-05, 2008
CL Beijing, PEOPLES R CHINA
SP Natl Nat Sci Fdn China, Chinese Acad Sci, Inst Software
AB A software product line (SPL) enables stakeholders to derive different software products for a domain while providing a high degree of reuse of their code units. Software products are derived in a configuration process 17), composing different code units. The configuration process becomes complex if SPLs contain hundreds of features. In many cases, a stakeholder is not only interested in functional but also in non-functional properties of a desired product. Because SPLs can be used in different application scenarios alternative implementations of already existing fucntionality are developed to meet special non-functional requirements, like restricted binary size and performance guarantees. To enable these complex configurations we discuss and present techniques to measure non-functional properties of software modules and use these values to compute SPL configurations optimized to the users needs.
C1 [Siegmund, Norbert; Rosenmueller, Marko; Kuhlemann, Martin; Kaestner, Christian; Saake, Gunter] Univ Magdeburg, D-39104 Magdeburg, Germany.
RP Siegmund, N (reprint author), Univ Magdeburg, D-39104 Magdeburg, Germany.
EM nsiegmun@ovgu.de; rosenmue@ovgu.de; mkuhlema@ovgu.de; ckaestne@ovgu.de;
   saake@ovgu.de
CR Abdelzaher TF, 2002, IEEE T PARALL DISTR, V13, P80, DOI 10.1109/71.980028
   Anand M., 2003, P 9 ANN INT C MOB CO, P176
   ANCIAUX N, 2003, P INT C VER LARG DAT
   BATORY D, 2004, IEEE T SOFTW ENG, V30
   BENAVIDES D, 2005, P INT C ADV INF SYST
   BENAVIDES D, 2007, WORKSH VAR MOD SOFTW
   BOTTERWECK G, 2007, WORKSH VIS SOFTW PRO
   Clements P, 2002, SOFTWARE PRODUCT LIN
   Czarnecki K., 2000, GENERATIVE PROGRAMMI
   Czarnecki K., 2004, P 3 SOFTW PROD LIN C, P266
   Deelstra S, 2005, J SYST SOFTWARE, V74, P173, DOI 10.1016/j.jss.2003.11.012
   Feng W.C., 2008, IT PROFESSIONAL, V10, P17, DOI 10.1109/MITP.2008.8
   Graefe G., 2008, SOFTWARE ENG TAILOR, P24
   HETRICK WA, 2006, P C OBJ OR PROGR SYS
   HUNLETH F, 2002, P JOINT C LANG COMP, P38
   IEEE, 1990, IEEE STAND COMP DICT
   Kang K., 1990, CMUSEI90TR21
   Krueger CW, 2006, COMMUN ACM, V49, P37, DOI 10.1145/1183236.1183262
   LOESCH F, 2007, P INT SOFTW PROD LIN, P161
   LOPEZHERREJON R, 2007, P INT C FUND APPR SO
   MARTIN P, 2002, INT J DIGITAL LIB
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, DOI 10.1109/TSE.1976.233837
   McConnell S., 2004, CODE COMPLETE
   Ossher H., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, DOI 10.1109/ICSE.2000.870483
   PORTER A, 2003, WORKSH REM AN MEAS S, P16
   Prehofer C, 1997, LECT NOTES COMPUT SC, V1241, P419
   RACU R, 2006, P INT C COMP ARCH SY, P379, DOI 10.1145/1176760.1176806
   RIVOIRE S, 2007, ACM SIGMOD RECORD
   ROSENMULLER M, 2008, WORKSH SOFTW ENG TAI, P1
   Siegmund N., 2008, WORKSH VAR MOD SOFTW, P25
   SINCERO J, 2007, SOFTW PROD LIN C DOC
   Steger M., 2004, P SPLC 04 BOST MA US, P34
   Streitferdt D, 2003, ECBS 2003: 10TH IEEE INTERNATIONAL CONFERENCE AND WORKSHOP ON THE ENGINEERING OF COMPUTER-BASED SYSTEMS, PROCEEDINGS, P297
   WHITE J, 2007, P INT SOFTW PROD LIN
   Zubrow Dave, 2003, CMUSEI2003TN031
NR 35
TC 3
Z9 3
PU IEEE COMPUTER SOC
PI LOS ALAMITOS
PA 10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA
SN 1530-1362
BN 978-0-7695-3446-6
J9 ASIA PAC SOFWR ENG
PY 2008
BP 187
EP 194
DI 10.1109/APSEC.2008.45
PG 8
WC Computer Science, Software Engineering; Engineering, Electrical &
   Electronic
SC Computer Science; Engineering
GA BIV83
UT WOS:000263222500022
ER

PT S
AU Lopez-Herrejon, RE
   Egyed, A
AF Lopez-Herrejon, Roberto E.
   Egyed, Alexander
BE Babar, MA
   Gorton, I
TI On the Need of Safe Software Product Line Architectures
SO SOFTWARE ARCHITECTURE
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 4th European Conference on Software Architecture
CY AUG 23-26, 2010
CL Copenhagen, DENMARK
HO IT Univ Copenhagen
ID VARIABILITY; SUPPORT
AB A Software Product Line (SPL) is a family of related software systems distinguished by the different sets of features each system provides. Over the last decade, the substantial benefits of SPL practices have been extensively documented and corroborated both in academia and industry. Several architecture methods have been proposed that employ different artifacts for expressing the components of a SPL, their properties and relationships. Of crucial importance for any SPL architecture method is to guarantee that the variability, for instance as expressed in feature models, is not only preserved but also kept consistent across all artifacts used. In this research challenge paper we argue that Safe Composition - the guarantee that all programs of a product line are type safe - can be leveraged to address this guarantee for structural properties of SPL architectures and the challenges that that entails.
C1 [Lopez-Herrejon, Roberto E.; Egyed, Alexander] Johannes Kepler Univ Linz, Inst Syst Engn & Automat, Linz, Austria.
RP Lopez-Herrejon, RE (reprint author), Johannes Kepler Univ Linz, Inst Syst Engn & Automat, Linz, Austria.
EM roberto.lopez@jku.at; alexander.egyed@jku.at
CR ADACHI E, 2009, VARIABILITY MANAGEME, P1
   Batory D, 2004, IEEE T SOFTWARE ENG, V30, P355, DOI 10.1109/TSE.2004.23
   BATORY D, 2008, AHEAD TOOL SUITE
   BENAVIDES D, 2010, INFORM SYST IN PRESS
   Bosch J, 2007, LECT NOTES COMPUT SC, V4422, P1
   Bosch J., 2000, ADOPTING EVOLVING PR
   Bosch J, 2010, J SYST SOFTWARE, V83, P67, DOI 10.1016/j.jss.2009.06.051
   Brito PHS, 2009, 2009 JOINT WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE AND EUROPEAN CONFERENCE ON SOFTWARE ARCHITECTURE, P231, DOI 10.1109/WICSA.2009.5290809
   Czarnecki K., 2000, GENERATIVE PROGRAMMI
   Dashofy EM, 2005, ACM T SOFTW ENG METH, V14, P199, DOI 10.1145/1061254.1061258
   Egyed A, 2006, IEEE T SOFTWARE ENG, V32, P299, DOI 10.1109/TSE.2006.48
   Etxeberria L, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P243, DOI 10.1109/SPLC.2008.37
   GOMAA H, 2004, USE CASES PATTERN BA
   GROHER I, 2009, T ASPECT ORIENTED SO, V6, P111
   Jayaraman P, 2007, LECT NOTES COMPUT SC, V4735, P151
   KASTNER C, 2009, GPCE, P157
   Lopez-Herrejon R. E., 2009, JISBD, P269
   LOPEZHERREJON RE, 2010, ECMFA IN PRESS
   Loughran N, 2008, LECT NOTES COMPUT SC, V4954, P36
   Mezini M, 2004, SIGSOFT FSE, P127, DOI 10.1145/1029894.1029915
   Perry D. E., 1998, LNCS, V1429, P51
   Pinto M, 2009, 2009 JOINT WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE AND EUROPEAN CONFERENCE ON SOFTWARE ARCHITECTURE, P245, DOI 10.1109/WICSA.2009.5290811
   Pohl K., 2005, SOFTWARE PRODUCT LIN
   Svahnberg M, 2005, SOFTWARE PRACT EXPER, V35, P705, DOI 10.1002/spe.652
   Taylor R N, 2009, SOFTWARE ARCHITECTUR
   Thaker S., 2007, GPCE, P95
   van der Linden F., 2007, SOFTWARE PRODUCT LIN
   ZHANG H, 1953, SCI COMPUT PROGRAM, V53, P381
   2009, JOINT WORK IEEE IFIP, P14
NR 29
TC 3
Z9 3
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-642-15113-2
J9 LECT NOTES COMPUT SC
PY 2010
VL 6285
BP 493
EP 496
PG 4
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BTD49
UT WOS:000286563800048
ER

PT S
AU Lochau, M
   Mennicke, S
   Baller, H
   Ribbeck, L
AF Lochau, Malte
   Mennicke, Stephan
   Baller, Hauke
   Ribbeck, Lars
BE Margaria, T
   Steffen, B
TI DeltaCCS: A Core Calculus for Behavioral Change
SO Leveraging Applications of Formal Methods, Verification and Validation:
   Technologies for Mastering Change, Pt I
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 6th International Symposium on Leveraging Applications of Formal
   Methods, Verification and Validation (ISoLA)
CY OCT 08-11, 2014
CL Imperial, GREECE
DE Variability Modeling; Operational Semantics; Model Checking
ID MODEL CHECKING
AB Concepts for enriching formal languages with variability capabilities aim at comprehensive specifications and efficient development of families of similar software variants as propagated, e.g., by the software product line paradigm. However, recent approaches are usually limited to purely structural variability, e.g., by adapting choice operator semantics for variant selection. Those approaches lack (1) a modular separation of common and variable parts and/or (2) a rigorous formalization of semantical impacts of structural variations. To overcome those deficiencies, we propose a delta-oriented extension to Milner's process calculus CCS, called DeltaCCS, that allows for modular reasoning about behavioral variability. In DeltaCCS, modular change directives are applied to core processes by altering term rewriting semantics in a determined way. We define variability-aware CCS congruences for a modular reasoning on the preservation of behavioral properties defined by the Modal mu-Calculus after changing CCS specifications. We implemented a DeltaCCS model checker to efficiently verify the members of a family of process variants.
C1 [Lochau, Malte] Tech Univ Darmstadt, Darmstadt, Germany.
RP Lochau, M (reprint author), Tech Univ Darmstadt, Darmstadt, Germany.
EM malte.lochau@es.tu-darmstadt.de; s.mennicke@tu-bs.de; h.baller@tu-bs.de;
   l.ribbeck@tu-bs.de
CR Apel S., 2008, TOPLAS, V32, P1
   Asirelli P., 2011, LNCS, V6722, P44
   Bradfield J., 2007, HDB MODAL LOGIC, P1
   Bravetti M., 2012, LMCS, V8
   Clarke D., 2010, SIGPLAN NOTICES, V46, P13
   Classen A., 2010, ICSE 2010
   Classen A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P321, DOI 10.1145/1985793.1985838
   Clavel M., 2007, LNCS, V4350
   Clements P, 2001, SOFTWARE PRODUCT LIN
   Cordy M., 2012, ICSE 2012
   Cordy M., 2013, SPLC 2013 WORKSH ACM, P141
   Czarnecki K, 2005, LECT NOTES COMPUT SC, V3676, P422
   Damiani F., 2012, GPCE 2012
   Erwig M., 2011, ACM TOSEM
   Fischbein D., 2006, INT WORKSH ROL SOFTW, P39
   Gnesi S., 2012, SPLC 2014 SPLC 2012, P66
   Gruler A, 2008, LECT NOTES COMPUT SC, V5051, P113, DOI 10.1007/978-3-540-68863-1_8
   Larsen Kim Guldstrand, 2007, LNCS, V4421, P64
   Lauenroth K, 2009, IEEE INT CONF AUTOM, P269, DOI 10.1109/ASE.2009.16
   Leucker M., 2012, LNCS, V7609, P131
   Li HC, 2002, ASE 2002: 17TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, P195
   Lochau M., 2012, TAP 2012
   Milner R., 1982, CALCULUS COMMUNICATI
   Stirling C., 1991, CCONCURRENCY THEORY
   ter Beek M.H., 2013, SPLC 2013 WORKSH ACM, P10
   Verdejo A., 2004, ELECTRONIC NOTES IN, V71, P282, DOI 10.1016/S1571-0661(05)82540-X
NR 26
TC 3
Z9 3
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-662-45234-9; 978-3-662-45233-2
J9 LECT NOTES COMPUT SC
PY 2014
VL 8802
BP 320
EP 335
PG 16
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BC0GO
UT WOS:000349021200023
ER

PT S
AU Ghanam, Y
   Maurer, F
AF Ghanam, Yaser
   Maurer, Frank
BE Sillitti, A
   Martin, A
   Wang, XF
   Whitworth, E
TI Extreme Product Line Engineering - Refactoring for Variability: A
   Test-Driven Approach
SO AGILE PROCESSES IN SOFTWARE ENGINEERING AND EXTREME PROGRAMMING
SE Lecture Notes in Business Information Processing
LA English
DT Proceedings Paper
CT 11th International Conference on Agile Software Development (XP2010)
CY JUN 01-04, 2010
CL Trondhim, NORWAY
DE variability; software product lines; agile methods; refactoring
AB Software product lines - families of similar but not identical software products - need to address the issue of feature variability. That is, a single feature might require various implementations for different customers. Also, features might need optional extensions that are needed by some but not all products. Software product line engineering manages variability by conducting a thorough domain analysis upfront during the planning phases. However, upfront, heavyweight planning approaches are not well-aligned with the values of minimalistic practices like XP where bottom-up, incremental development is common. In this paper, we introduce a bottom-up, test-driven approach to introduce variability to systems by reactively refactoring existing code. We support our approach with an eclipse plug-in to automate the refactoring process. We evaluate our approach by a case study to determine the feasibility and practicality of the approach.
C1 [Ghanam, Yaser; Maurer, Frank] Univ Calgary, Dept Comp Sci, Calgary, AB T2N 1N4, Canada.
RP Ghanam, Y (reprint author), Univ Calgary, Dept Comp Sci, 2500 Univ Dr NW, Calgary, AB T2N 1N4, Canada.
EM yghanam@ucalgary.ca; fmaurer@ucalgary.ca
CR [Anonymous], MANIFESTO AGILE SOFT
   Beck K, 2004, EXTREME PROGRAMMING, V2nd
   Carbon R, 2006, 1 INT WORKSH AG PROD
   CLEGG K, 2002, INT WORKSH PROD LIN
   Clements P, 2001, SOFTWARE PRODUCT LIN
   Gamma E, 1995, DESIGN PATTERS ELEME
   GHANAM Y, 2008, P 5 SOFTW PROD LIN T
   GURP J, 2001, WORK IEEE IFIP C SOF
   HANSSEN G, 2008, J SYSTEMS SOFTWARE
   KRUGER C, 2002, P 4 INT WORKSH PROD
   OBRIEN L, 2002, CMUSEI2002TN007
   Schmid K, 2002, IEEE SOFTWARE, V19, P50, DOI 10.1109/MS.2002.1020287
NR 12
TC 3
Z9 3
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 1865-1348
BN 978-3-642-13053-3
J9 LECT NOTES BUS INF
PY 2010
VL 48
BP 43
EP 57
PG 15
WC Computer Science, Software Engineering
SC Computer Science
GA BTF28
UT WOS:000286779200004
ER

PT S
AU Linsbauer, L
   Lopez-Herrejon, RE
   Egyed, A
AF Linsbauer, Lukas
   Lopez-Herrejon, Roberto Erick
   Egyed, Alexander
BE LeGoues, C
   Yoo, S
TI Feature Model Synthesis with Genetic Programming
SO SEARCH-BASED SOFTWARE ENGINEERING
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 6th International Symposium on Search-Based Software Engineering (SSBSE)
CY AUG 26-29, 2014
CL Fortaleza, BRAZIL
SP Carnegie Mellon Univ, UCL, Mestrado Acad Ciencias Computacao, Grupo Otimizacao Engn Software, CREST, Microsoft Res, CDL Fortaleza, New Route, Fac CDL, FUNCAP, Springer, CAPES, Conselho Nacl Desenvolvimento Cientifico & Tecnologico, Banco Nordeste, SENAI, Sebrae CE
DE Feature; Feature Models; Feature Set; Reverse Engineering; Software
   Product Lines; Variability Modeling
AB Search-Based Software Engineering (SBSE) has proven successful on several stages of the software development life cycle. It has also been applied to different challenges in the context of Software Product Lines (SPLs) like generating minimal test suites. When reverse engineering SPLs from legacy software an important challenge is the reverse engineering of variability, often expressed in the form of Feature Models (FMs). The synthesis of FMs has been studied with techniques such as Genetic Algorithms. In this paper we explore the use of Genetic Programming for this task. We sketch our general workflow, the GP pipeline employed, and its evolutionary operators. We report our experience in synthesizing feature models from sets of feature combinations for 17 representative feature models, and analyze the results using standard information retrieval metrics.
C1 [Linsbauer, Lukas; Lopez-Herrejon, Roberto Erick; Egyed, Alexander] Johannes Kepler Univ Linz, A-4040 Linz, Austria.
RP Linsbauer, L (reprint author), Johannes Kepler Univ Linz, A-4040 Linz, Austria.
EM lukas.linsbauer@jku.at; roberto.lopez@jku.at; alexander.egyed@jku.at
CR Acher M., 2013, VAMOS
   Arcuri Andrea, 2012, SOFTWARE TESTING VER
   Batory D, 2004, IEEE T SOFTWARE ENG, V30, P355, DOI 10.1109/TSE.2004.23
   Benavides D, 2010, INFORM SYST, V35, P615, DOI 10.1016/j.is.2010.01.001
   Benavides D., 2007, VAMOS, V2007-01, P129
   de Oliveira Barros M., 2011, 00062011 U FED EST R
   de Freitas FG, 2011, LECT NOTES COMPUT SC, V6956, P18
   Harman M, 2012, LECT NOTES COMPUT SC, V7007, P1
   Harman M, 2012, ACM COMPUT SURV, V45, DOI 10.1145/2379776.2379787
   Harman M, 2013, WORK CONF REVERSE EN, P1
   Haslinger EN, 2013, LECT NOTES COMPUT SC, V7793, P53, DOI 10.1007/978-3-642-37057-1_5
   Kang K., 1990, CMUSEI90TR21
   Krueger CW, 2002, LECT NOTES COMPUT SC, V2290, P282
   Laguna MA, 2013, SCI COMPUT PROGRAM, V78, P1010, DOI 10.1016/j.scico.2012.05.003
   Lopez-Herrejon R., 2001, LNCS, V2186, P10
   Lopez-Herrejon RE, 2013, EUR CON SFTWR MTNCE, P441, DOI 10.1109/CSMR.2013.67
   Lopez-Herrejon R.E., 2012, LNCS, V7515, P168
   Luke S., 2009, ESSENTIALS METAHEURI
   Manning CD, 2008, INTRO INFORM RETRIEV
   Moreira A., 2013, LNCS, V8107
   Poli R., 2008, FIELD GUIDE GENETIC
   Segura S., 2012, VAMOS, P63
   She S., 2014, INFORM SOFT IN PRESS
   Vargha A, 2000, J EDUC BEHAV STAT, V25, P101, DOI 10.2307/1165329
   Voelter M, 2006, MODEL DRIVEN SOFTWAR
NR 25
TC 3
Z9 3
PU SPRINGER INT PUBLISHING AG
PI CHAM
PA GEWERBESTRASSE 11, CHAM, CH-6330, SWITZERLAND
SN 0302-9743
BN 978-3-319-09940-8; 978-3-319-09939-2
J9 LECT NOTES COMPUT SC
PY 2014
VL 8636
BP 153
EP 167
PG 15
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BB7GP
UT WOS:000345519200011
ER

PT J
AU Nunes, C
   Kulesza, U
   Sant'Anna, C
   Nunes, I
   Garcia, A
   Lucena, C
AF Nunes, Camila
   Kulesza, Uira
   Sant'Anna, Claudio
   Nunes, Ingrid
   Garcia, Alessandro
   Lucena, Carlos
TI Assessment of the Design Modularity and Stability of Multi-Agent System
   Product Lines
SO JOURNAL OF UNIVERSAL COMPUTER SCIENCE
LA English
DT Article
DE Software Product Lines; Multi-agent Systems; Software Metrics; Empirical
   Software Engineering
ID SOFTWARE; MAINTENANCE
AB A multi-agent system product line (MAS-PL) defines an architecture whose design and implementation is accomplished using software agents to address its common and variable features. MAS-PL promotes the large-scale reuse of common and variable agency features across multiple MAS applications. The development of MAS-PLs can be achieved through MAS-specific platforms and implementation techniques, such as conditional compilation and aspect-oriented programming (AOP). However, there is not much evidence on how these techniques provide better modularity, allowing the conception of stable MAS-PL designs. This paper presents a quantitative study on the design modularity and stability of an evolving MAS-PL. The MAS-PL was built following the reactive product line adoption approach. The product line was developed and evolved based on several versions of a conference management web-based system, named Expert Committee (EC). Our evaluation is made through a series of change scenarios related to new agency features, which are agent characteristics that enhance the system with autonomous behavior. The quantitative study consists of a systematic comparison between two different versions of the EC MAS-PL based on a MAS-specific platform, called JADE. One version was implemented with object-oriented and conditional compilation techniques. The other one relied on AOP. Our analysis was driven by well-known modularity and change impact metrics.
C1 [Nunes, Camila; Nunes, Ingrid; Garcia, Alessandro; Lucena, Carlos] Pontifical Catholic Univ Rio de Janeiro, Rio De Janeiro, Brazil.
   [Kulesza, Uira] Univ Fed Rio Grande do Norte, BR-59072970 Natal, RN, Brazil.
   [Sant'Anna, Claudio] Univ Fed Bahia, Salvador, BA, Brazil.
RP Nunes, C (reprint author), Pontifical Catholic Univ Rio de Janeiro, Rio De Janeiro, Brazil.
EM cnunes@inf.puc-rio.br; uira@dimap.ufrn.br; santanna@dcc.ufba.br;
   ioliveira@inf.puc-rio.br; afgarcia@inf.puc-rio.br; lucena@inf.puc-rio.br
CR Alur Deepac, 2001, CORE J2EE PATTERNS B
   Alves V., 2006, P INT C GEN PROGR CO, P201, DOI 10.1145/1173706.1173737
   ALVES V, 2005, P 9 INT SOFTW PROD L, P70
   Apel S., 2006, P 5 INT C GEN PROGR, P59, DOI 10.1145/1173706.1173716
   Basili V., 1988, IEEE T SOFTWARE ENG, V14, P728
   BAUMER D, 1997, ROLE OBJECT PATTERN
   *BORL SOFTW CORP, 1994, BORL TOG
   Buschmann F., 1996, PATTERN ORIENTED SOF
   Cirilo E, 2008, J UNIVERS COMPUT SCI, V14, P1344
   Clements P, 2001, SOFTWARE PRODUCT LIN
   Colyer A., 2004, SEPARATION CONCERNS
   CONEJERO J, 2009, 47 INT C OB IN PRESS
   Czarnecki K., 2000, GENERATIVE PROGRAMMI
   Eaddy M, 2008, IEEE T SOFTWARE ENG, V34, P497, DOI 10.1109/TSE.2008.36
   Fayad M, 1999, BUILDING APPL FRAMEW
   Figueiredo Eduardo, 2008, 2008 ACM/IEEE 30th International Conference on Software Engineering. ICSE'08, DOI 10.1145/1368088.1368124
   Filho F.C., 2006, P 14 ACM SIGSOFT INT, P152, DOI 10.1145/1181775.1181794
   Gamma E, 1995, DESIGN PATTERNS ELEM, V1st
   GARCIA A, 2003, P 2 INT WORKSH SOFTW, P19
   Garcia A., 2005, P 4 INT C ASP OR SOF, P3, DOI 10.1145/1052898.1052899
   GREENWOOD P, 2007, LNCS
   GRISS ML, 2000, P 1 C SOFTW PROD LIN, P271
   HANNEMANN J., 2002, P 17 ACM SIGPLAN C O, P161
   HUNLETH F, 2002, P JOINT C LANG COMP, P38
   Irwin J., 1997, P EUR C OBJ OR PROGR, V1241, P220
   Jennings NR, 2001, COMMUN ACM, V44, P35, DOI 10.1145/367211.367250
   Kastner C., 2007, P INT SOFTW PROD LIN, P223
   KENDALL EA, 1999, P ACM C OBJ OR SYST, P353, DOI 10.1145/320384.320423
   Kiczales G, 2001, COMMUN ACM, V44, P59, DOI 10.1145/383845.383858
   KRUEGER C, 2003, LECT NOTES COMPUTER, V2290, P282
   Kulesza U, 2006, PROC IEEE INT CONF S, P223
   KULESZA U, 2006, P 9 INT C SOFTW REUS, P231
   LEE K., 2006, P 10 INT SOFTW PROD, P103
   LOBATO C, 2008, P 7 INT C COMP BAS S, V5, P53
   Meyer B., 1998, OBJECT ORIENTED SOFT
   NUNES C, 2008, BRAZ S SOFTW COMP AR, P122
   NUNES C, 2009, 3 EUR C SOFTW MAINT, P229
   NUNES I, 2008, AGENT ORIENTED SOFTW, V5, P228
   Nunes I., 2008, BRAZ S MULT WEB SYST, P115
   Pena J, 2007, LECT NOTES COMPUT SC, V4405, P208
   PENA J, 2006, SOFTWARE ENG RES PRA, P995
   Pohl K., 2005, SOFTWARE PRODUCT LIN
   SANTANNA C, 2008, P 2 WORKSH ASS CONT, P25
   Sant'Anna C, 2007, LECT NOTES COMPUT SC, V4758, P207
   Sant'anna C., 2003, 17 BRAZ S SOFTW ENG, P19
   Soares S, 2006, SOFTWARE PRACT EXPER, V36, P711, DOI 10.1002/spe.715
   Voelter M., 2007, P 11 INT SOFTW PROD, P233, DOI DOI 10.1109/SPLINE.2007.23
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   WOOLDRIDGE M, 2000, 1 INT WORKSH AG OR S, V1957, P1
   YAU SS, 1985, IEEE T SOFTWARE ENG, V11, P849, DOI 10.1109/TSE.1985.232544
NR 50
TC 3
Z9 3
PU GRAZ UNIV TECHNOLGOY, INST INFORMATION SYSTEMS COMPUTER MEDIA-IICM
PI GRAZ
PA INFFELDGASSE 16C, GRAZ, A-8010, AUSTRIA
SN 0948-695X
J9 J UNIVERS COMPUT SCI
JI J. Univers. Comput. Sci.
PY 2009
VL 15
IS 11
BP 2254
EP 2283
PG 30
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA 507UK
UT WOS:000270880400006
ER

EF﻿FN Thomson Reuters Web of Science™
VR 1.0
PT S
AU Reinhartz-Berger, I
   Tsoury, A
AF Reinhartz-Berger, Iris
   Tsoury, Arava
BE DeTroyer, O
   Medeiros, CB
   Billen, R
   Hallot, P
   Simitsis, A
   VanMingroot, H
TI Specification and Utilization of Core Assets: Feature-Oriented vs.
   UML-Based Methods
SO ADVANCES IN CONCEPTUAL MODELING: RECENT DEVELOPMENTS AND NEW DIRECTIONS
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 7th International Workshop on Foundations and Practices of UML
CY OCT 31-NOV 03, 2011
CL Brussels, BELGIUM
DE variability; software product line engineering; domain analysis; UML;
   feature-orientation
AB Core assets are reusable artifacts built to be used in different software products in the same family. As such, core assets need to capture both commonality that exists and variability that is allowed in the product family (line). These assets are later utilized for guiding the creation of particular valid products in the family. Feature-oriented and UML-based methods have been proposed for modeling core assets. In this work, we suggest a framework for analyzing and evaluating core assets modeling methods. We use this framework for comparing two specific methods: feature-oriented CBFM and UML-based ADOM. We found similar performance in modifying core assets in the two methods and some interesting differences in core assets utilization.
C1 [Reinhartz-Berger, Iris; Tsoury, Arava] Univ Haifa, Dept Informat Syst, IL-31905 Haifa, Israel.
RP Reinhartz-Berger, I (reprint author), Univ Haifa, Dept Informat Syst, IL-31905 Haifa, Israel.
EM iris@is.haifa.ac.il; aravabt@gmail.com
CR Bachmann F., 2005, CMUSEI2005TR012
   Clements P, 2002, SOFTWARE PRODUCT LIN
   Czarnecki K., 2005, P OOPSLA WORKSH SOFT
   Halmans G, 2008, LECT NOTES COMPUT SC, V5074, P109
   Kang K., 1990, CMUSEI90TR21
   Kitchenham BA, 2002, IEEE T SOFTWARE ENG, V28, P721, DOI 10.1109/TSE.2002.1027796
   OMG, MET FAC MOF SPEC VER
   Pohl K., 2005, SOFTWARE PRODUCT LIN
   Reinhartz-Berger I, 2011, LECT NOTES BUS INF P, V81, P468
   Reinhartz-Berger I, 2009, INFORM SOFTWARE TECH, V51, P1275, DOI 10.1016/j.infsof.2009.03.005
   Sinnema M, 2007, INFORM SOFTWARE TECH, V49, P717, DOI 10.1016/j.infsof.2006.08.001
   Svahnberg M, 2005, SOFTWARE PRACT EXPER, V35, P705, DOI 10.1002/spe.652
NR 12
TC 3
Z9 3
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-642-24573-2
J9 LECT NOTES COMPUT SC
PY 2011
VL 6999
BP 302
EP 311
PG 10
WC Computer Science, Information Systems; Computer Science, Software
   Engineering; Computer Science, Theory & Methods
SC Computer Science
GA BZY34
UT WOS:000303359600038
ER

PT S
AU Diaz, O
   Trujillo, S
   Anfurrutia, FI
AF Diaz, O
   Trujillo, S
   Anfurrutia, FI
BE Obbink, H
   Pohl, K
TI Supporting production strategies as refinements of the production
   process
SO SOFTWARE PRODUCT LINES, PROCEEDINGS
SE LECTURE NOTES IN COMPUTER SCIENCE
LA English
DT Article; Proceedings Paper
CT 9th International Software Product Lines Conference (SPLC 2005)
CY SEP 26-29, 2005
CL Rennes, FRANCE
AB The promotion of a clear separation between artifact construction and artifact assembling is one of the hallmarks of software product lines. This work rests on the assumption that the mechanisms for producing products considerably quicker, cheaper or at a higher quality, rest not only on the artifacts but on the assembling process itself. This leads to promoting production processes as "first-class artifacts", and as such, liable to vary to accommodate distinct features. Production process variability and its role to support either production features or production strategies are analyzed. As prove of concept, the AHEAD Tool Suite is used to support a sample application where features require variations on the production process.
C1 Univ Basque Country, ONEKIN Grp, Washington, DC 20009 USA.
RP Diaz, O (reprint author), Univ Basque Country, ONEKIN Grp, POB 649, Washington, DC 20009 USA.
EM oscar.diaz@ehu.es; struji@ehu.es; felipe.anfurrutia@ehu.es
RI Diaz, Oscar/D-2822-2011
CR *AP SOFTW FDN, AP ANT
   Batory D, 2004, IEEE T SOFTWARE ENG, V30, P355, DOI 10.1109/TSE.2004.23
   Batory D., 1992, ACM Transactions on Software Engineering and Methodology, V1, DOI 10.1145/136586.136587
   Batory D, 1997, IEEE T SOFTWARE ENG, V23, P67, DOI 10.1109/32.585497
   Bosch J, 2000, DESIGN USE SOFTWARE
   CHASTEK G, 2002, CMUSEI2002TN029
   CHASTEK G, 2002, CMUSEI2002TR06
   Clements P, 2001, SOFTWARE PRODUCT LIN
   COWARD D, 2003, JSR 154 JAVA SERVLET
   CREASMAN J, 2003, ENHANCE ANT XSL TRAN
   Czarnecki K., 2000, GENERATIVE PROGRAMMI
   Dijkstra E W, 1976, DISCIPLINE PROGRAMMI
   LAUX A, XUPDATE XML UPDATE L
   MCGREGOR JD, 2004, J OBJECT TECHNOLOGY, V3, P89
   Serrano N, 2004, IEEE SOFTWARE, V21, P89, DOI 10.1109/MS.2004.33
   Singh I., 2002, DESIGNING ENTERPRISE, VSecond
NR 16
TC 3
Z9 3
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 3-540-28936-4
J9 LECT NOTES COMPUT SC
PY 2005
VL 3714
BP 210
EP 221
PG 12
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BDG27
UT WOS:000233358200022
ER

PT S
AU Altintas, NI
   Cetin, S
AF Altintas, N. Ilker
   Cetin, Semih
BE Draheim, D
   Weber, G
TI Integrating a software product line with rule-based business process
   modeling
SO TRENDS IN ENTERPRISE APPLICATION ARCHITECTURE
SE Lecture Notes in Computer Science
LA English
DT Article; Proceedings Paper
CT 31st International Conference on Very Large Databases
CY AUG 28, 2005
CL Trondheim, NORWAY
AB This paper proposes an approach to integrate a software product line (Aurora) with reflective rule-based business process modeling (RUMBA). Aurora is a service-oriented application development and execution platform supporting today's well known "Rich Internet Applications" and "Enterprise Internet Applications" concepts. On the other hand, RUMBA is a rule-based model in which rules and rule-sets can be expressed in terms of dynamic aspects and delegated facts. The proposed approach mainly addresses "Reflective Aspect" and "Reflective Rule" patterns for the seamless integration of Aurora and RUMBA. Both architectural patterns introduce a "generative" approach for developing the basic aspects, dynamic rules and rule-sets so that all can be implemented in the Adaptive Object Model (AOM). The proposed model will be explained in detail and exemplified with existing projects using both Aurora and RUMBA approaches.
C1 Cybersoft Informat Technol Co, TR-34758 Istanbul, Turkey.
   Cybersoft Informat Technol Co, Ankara, Turkey.
RP Altintas, NI (reprint author), Cybersoft Informat Technol Co, Ata Pl 3-3, TR-34758 Istanbul, Turkey.
EM ilker.altintas@cs.com.tr; semih.cetin@cs.cora.tr
CR AKSIT M, 1998, ECOOP 98 WORKSH READ, P435
   ALTINTAS N, 2005, 2 NAT SOFTW ENG S AN, P54412
   ANDERSON G, 2004, DYNAMIC BEHAV JAVA D, P54412
   BERGMANS L, 2001, SOFTWARE ARCHITECTUR, P357
   CLEMENTS P, 2001, SOFTWARE PRODUCT LIN, P54412
   CUMMINS F, 2002, ENTERPRISE INTEGRATI, P54412
   DANTAS A, 2003, 3 LAT AM C PATT LANG, P54412
   DUHL J, 2003, BUSINESS IMPACT RICH, P54412
   Elrad T, 2001, COMMUN ACM, V44, P33, DOI 10.1145/383845.383854
   ERL T, 2004, SERVICE ORIENTED ARC, P54412
   FILMAN RE, 2001, COMMUN ACM, V44, P29
   GROSSO W, 2005, LASZLO OPEN SOURCE F, P54412
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220
   KRAFZIG D, 2004, ENTERPRISE SOA SERVI, P54412
   LINTHICUM DS, 1999, ENTERPRISE APPL INTE, P54412
   MAJA D, 2004, THESIS VRIJE U BRUSS, P54412
   MULLET K, 2003, ESSENCE EFFECTIVE RI, P54412
   OROURKE C, 2004, LOOK RICH INTERNET A, P54412
   STEVENS M, 2003, SERVICE ORIENTED ARC, P54412
   STEVENS WP, 1974, IBM SYST J, V13, P115
   YODER JW, 2001, 2001 C OBJ OR PROGR, P54412
   YODER JW, 2001, ADAPTIVE OBJECT MODE, P54412
   ZUBROW D, 2003, CMUSEI2003TN031, P54412
   2000, THESIS, P54412
NR 24
TC 2
Z9 2
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 3-540-32734-7
J9 LECT NOTES COMPUT SC
PY 2006
VL 3888
BP 15
EP 28
PG 14
WC Computer Science, Artificial Intelligence; Computer Science, Hardware &
   Architecture; Computer Science, Theory & Methods
SC Computer Science
GA BEH43
UT WOS:000237265100003
ER

PT J
AU Costa, GCB
   Braga, R
   David, JMN
   Campos, F
   Arbex, W
AF Costa, Gabriella Castro B.
   Braga, Regina
   David, Jose Maria N.
   Campos, Fernanda
   Arbex, Wagner
BE Alexandrov, V
   Lees, M
   Krzhizhanovskaya, V
   Dongarra, J
   Sloot, PMA
TI PL-Science: A Scientific Software Product Line
SO 2013 INTERNATIONAL CONFERENCE ON COMPUTATIONAL SCIENCE
SE Procedia Computer Science
LA English
DT Proceedings Paper
CT 13th Annual International Conference on Computational Science (ICCS)
CY JUN 05-07, 2013
CL Barcelona, SPAIN
SP Univ Amsterdam, Univ Tennessee, Nanyang Technol Univ, Barcelona Super Comp Ctr
DE Product Line; Ontology; Feature Model; Scientific Workflows; Sequence
   Alignment
AB A way to improve reusability and maintainability of a family of software products is through the use of Software Product Line (SPL) approach. Software families, also named SPLs, are a set of software intensive systems sharing a common set of features which are managed to satisfy specific needs of a particular market segment or mission and that are developed from a common set of core assets in a prescribed way. This paper presents the PL-Science approach that considers the context of SPL and aims to assist scientists to define a scientific experiment, specifying a workflow that encompasses scientific applications of a given experiment. Using SPL concepts, scientists can reuse models that specify the scientific product line, and carefully can make decisions according to their needs. In the context of this paper, Scientific Software Product Lines (SSPL) differs from the Software Product Lines (SPL) due to the fact that SSPL uses an abstract scientific workflow model. This workflow is defined according to a scientific domain and, using this abstract workflow model, the products (scientific applications/algorithms) will be instantiated. This paper also focuses on the use of ontologies to facilitate the process of applying Software Product Line (SPL) to scientific domains. Through the use of ontology as a domain model, we can provide additional information as well as add more semantics in the context of Scientific Software Product Lines (SSPL). and/or peer-review under responsibility of the organizers of the 2013 International Conference on Computational (C) 2013 The Authors. Published by Elsevier B.V. Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
C1 [Costa, Gabriella Castro B.; Braga, Regina; David, Jose Maria N.; Campos, Fernanda] Univ Fed Juiz de Fora, Dept Comp Sci, Juiz De Fora, Brazil.
RP Costa, GCB (reprint author), Univ Fed Juiz de Fora, Dept Comp Sci, Juiz De Fora, Brazil.
RI Dongarra, Jack/E-3987-2014
CR Arbex W., 2009, THESIS FEDERAL U RIO
   Asikainen T, 2007, ADV ENG INFORM, V21, P23, DOI 10.1016/j.aei.2006.11.007
   Baxevanis A.D., 2001, BIOINFORMATICS PRACT
   Bhagat J., 2010, NUCL ACIDS RES, V38
   Clements P, 2002, SOFTWARE PRODUCT LIN
   Czarnecki K., 2006, P 10 INT SOFTW PROD, P41
   Elfaki A., 2009, 7 INT C SOFTW ENG RE
   Filho J. a. B. F., 2012, P 16 INT SOFTW PROD, V2, P188
   Gruber TR, 1995, INT J HUM-COMPUT ST, V43, P907, DOI 10.1006/ijhc.1995.1081
   Johansen M. F., 2010, P 14 INT SOFTW PROD, V2, P163
   Matos EE, 2010, J BIOMED INFORM, V43, P125, DOI 10.1016/j.jbi.2009.08.008
   Mendes LF, 2011, COMPUT BIOL MED, V41, P449, DOI 10.1016/j.compbiomed.2011.04.007
   Silva L.M., 2012, INFORM SCI, V186, P186
   Wolstencroft K, 2007, Int J Bioinform Res Appl, V3, P303, DOI 10.1504/IJBRA.2007.015005
NR 14
TC 2
Z9 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA SARA BURGERHARTSTRAAT 25, PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 1877-0509
J9 PROCEDIA COMPUT SCI
PY 2013
VL 18
BP 759
EP 768
DI 10.1016/j.procs.2013.05.240
PG 10
WC Computer Science, Theory & Methods
SC Computer Science
GA BFR52
UT WOS:000321051200077
ER

PT S
AU Fantinato, M
   Gimenes, IMD
   de Toledo, MBF
AF Fantinato, Marcelo
   de S. Gimenes, Itana Maria
   de Toledo, Maria Beatriz F.
BE Dustdar, S
   Fiadeiro, JL
   Sheth, A
TI Web service e-contract establishment using features
SO BUSINESS PROCESS MANAGEMENT, PROCEEDINGS
SE Lecture Notes in Computer Science
LA English
DT Article; Proceedings Paper
CT 4th International Conference on Business Process Management
CY SEP 05-07, 2006
CL Vienna, AUSTRIA
SP Ultimus, Austrian Comp Soc, Stadt WIEN, TU WIEN
AB Electronic contracts describe inter-organizational business processes in terms of supply and consumption of electronic services (commonly Web services). In a given contract domain, it is usually possible to identify a set of well-defined common and variation points. Feature modeling is an ontology-like technique that has been widely used for capturing and managing commonalities and variabilities of product families in the context of software product line. This paper proposes a feature-based approach in order to decrease the complexity in Web service e-contract establishment. The feasibility of the approach is shown by a case study carried out within the telecom context and based on experimental software engineering concepts.
C1 Univ Estadual Campinas, Inst Comp, Campinas, Brazil.
   Univ Maringa, Dept Comp Sci, Maringa, Parana, Brazil.
RP Fantinato, M (reprint author), Univ Estadual Campinas, Inst Comp, Campinas, Brazil.
EM infantina@ic.unicamp.br; itana@din.uem.br; beatriz@ic.unicamp.br
RI Fantinato, Marcelo/G-1071-2012
CR Andrieux A, WEB SERVICES AGREEME
   Antkiewicz M., 2004, WORKSH ECL TECHN EXC, P67
   BAJAJ S, WEB SERVICES POLICY
   BARESI L, 2005, 6 VLDB WORKSH TECHN
   CECHTICKY V, 2004, ICSR 2004, P101
   CHIU DKW, 2003, HICSS 2003
   Czarnecki K., 2005, Software Process Improvement and Practice, V10, DOI 10.1002/spip.225
   Dayal U., 2001, VLDB 2001, P3
   FANTINATO M, 2006, IEEE JOINT C E COMM
   Griss ML, 2000, ICSR 6 P 6 INT C SOF, P137
   GRUBER TR, 1993, KNOWL ACQUIS, V5, P199, DOI 10.1006/knac.1993.1008
   HOFFNER Y, 2001, INT J COMPUTER TELEC, V37, P111
   HUNTER J, 2003, TELECOMMUNICATIONS B
   JERTILA A, 2005, IEEE CEC 2005 IEEE C, P396
   KANG K, 1990, CMUSEI90TR021 SEICMU
   Kang KC, 1998, ANN SOFTW ENG, V5, P143, DOI 10.1023/A:1018980625587
   Keller A., 2003, Journal of Network and Systems Management, V11, DOI 10.1023/A:1022445108617
   KITCHENHAM B, 1995, IEEE SOFTWARE, V12, P52, DOI 10.1109/52.391832
   Krishna P., 2005, INFORM TECHNOL MANAG, V6, P363, DOI 10.1007/s10799-005-3901-z
   Leymann F, 2002, IBM SYST J, V41, P198
   Marjanovic O., 2001, EDOC 2001, P59
   Menasce DA, 2002, IEEE INTERNET COMPUT, V6, P72, DOI 10.1109/MIC.2002.1067740
   OLDHAM N, 2006, 15 INT WORLD WID WEB
   OLIVEIRA EA, 2005, CASCON 2005
   Papazoglou M., 2003, COMMUN ACM, V46, P24, DOI DOI 10.1145/944217.944233
   Pfleeger S.L., 1995, ACM SIGSOFT SOFTWARE, V20, P22, DOI 10.1145/225907.225910
   Rinderle S, 2005, LECT NOTES COMPUT SC, V3806, P443
   Rouached M, 2005, LECT NOTES COMPUT SC, V3649, P410
   Sahai A., 2002, DSOM, P28
   SEI, FRAM SOFTW PROD LIN
   SOCHOS P, 2004, NET OBJECT DAYS 2004
   STREITBERGER W, 2005, IEEE CEC 2005, P370
   Terplan K., 2001, OSS ESSENTIALS SUPPO
   Tosic V., 2005, IEEE INT C E TECHN E, P444
   VONSUSANI O, 2005, IEEE CEC 2005 IEEE C, P540
   WANG H, 2005, SWESE
NR 36
TC 2
Z9 2
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 3-540-38901-6
J9 LECT NOTES COMPUT SC
PY 2006
VL 4102
BP 290
EP 305
PG 16
WC Computer Science, Artificial Intelligence; Computer Science, Information
   Systems; Computer Science, Theory & Methods
SC Computer Science
GA BFD25
UT WOS:000241137100020
ER

PT S
AU Johnsen, EB
   Owe, O
   Schlatte, R
   Tarifa, SLT
AF Johnsen, Einar Broch
   Owe, Olaf
   Schlatte, Rudolf
   Tarifa, Silvia Lizeth Tapia
BE Beckert, B
   Marche, C
TI Validating Timed Models of Deployment Components with Parametric
   Concurrency
SO FORMAL VERIFICATION OF OBJECT-ORIENTED SOFTWARE
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT International Conference on Formal Verification of Object-Oriented
   Software (FoVeOOS 2010)
CY JUN 28-30, 2010
CL Paris, FRANCE
SP COST Action IC0701, Microsoft Res Redmond, Inst Natl Rech Informat & Automat, Karlsruhe Inst Technol (KIT)
ID REWRITING LOGIC; SYSTEMS; DESIGN
AB Many software systems today are designed without assuming a fixed underlying architecture, and may be adapted for sequential, multicore, or distributed deployment. Examples of such systems are found in, e.g., software product lines, service-oriented computing, information systems, embedded systems, operating systems, and telephony. Models of such systems need to capture and range over relevant deployment scenarios, so it is interesting to lift aspects of low-level deployment concerns to the abstraction level of the modeling language. This paper proposes an abstract model of deployment components for concurrent objects, extending the Creol modeling language. The deployment components are parametric in the amount of concurrency they provide; i.e., they vary in processing resources. We give a formal semantics of deployment components and characterize equivalence between deployment components which differ in concurrent resources in terms of test suites. Our semantics is executable on Maude, which allows simulations and test suites to be applied to a deployment component with different concurrent resources.
C1 [Johnsen, Einar Broch; Owe, Olaf; Schlatte, Rudolf; Tarifa, Silvia Lizeth Tapia] Univ Oslo, Dept Informat, N-0316 Oslo, Norway.
RP Johnsen, EB (reprint author), Univ Oslo, Dept Informat, N-0316 Oslo, Norway.
EM einarj@ifi.uio.no; olaf@ifi.uio.no; rudi@ifi.uio.no; sltarifa@ifi.uio.no
CR Agha G., 1986, ACTORS MODEL CONCURR
   Ahrendt W., 2010, SCI COMPUTE IN PRESS
   Albert E, 2008, LECT NOTES COMPUT SC, V5382, P113, DOI 10.1007/978-3-540-92188-2_5
   Armstrong J, 2007, PROGRAMMING ERLANG S
   Balsamo S, 2004, IEEE T SOFTWARE ENG, V30, P295, DOI 10.1109/TSE.2004.9
   Bjork J., P INT WORKSH REWR TE
   Bjork J., 2010, EL P THEOR COMP SCI, V36, P67
   Caromel D., 2005, THEORY DISTRIBUTED O
   Chakrabarti A, 2003, LECT NOTES COMPUT SC, V2855, P117
   Chen X, 2006, INT J PARALLEL PROG, V34, P3, DOI 10.1007/s10766-005-0002-x
   Clavel M, 2002, THEOR COMPUT SCI, V285, P187, DOI 10.1016/S0304-3975(01)00359-0
   de Boer FS, 2007, LECT NOTES COMPUT SC, V4421, P316
   Epifani I, 2009, PROC INT CONF SOFTW, P111, DOI 10.1109/ICSE.2009.5070513
   Fersman E, 2007, INFORM COMPUT, V205, P1149, DOI 10.1016/j.ic.2007.01.009
   Haller P, 2009, THEOR COMPUT SCI, V410, P202, DOI 10.1016/j.tcs.2008.09.019
   Hennessy M, 2002, ACM T PROGR LANG SYS, V24, P566, DOI 10.1145/570886.570890
   Hessel A., 2008, LNCS, V4949, P77
   Hierons RM, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1459352.1459354
   Jaghoori MM, 2009, J LOGIC ALGEBR PROGR, V78, P402, DOI 10.1016/j.jlap.2009.02.009
   Johnsen EB, 2010, LECT NOTES COMPUT SC, V6447, P646, DOI 10.1007/978-3-642-16901-4_42
   Johnsen E.B., 2007, SOFTWARE SYSTEMS MOD, V6, P35
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Olveczky P.C., 2007, P WRLA ENTCS, V176, P5
   Petriu DB, 2007, SOFTW SYST MODEL, V6, P163, DOI 10.1007/s10270-006-0026-8
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P17, DOI 10.1016/j.jlap.2004.03.002
   Pohl K., 2005, SOFTWARE PRODUCT LIN
   Schafer J, 2010, LECT NOTES COMPUT SC, V6183, P275, DOI 10.1007/978-3-642-14107-2_13
   Verhoef M, 2006, LECT NOTES COMPUT SC, V4085, P147
   Welc A., 2005, P 20 ANN ACM SIGPLAN, P439, DOI 10.1145/1094811.1094845
   Yacoub S.M., 2002, LNCS, V2379, P299
NR 30
TC 2
Z9 2
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-642-18069-9
J9 LECT NOTES COMPUT SC
PY 2011
VL 6528
BP 46
EP 60
PG 15
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BXM67
UT WOS:000296413000004
ER

PT S
AU Diaz, O
   Trujillo, S
   Azpeitia, I
AF Diaz, O
   Trujillo, S
   Azpeitia, I
BE Benatallah, B
   Shan, MC
TI User-facing web service development: A case for a product-line approach
SO TECHNOLOGIES FOR E-SERVICES, PROCEEDINGS
SE LECTURE NOTES IN COMPUTER SCIENCE
LA English
DT Article; Proceedings Paper
CT 4th International Workshop on Technologies for E-Services
CY SEP 07-08, 2003
CL BERLIN, GERMANY
AB Web service technology has proved its way as a function integration enabler. The next step is to achieve application integration whereby one application is made available within the context of a consumer application, and this can also include the interface. This is the aim of the WSRP initiative, sponsored by OASIS. This initiative is standardizing the notion of Portlet as a user-facing, presentation-oriented Web Service, intended to simplify the creation of distributed interactive applications. One of the challenges is how to cope with the extent and heterogeneity of the diverse aspects that are now being encapsulated by the Web Service. And how variability requirements can be addressed. To this end, this paper proposes a product-line approach. As a first step, this work focuses on the feature model, i.e. a model that provides an abstract and concise syntax for expressing commonality and variability when addressing Portlet development. As the encapsulation of the presentation layer is what distinguishes a Portlet from a traditional Web Service, the paper focuses on presentation, personalization and consumer-platform requirements. The aim is to facilitate the construction and adaptation of future WSRP Portlets to the specificities of the consumer application. This endeavour aims at leveraging Web service technology as an application-integration enabler.
C1 Univ Basque Country, EKIN Grp, San Sebastian 20080, Spain.
RP Diaz, O (reprint author), Univ Basque Country, EKIN Grp, POB 649, San Sebastian 20080, Spain.
RI Azpeitia, Iker/B-8563-2008; Diaz, Oscar/D-2822-2011
OI Azpeitia, Iker/0000-0002-2853-7390; 
CR Bosch J, 2000, DESIGN USE SOFTWARE
   BOSCH J, 2001, P WICSA 2001
   CLAUS M, 2001, P 3 INT S GEN COMP B
   CLEMENCE P, 2002, SOFTWARE PRODUCT LIN
   DIAZ O, 2003, UNPUB ACM T INTERNET
   EDMOND D, 2002, DISTRIBUTED PARALLEL, V12, P117
   FAVARO J, 1998, P 4 INT C SOFTW REUS, P76
   GRISS ML, 2000, P 6 INT C SOFTW REUS
   KANG KC, 1998, ANN SOFTW ENG, V5, P345
   VANDEURSEN A, 2002, J COMPUTING INFORMAT, V10
   VANGURP J, 2002, UNPUB ACM
NR 11
TC 2
Z9 2
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 3-540-20052-5
J9 LECT NOTES COMPUT SC
PY 2003
VL 2819
BP 66
EP 77
PG 12
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BY04F
UT WOS:000187344500006
ER

PT J
AU Alonso, D
   Pastor, JA
   Sanchez, P
   Alvarez, B
   Vicente-Chicote, C
AF Alonso, Diego
   Angel Pastor, Juan
   Sanchez, Pedro
   Alvarez, Barbara
   Vicente-Chicote, Cristina
TI Automatic Code Generation for Real-Time Systems: a Development Approach
   based on Components, Models, and Frameworks
SO REVISTA IBEROAMERICANA DE AUTOMATICA E INFORMATICA INDUSTRIAL
LA Spanish
DT Article
DE Software Engineering; Component-Based Software Development; Model-Driven
   Software Development; Framework; Software Design Patterns; Real-Time
ID SOFTWARE-ARCHITECTURE; LANGUAGES
AB Real-Time Systems have some characteristics that make them particularly sensitive to architectural decisions. The use of Frameworks and Components has proven effective in improving productivity and software quality, especially when combined with Software Product Line approaches. However, the results in terms of software reuse and standardization make the lack of portability of both the design and component-based implementations clear. This article, based on the Model-Driven Software Development paradigm, presents an approach that separates the component-based description of real-time applications from their possible implementations on different platforms. This separation is supported by the automatic integration of the code obtained from the input models into object-oriented frameworks. The article also details the architectural decisions taken in the implementation of one of such frameworks, which is used as a case study to illustrate the proposed approach. Finally, a comparison with other alternative approaches is made in terms of development cost.
C1 [Alonso, Diego; Angel Pastor, Juan; Sanchez, Pedro; Alvarez, Barbara; Vicente-Chicote, Cristina] Univ Politecn Cartagena, Hosp Marina, DSIE, Cartagena 30202, Spain.
RP Alonso, D (reprint author), Univ Politecn Cartagena, Hosp Marina, DSIE, Cartagena 30202, Spain.
EM diego.alonso@upct.es
RI Sanchez, Pedro/B-7710-2009; Vicente-Chicote, Cristina/A-7648-2008
OI Vicente-Chicote, Cristina/0000-0002-9553-3461
CR Alonso D., 2010, J SOFTWARE ENG ROBOT, V1, P3
   Antkiewicz M, 2009, IEEE T SOFTWARE ENG, V35, P795, DOI 10.1109/TSE.2009.30
   Artist-ESD, 2008, ARTISTDESIGN EUR NET
   Atkinson C., 2001, COMPONENT BASED PROD
   Autosar, 2008, AUTOSAR AUT OP SYST
   Bensalem S, 2009, IEEE ROBOT AUTOM MAG, V16, P67, DOI 10.1109/MRA.2008.931631
   Bezivin J., 2005, SOFTWARE SYSTEM MODE, V4, P171, DOI DOI 10.1007/S10270-005-0079-0
   Blair G., 2009, ANN TELECOMMUNICATIO, V64
   Boehm B. W., 2000, SOFTWARE COST ESTIMA
   Booch G., 2007, OBJECT ORIENTED ANAL
   Brooks A, 2007, SPRINGER TRAC ADV RO, V30, P231, DOI 10.1007/978-3-540-68951-5_13
   Brugali D., 2000, ACM COMPUT SURV, V32, P1
   Bruyninckx H., 2001, ROB AUT 2001 P 2001, V3, P2523
   Bures Tomas, 2007, International Journal of Computer & Information Science
   Burns A., 1995, HRT HOOD STRUCTURED
   Buschmann F., 2007, PATTERN ORIENTED SOF, V5
   Buschmann F., 2007, PATTERN ORIENTED SOF, V4
   Carlson J., 2006, ELECT NOTES THEORETI, V160, P127, DOI 10.1016/j.entcs.2006.05.019
   Chella A, 2010, J SYST SOFTWARE, V83, P557, DOI 10.1016/j.jss.2009.10.035
   Childs A, 2006, COMPUTER, V39, P42, DOI 10.1109/MC.2006.51
   Crnkovic I., 2005, Journal of Computing and Information Technology - CIT, V13, DOI 10.2498/cit.2005.04.10
   D'Souza D.F., 1998, OBJECTS COMPONENTS F
   Dominguez-Brito A., 2004, P IEEE INT C ROB AUT, V4, P3423
   Douglass B. P., 2004, REAL TIME UML ADV UM
   Fairbanks G., 2006, P C OBJ OR PROGR SYS, P75, DOI 10.1145/1167473.1167480
   Fayad M, 1999, BUILDING APPL FRAMEW
   Gomaa H., 2000, DESIGNING CONCURRENT
   Hongxing W., 2009, P 2009 IEEE RSJ INT, P3429
   Iborra A, 2009, IEEE ROBOT AUTOM MAG, V16, P24, DOI 10.1109/MRA.2008.931635
   Jacobson I., 1992, OBJECT ORIENTED SOFT
   Lau KK, 2007, IEEE T SOFTWARE ENG, V33, P709, DOI 10.1109/TSE.2007.70726
   Medvidovic N, 2000, IEEE T SOFTWARE ENG, V26, P70, DOI 10.1109/32.825767
   Mens T., 2006, ELECT NOTES THEORETI, V152, P125, DOI DOI 10.1016/J.ENTCS.2005.10.021
   OMG, 2006, CORBA COMP MOD FORM
   OMG, 2008, MDA SUCC STOR
   OMG, 2009, UML PROF MARTE MOD A
   OpenEmbeDD, 2008, OPENEMBEDD PROJ MOD
   Parsons D, 2006, SOFTWARE PRACT EXPER, V36, P157, DOI 10.1002/spe.694
   Pastor J., 2010, LNCS, P167
   Schlegel C., 2006, INT J ADV ROBOT SYST, V3, P49
   Shaw M, 2006, IEEE SOFTWARE, V23, P31, DOI 10.1109/MS.2006.58
   Sommerville I., 2010, SOFTWARE ENG, V9th
   Szyperski C., 2002, COMPONENT SOFTWARE O, V2nd
   van Ommering R, 2000, COMPUTER, V33, P78, DOI 10.1109/2.825699
   Voelter M, 2006, MODEL DRIVEN SOFTWAR
NR 45
TC 2
Z9 2
PU COMITE ESPANOL AUTOMATICA CEA
PI VALENCIA
PA C VERA 14, APDO 22012, VALENCIA, E-46071, SPAIN
SN 1697-7912
J9 REV IBEROAM AUTOM IN
JI Rev. Iberoam. Autom. Inform. Ind.
PD APR-JUN
PY 2012
VL 9
IS 2
BP 170
EP 181
DI 10.1016/j.riai.2012.02.010
PG 12
WC Automation & Control Systems; Robotics
SC Automation & Control Systems; Robotics
GA 933HN
UT WOS:000303351600007
ER

PT S
AU Delicato, FC
   Fuentes, L
   Gamez, N
   Pires, PF
AF Delicato, Flavia C.
   Fuentes, Lidia
   Gamez, Nadia
   Pires, Paulo F.
BE Ruiz, PM
   GarciaLunaAceves, JJ
TI A Middleware Family for VANETs
SO AD-HOC, MOBILE AND WIRELESS NETWORKS, PROCEEDINGS
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 8th International Conference on Ad-Hoc Networks and Wireless (ADHOC-NOW
   2009)
CY SEP 16-19, 2009
CL Murcia, SPAIN
SP Univ Murcia, Dept Informat & Commun Engn, Univ Murcia, Vicerrectorado Invest
HO Univ Murcia
DE VANETs; WSNs; Middleware; Software; Product Line
AB Vehicular Ad-hoc Networks are in important application domain of ubiquitous computing and Wireless Sensor Networks are It key technology for enabling such:applications The development Of ubiquitous applications poses challenges as dealing, with the low-level programming abstractions and the heterogeneity of hardware and software Middleware facilitates application development by hiding the heterogeneity and complexity of the underlying hardware and software We argue that a single middleware is not able to meet the heterogeneity of ubiquitous systems, and propose a Software Product Line approach to design I middleware family The family IS customized according to constraints imposed by three viewpoints device, network and application We customize the family considering the variability of the VANETs domain.
C1 [Delicato, Flavia C.; Pires, Paulo F.] Univ Fed Rio Grande do Norte, BR-59072970 Natal, RN, Brazil.
RP Delicato, FC (reprint author), Univ Fed Rio Grande do Norte, BR-59072970 Natal, RN, Brazil.
EM flavia.delicato@dimap.ufrn.br; lff@lcc.uma.es; nadia@lcc.uma.es;
   paulo.pires@dimap.ufrn.br
RI Delicato, Flavia/M-6644-2013; Fuentes, Lidia/M-5580-2014; Pires, Paulo/
OI Delicato, Flavia/0000-0001-5334-8279; Fuentes,
   Lidia/0000-0002-5677-7156; Pires, Paulo/0000-0001-5064-4793
CR Akyildiz I. F., 2004, AD HOC NETW, V2, P351, DOI DOI 10.1016/J.ADH0C.2004.04.003]
   Czarnecki K., 2005, OOPSLA COMPANION, P200
   DELICATO F, 2009, P IWAAL IN PRESS
   DELICATO FC, 2005, P 20 ACM S APPL COMP
   Dikaiakos M., 2007, IEEE J SELECTED AREA, V25
   Fuentes Lidia, 2009, International Journal of Ambient Computing and Intelligence, V1, DOI 10.4018/jaci.2009010106
   KWANWOO LJL, 2002, LNCS, V2319, P62
   Loughran N, 2008, LECT NOTES COMPUT SC, V4954, P36
   Pohl K., 2005, SOFTWARE PRODUCT LIN
   SIVAHARAN T, 2004, MOBISYS
   Wang MM, 2008, J COMPUT SCI TECH-CH, V23, P305, DOI 10.1007/s11390-008-9135-x
NR 11
TC 2
Z9 2
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-642-04382-6
J9 LECT NOTES COMPUT SC
PY 2009
VL 5793
BP 379
EP 384
PG 6
WC Computer Science, Theory & Methods; Telecommunications
SC Computer Science; Telecommunications
GA BNV81
UT WOS:000275676600031
ER

PT B
AU Montero, I
   Pena, J
   Ruiz-Cortes, A
AF Montero, Ildefonso
   Pena, Joaquin
   Ruiz-Cortes, Antonio
GP IEEE COMPUTER SOC
TI Representing Runtime Variability in Business-Driven Development Systems
SO SEVENTH INTERNATIONAL CONFERENCE ON COMPOSITION-BASED SOFTWARE SYSTEMS,
   PROCEEDINGS
LA English
DT Proceedings Paper
CT 7th International Conference on Composition-Based Software Systems
CY FEB 25-29, 2008
CL Madrid, SPAIN
SP IEEE TCSE, Carnegie Mellon, Software Engn Inst, Natl Res Council Canada, NRC, CNRC, European Software Inst
AB Business-Driven Development(BDD) is a research field that provides techniques and mechanisms for designing software systems starting from the business processes of the companies. Companies are in continuous evolution to adapt to market changes, thus, current process engineers redesign the processes every time that is needed using ad hoc techniques. This situation motivates that these changes, called runtime variability; must be managed. Some authors have used Software Product Lines (SPL) ideas to manage it.
   Current approaches for documenting runtime variability in SPL and BDD, proposes different model representations. Unfortunately, we have determined that the expressiveness level in BDD is not adequate, and that SPL solutions needs for adaptation to BDD context for describing under which circumstances a business evolves.
   In this paper, we present a model for representing runtime variability in BDD systems. The main contributions of this proposal are: (i) it presents the enough expressiveness level for representing runtime variability; and (ii) process engineers can represent and understand under which events a business evolves and how this evolution is managed, which is not present in current approaches. We call this approach Product Evolution Model (PEM).
C1 [Montero, Ildefonso; Pena, Joaquin; Ruiz-Cortes, Antonio] Univ Seville, Dept Lenguajes & Sistemas Informat, E-41012 Seville, Spain.
RP Montero, I (reprint author), Univ Seville, Dept Lenguajes & Sistemas Informat, Av Reina Mercedes S-N, E-41012 Seville, Spain.
EM monteroperez@us.es; joaquinp@us.es; aruiz@us.es
RI Ruiz-Cortes, Antonio/B-9056-2008; Pena, Joaquin /K-8217-2012
OI Ruiz-Cortes, Antonio/0000-0001-9827-1834; Pena, Joaquin
   /0000-0001-9216-9695
CR BPMI, 2004, BUS PROC MOD NOT BPM
   GOMAA H, 2007, WCAT 07
   GOMAA H, 2007, ICSEW 07
   GURP JV, 2001, WICSA 01
   Kang K., 1990, CMUSEI90TR21
   Pohl K., 2005, SOFTWARE PRODUCT LIN
   SCHNIEDERS A, 2006, P BIS 06 BUS INF SYS
NR 7
TC 2
Z9 2
PU IEEE COMPUTER SOC
PI LOS ALAMITOS
PA 10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA
BN 978-0-7695-3091-8
PY 2008
BP 228
EP 231
DI 10.1109/ICCBSS.2008.28
PG 4
WC Computer Science, Software Engineering; Engineering, Electrical &
   Electronic
SC Computer Science; Engineering
GA BJE52
UT WOS:000265180200025
ER

PT S
AU Peng, X
   Shen, LW
   Zhao, WY
AF Peng, Xin
   Shen, Liwei
   Zhao, Wenyun
BE Mei, H
TI Feature implementation modeling based product derivation in software
   product line
SO HIGH CONFIDENCE SOFTWARE REUSE IN LARGE SYSTEMS, PROCEEDINGS
SE LECTURE NOTES IN COMPUTER SCIENCE
LA English
DT Proceedings Paper
CT 10th International Conference on Softeware Reuse
CY MAY 25-29, 2008
CL Beijing, PEOPLES R CHINA
SP Corporate Technol Siemens Ltd
AB Although there has been significant research spent on feature modeling and application-oriented customization and some effective methods have been proposed, product derivation in SPL (Software Product Line) development is still a time- and effort-consuming activity due to the complicated mapping between feature model and program implementation. In this paper, we propose a feature implementation modeling based method for product derivation. In the method, feature implementation model is introduced as the intermediate level between feature model and program implementation. The feature implementation model captures feature interactions (including cross-cutting interactions) in the finer role level, and help to clarify the complex mapping between feature and program implementation. So, feature-driven program-level customization and configuration can be enabled by the model and role instantiation. AOP (Aspect-Oriented Programming) is adopted as the implementation technology for product derivation on the program level. Then program-level composition can be implemented by aspect weaving to finally achieve the feature-driven product derivation.
C1 [Peng, Xin; Shen, Liwei; Zhao, Wenyun] Fudan Univ, Dept Comp Engn & Sci, Shanghai 200433, Peoples R China.
RP Peng, X (reprint author), Fudan Univ, Dept Comp Engn & Sci, Shanghai 200433, Peoples R China.
CR ANASTASOPOULOS M, 2004, LNCS, V3107
   DEELSTRA S, 2004, LNCS, V3154
   JANSEN AGJ, 2004, IEE P SOFTW, V151
   LEE K, 2006, SPLC 2006
   PENG X, 2006, LNCS, V4039
   VANDEURSEN A, 2002, LNCS, V2379
   Zhang W, 2006, REQUIR ENG, V11, P205, DOI 10.1007/s00766-006-0033-x
NR 7
TC 2
Z9 2
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-540-68062-8
J9 LECT NOTES COMPUT SC
PY 2008
VL 5030
BP 142
EP 153
PG 12
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BHS71
UT WOS:000255983900013
ER

PT B
AU Nobrega, JP
   de Almeida, ES
   Meira, SRL
AF Nobrega, Jarley Palmeira
   de Almeida, Eduardo Santana
   Meira, Silvio Romero Lemos
TI InCoME: Integrated Cost Model for Product Line Engineering
SO PROCEEDINGS OF THE 34TH EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND
   ADVANCED APPLICATIONS
LA English
DT Proceedings Paper
CT 34th EUROMICRO Conference on Software Engineering and Advanced
   Applications
CY SEP 03-05, 2008
CL Parma, ITALY
SP CPS, IEEE Comp Soc
ID SOFTWARE REUSE; ECONOMICS; ROI
AB A large number of software organizations are adopting the software product line approach in their reuse program. One fundamental factor to evaluate cost-benefit of this approach is the practical use of cost models to estimate if an investment is worth while for a family of products. This paper analyzes the most significant cost models for product line engineering and it highlights the set of features that makes an effective model. This work also presents an integrated cost model for product line engineering with its foundations and elements. At the end, is presented a discussion over the results of a case study where the model was applied.
C1 [Nobrega, Jarley Palmeira; Meira, Silvio Romero Lemos] Univ Fed Pernambuco, Recife, PE, Brazil.
RP Nobrega, JP (reprint author), Univ Fed Pernambuco, Recife, PE, Brazil.
EM jpn@cin.ufbe.br; esa@cesar.org.br; silvio@cesar.org.br
CR BANDINELLI S, 1996, ESI1996REUSE03
   Basili V., 1994, ENCY SOFTWARE ENG, V1, P528
   Bockle G, 2004, IEEE SOFTWARE, V21, P23
   Boehm B., 1995, Annals of Software Engineering, V1, DOI 10.1007/BF02249046
   Boehm B., 2004, P 2004 INT S EMP SOF, P156, DOI 10.1109/ISESE.2004.1334903
   BOLLINGER TB, 1990, INFORM SOFTWARE TECH, V32, P643, DOI 10.1016/0950-5849(90)90097-B
   Brownsword Lisa, 1996, CMUSEI96TR016
   Clements P, 2001, SOFTWARE PRODUCT LIN
   Clements P, 2004, FRAMEWORK SOFTWARE P
   CLEMENTS PC, CMUSEI2005TR003
   Cohen S., 2003, CMUSEI2003TN017
   Favaro JM, 1998, ANN SOFTW ENG, V5, P5, DOI 10.1023/A:1018976424679
   Favaro J, 1996, FOURTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE, PROCEEDINGS, P136
   HARRISON W, 2002, 3 INT C SOFTW ENG
   Krueger C.W., 1992, ACM COMPUT SURV, V24, P131, DOI 10.1145/130844.130856
   LAMINE S, 2005, P 2005 INT MULT COMP
   Lim W.C., 1998, MANAGING SOFTWARE RE
   LIM WC, 1994, IEEE SOFTWARE, V11, P23, DOI 10.1109/52.311048
   Mili A., 2000, 22 INT C SOFTW ENG L, P157
   Mili A, 2001, ANN SOFTW ENG, V11, P175, DOI 10.1023/A:1012599304672
   MILI R, 1996, RETURN INVESTMENT RE
   MUTHIG D, 10 INT SOFTW PROD LI
   Myers S, 1996, PRINCIPLES CORPORATE
   Nazareth DL, 2004, J SYST SOFTWARE, V73, P245, DOI [10.1016/S0164-1212(03)00248-6, 10.1016/s0164-1212(03)00248-6]
   NOBREGA JP, 2008, THESIS U FEDERAL PER
   Peterson DR, 2004, LECT NOTES COMPUT SC, V3014, P381
   POULIN JS, 2006, BUSINESS CASE SOFTWA
   POULIN JS, 1993, IBM SYST J, V32, P567
   POULIN JS, 2007, EC PRODUCT LINE DEV
   Robert C. P., 2004, MONTE CARLO STAT MET
   Sametinger J., 1997, SOFTWARE ENG REUSABL, P275
   SCHMID K, 2003, 06703E LIT IESE
   Trigeorgis L., 1996, REAL OPTIONS
   WILES E, 1999, EC MODELS SOFTWARE R, P49
NR 34
TC 2
Z9 2
PU IEEE COMPUTER SOC
PI LOS ALAMITOS
PA 10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA
BN 978-0-7695-3276-9
PY 2008
BP 27
EP 34
DI 10.1109/SEAA.2008.41
PG 8
WC Computer Science, Software Engineering; Engineering, Electrical &
   Electronic
SC Computer Science; Engineering
GA BIV06
UT WOS:000262984400004
ER

PT S
AU Calvagna, A
   Gargantini, A
   Vavassori, P
AF Calvagna, Andrea
   Gargantini, Angelo
   Vavassori, Paolo
GP IEEE Comp Soc
TI Combinatorial Testing for Feature Models Using CITLAB
SO IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION
   AND VALIDATION WORKSHOPS (ICSTW 2013)
SE IEEE International Conference on Software Testing Verification and
   Validation Workshops
LA English
DT Proceedings Paper
CT 6th IEEE International Conference on Software Testing, Verification and
   Validation (ICST)
CY MAR 18-22, 2013
CL Luxembourg, LUXEMBOURG
SP IEEE, P&T Luxembourg, IEE, SES, Fonds Natl Rech Luxembourg, Luxinnovation, Secur & Trust, Univ Luxembourg, Comp Sci & Commun Res Unit, Lab Adv Software Syst, IEEE Comp Soc
AB Feature models are commonly used to represent product lines and systems with a set of features interrelated each others. Test generation from feature models, i.e. generating a valid and representative subset of all the possible product configurations, is still an open challenge. A common approach is to build combinatorial interaction test suites, for instance achieving pairwise coverage among the features. In this paper we show how standard feature models can be translated to combinatorial interaction models in our framework CITLAB, with all the advantages of having a combinatorial testing environment (in terms of a clear semantics, editing facilities, language for seeds and test goals, and generation algorithms). We present our translation which gives a precise semantics to feature models and it tries to minimize the number of parameter and constraints while preserving the original semantics of the feature model. Experiments show the advantages of our approach.
C1 [Calvagna, Andrea] Univ Catania, Dip Matemat & Informat, I-95124 Catania, Italy.
RP Calvagna, A (reprint author), Univ Catania, Dip Matemat & Informat, I-95124 Catania, Italy.
EM calvagna@cs.unict.it; angelo.gargantini@unibg.it;
   paolo.vavassori@unibg.it
CR Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Benavides D, 2010, INFORM SYST, V35, P615, DOI 10.1016/j.is.2010.01.001
   Bryce RC, 2007, GECCO 2007: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOL 1 AND 2, P1082
   Calvagna A., 2013, 6 IEEE INT C SOFTW T
   Cohen M.B., 2006, P ISSTA 2006 WORKSH, P53, DOI 10.1145/1147249.1147257
   Cohen MB, 2008, IEEE T SOFTWARE ENG, V34, P633, DOI 10.1109/TSE.2008.50
   Engstrom E, 2011, INFORM SOFTWARE TECH, V53, P2, DOI 10.1016/j.infsof.2010.05.011
   Gargantini A., 2012, WORKSH COMB TEST CT, P559
   Garvin BJ, 2009, 1ST INTERNATIONAL SYMPOSIUM ON SEARCH BASED SOFTWARE ENGINEERING, PROCEEDINGS, P13, DOI 10.1109/SSBSE.2009.25
   Hervieu Aymeric, 2011, P INT S SOFT REL ENG
   Johansen M. F., 2012, P 16 INT SOFTW PROD, V1, P46
   Lei Y, 2008, SOFTW TEST VERIF REL, V18, P125, DOI 10.1002/stvr.381
   Mendonca M., 2009, P 24 ACM SIGPLAN C C, P761, DOI 10.1145/1639950.1640002
   Oster S., 2011, P 5 WORKSH VAR MOD S, P79, DOI 10.1145/1944892.1944901
   Oster S, 2010, LECT NOTES COMPUT SC, V6287, P196, DOI 10.1007/978-3-642-15579-6_14
   Perrouin G, 2012, SOFTWARE QUAL J, V20, P605, DOI 10.1007/s11219-011-9160-9
   Perrouin G., 2010, SOFTW TEST VER VAL I, P459
   Schobbens PY, 2007, COMPUT NETW, V51, P456, DOI 10.1016/j.comnet.2006.08.008
   Thum T., 2012, SCI COMPUTE IN PRESS
NR 19
TC 2
Z9 2
PU IEEE COMPUTER SOC
PI LOS ALAMITOS
PA 10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA
SN 2159-4848
BN 978-0-7695-4993-4; 978-1-4799-1324-4
J9 IEEE ICST WORKSHOP
PY 2013
BP 338
EP 347
DI 10.1109/ICSTW.2013.45
PG 10
WC Computer Science, Software Engineering; Engineering, Electrical &
   Electronic
SC Computer Science; Engineering
GA BA0SM
UT WOS:000332185600053
ER

PT S
AU Kim, HK
AF Kim, HK
BE Gavrilova, M
   Gervasi, O
   Kumar, V
   Tan, CJK
   Taniar, D
   Lagana, A
   Mun, Y
   Choo, H
TI Applying product line to the embedded systems
SO COMPUTATIONAL SCIENCE AND ITS APPLICATIONS - ICCSA 2006, PT 3
SE LECTURE NOTES IN COMPUTER SCIENCE
LA English
DT Article; Proceedings Paper
CT International Conference on Computational Science and Its Applications
   (ICCSA 2006)
CY MAY 08-AUG 11, 2003
CL Glasgow, SCOTLAND
SP IEE, Univ Perugia, Univ Calgary, Univ Minnesota, Queens Univ Belfast, ERCIM, OptimaNumerics, INTEL, AMD
AB For software intensive systems, a reuse-driven product line approach will potentially reduce time-to-market, and improve product quality while reducing uncertainty on cost and sc11edule estimates. Product lines raise reuse to the level of design frameworks, not simply code or component reuse. They capture commonality and adaptability, through domain and variability analyzes, to be able to create new products easily by instantiating prefabricated components, adapting their design parameters, and leveraging from established testing suites. In this paper, we examine software technology and infrastructure (process) supporting product lines more directly to embedded systems. We also present evaluation criteria for the development of a product line and give an overview of the current state of practices in the embedded software area. A product line architecture that brings about a balance between sub-domains and their most important properties is an investment that must be looked after. However, the sub-domains need flexibility to use, change and manage their own technologies, and evolve separately, but in a controlled way.
EM hangkon@cu.ac.kr
CR BALEANI M, 2005, DESIGN AUTOMATION TE, V2, P1044
   Douglass B. P., 2000, REAL TIME UML DEV EF
   Kang B, 2005, Third ACIS International Conference on Software Engineering Research, Managment and Applications, Proceedings, P160
   LI SK, 2005, P 9 INT C COMP SUPP, V2, P956
   OSTROFF JO, FORMAL METHODS SPECI
   QIAO Y, 2005, ITCC 2005 INT C, V2, P479
   Ramamritham K., 2004, Proceedings. 17th International Conference on VLSI Design
   Robertson D, 1998, SLOAN MANAGE REV, V39, P19
   SCHMID K, 2002, P SOFTWARE PRODUCT L, P513
NR 9
TC 2
Z9 2
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 3-540-34075-0
J9 LECT NOTES COMPUT SC
PY 2006
VL 3982
BP 163
EP 171
PG 9
WC Computer Science, Information Systems; Computer Science, Theory &
   Methods
SC Computer Science
GA BEL01
UT WOS:000237648300018
ER

PT S
AU Wang, Y
   Kobsa, A
AF Wang, Yang
   Kobsa, Alfred
BE Houben, GJ
   McCalla, G
   Pianesi, F
   Zancanaro, M
TI Performance Evaluation of a Privacy-Enhancing Framework for Personalized
   Websites
SO USER MODELING, ADAPTATION, AND PERSONALIZATION, PROCEEDINGS
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 17th International Conference on User Modeling, Adaptation, and
   Personalization
CY JUN 22-26, 2009
CL Trento, ITALY
ID CONSTRAINTS; COMPONENT; USERS
AB Reconciling personalization with privacy has been a continuing interest in the user modeling community. In prior work, we proposed a dynamic privacy-enhancing user modeling framework based on a software product line architecture (PLA). Our system dynamically selects personalization methods during runtime that respect users' current privacy preferences as well as the prevailing privacy laws and regulations. One major concern about our approach is its performance since dynamic architectural reconfiguration during runtime is usually resource-intensive. In this paper, we describe four implementations of our system that vary two factors, and an in-depth performance evaluation thereof under realistic workload conditions. Our study shows that a customized version performs better than the original PLA implementation, that a multi-level caching mechanism improves both versions, and that the customized version with caching performs best. The average handling time per user session is less than 0.2 seconds for all versions except the original PLA implementation. Overall, our results demonstrate that with a reasonable number of networked hosts in a cloud computing environment, an internationally operating website can use our dynamic PLA-based user modeling approach to personalize their user services, and at the same time respect the individual privacy desires of their users as well as the privacy norms that may apply.
C1 [Wang, Yang; Kobsa, Alfred] Univ Calif Irvine, Donald Bren Sch Informat & Comp Sci, Irvine, CA 92717 USA.
RP Wang, Y (reprint author), Univ Calif Irvine, Donald Bren Sch Informat & Comp Sci, Irvine, CA 92717 USA.
EM yangwang@ics.uci.edu; kobsa@ics.uci.edu
RI Kobsa, Alfred/
OI Kobsa, Alfred/0000-0002-7691-4955
CR *AL, 2009, YAHO TRAFF DET
   ArchStudio, 2005, ARCHST 3
   ArchStudio, 2008, MYX
   BHOLE Y, 2005, J NETWORK SYSTEMS MA
   Buyyas R, 2008, 10 IEEE INT C HIGH P, P5, DOI [10.1109/HPCC.2008.172, DOI 10.1109/HPCC.2008.172]
   Carmichael DJ, 2005, USER MODEL USER-ADAP, V15, P197, DOI 10.1007/s11257-005-0001-z
   Chlebus E, 2007, INFORM PROCESS LETT, V102, P187, DOI [10.1016/j.ipl.2006.12.015, 10.1016/j.ip.2006.12.015]
   Clements P, 2002, SOFTWARE PRODUCT LIN
   DASHOFY E, 2007, ICSE COMPANION 07, P67
   Kobsa A., 2007, LNCS, V4321, P628
   Kobsa A, 2003, LECT NOTES ARTIF INT, V2702, P143
   Kobsa A, 2006, USER MODEL USER-ADAP, V16, P129, DOI 10.1007/s11257-006-9006-5
   Kobsa A, 2003, LECT NOTES COMPUT SC, V2760, P177
   Taylor RN, 1996, IEEE T SOFTWARE ENG, V22, P390, DOI 10.1109/32.508313
   van der Hoek A., 2001, 9 ACM S FDN SOFTW EN, P1
   van der Hoek A, 2004, SCI COMPUT PROGRAM, V53, P285, DOI 10.1016/j.scico.2003.04.003
   WANG Y, 2009, MODELING PLA V UNPUB
   Wang Y, 2006, SPLC 2006: 10TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P151
   Wang Y., 2009, SOCIAL ORG LIABILITI, P203, DOI 10.4018/978-1-60566-132-2.ch013
   Wang Y., 2006, P CHI2006 WORKSH PRI, P44
   Wang Y, 2007, LECT NOTES ARTIF INT, V4511, P157
   WANG Y, 2006, COLLECTION SYSTEMATI
   Zadorozhny Vladimir, 2008, Web Intelligence and Agent Systems, V6, DOI 10.3233/WIA-2008-0136
NR 23
TC 2
Z9 2
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-642-02246-3
J9 LECT NOTES COMPUT SC
PY 2009
VL 5535
BP 78
EP 89
PG 12
WC Computer Science, Artificial Intelligence; Computer Science, Software
   Engineering; Computer Science, Theory & Methods
SC Computer Science
GA BME87
UT WOS:000272045900007
ER

PT S
AU Pena, J
AF Pena, Joaquin
BE Hinchey, MG
   Rago, P
   Rash, JL
   Rouff, CA
   Sterritt, R
   Truszkowski, W
TI Can agent oriented software engineering be used to build MASs product
   lines?
SO Innovative Concepts for Autonomic and Agent-Based Systems
SE LECTURE NOTES IN ARTIFICIAL INTELLIGENCE
LA English
DT Proceedings Paper
CT 2nd International Workshop on Radical Agent Concepts
CY SEP 20-22, 2005
CL Greenbelt, MD
SP NASA Goddard, Informat Syst Div, IEEE Comp Soc TCCC, IEEE Task Force Autonomous & Auton Syst
ID IMPLEMENTATION; SYSTEMS
AB On the one hand, the Software Product Lines (SPL) field is devoted to build a core architecture for a family of products from which concrete products can be derived rapidly by means of reuse. On the other hand, Agent-Oriented Software Engineering (AOSE) is a software engineering paradigms dedicated to build software applications composed of organizations of agents. Bringing AOSE to the industrial world may prettily benefit from SPL advantages. Using SPL philosophy, a company will be able to define a core MAS from which concrete products will be derived for each customer. This can reduce time-to-market, costs, etcetera. In this paper, we expose the similarities between AOSE and SPL concluding the viability of future research in Multi-Agent Systems Product Lines (MAS-PL).
C1 Dpto Lenguajes & Sistemas Informat, E-41012 Seville, Spain.
RP Pena, J (reprint author), Dpto Lenguajes & Sistemas Informat, Avda Reina Mercedes SN, E-41012 Seville, Spain.
RI Pena, Joaquin /K-8217-2012
OI Pena, Joaquin /0000-0001-9216-9695
CR BRESCIANI P, 2004, J AUTONOMOUS AGENTS, V8
   BURRAFATO P, 2002, 4 INT BI C WORKSH AG
   Caire G., 2001, P 2 INT WORKSH AG OR, P101
   CASTELFRANCHI C, 2000, 14 EUR C ART INT, P353
   CASTELFRANCHI C, 1992, 3 EUR WORKSH MOD AUT
   Clements P.C., 2001, SEI SERIES SOFTWARE
   Czarnecki K., 2000, GENERATIVE PROGRAMMI
   D'Souza D.F., 1999, OBJECTS COMPONENTS F
   DARDENNE A, 1993, SCI COMPUT PROGRAM, V20, P3, DOI 10.1016/0167-6423(93)90021-G
   Deloach SA, 2001, INT J SOFTW ENG KNOW, V11, P231, DOI 10.1142/S0218194001000542
   Ferber J., 2003, LNCS, V2935, P214, DOI DOI 10.1007/978-3-540-24620-6_
   Harsu M., 2002, 31 TAMP U TECHN I SO
   Jansen AGJ, 2004, IEE PROC-SOFTW, V151, P187, DOI 10.1049/ip-sen:20040922
   Jennings NR, 2001, COMMUN ACM, V44, P35, DOI 10.1145/367211.367250
   JENNINGS NR, 1999, P 9 EUR WORKSH MOD A, V1647, P1
   Kang K, 1990, CMUSEI90TR021
   Kendall EA, 2000, IEEE CONCURR, V8, P34, DOI 10.1109/4434.846192
   KENDALL EA, 1998, P 3 EUR C PATT LANG
   Mintzberg H., 1978, STRUCTURING ORG
   PARUNAK HVD, 2003, LNCS, V2935, P123
   Pavon J, 2003, LECT NOTES ARTIF INT, V2691, P394
   PENA J, 2005, THESIS U SEVILLE
   Reenskaug T., 1996, WORKING OBJECTS OORA
   SICHMAN JS, 1994, 11 EUR C ART INT, P416
   Smaragdakis Y, 2002, ACM T SOFTW ENG METH, V11, P215, DOI 10.1145/505145.505148
   Wooldridge Michael, 1995, KNOWL ENG REV, V10, P115
   ZAMBONELLI F, 2003, IN PRESS ACM T SOFTW
NR 27
TC 2
Z9 3
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-540-69265-2
J9 LECT NOTES ARTIF INT
PY 2006
VL 3825
BP 98
EP 108
PG 11
WC Computer Science, Artificial Intelligence
SC Computer Science
GA BFT99
UT WOS:000244581800009
ER

PT S
AU Collet, P
AF Collet, Philippe
BE Margaria, T
   Steffen, B
TI Domain Specific Languages for Managing Feature Models: Advances and
   Challenges
SO Leveraging Applications of Formal Methods, Verification and Validation:
   Technologies for Mastering Change, Pt I
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 6th International Symposium on Leveraging Applications of Formal
   Methods, Verification and Validation (ISoLA)
CY OCT 08-11, 2014
CL Imperial, GREECE
ID VARIABILITY
AB Managing multiple and complex feature models is a tedious and error-prone activity in software product line engineering. Despite many advances in formal methods and analysis techniques, the supporting tools and APIs are not easily usable together, nor unified. In this paper, we report on the development and evolution of the Familiar Domain-Specific Language (DSL). Its toolset is dedicated to the large scale management of feature models through a good support for separating concerns, composing feature models and scripting manipulations. We overview various applications of Familiar and discuss both advantages and identified drawbacks. We then devise salient challenges to improve such DSL support in the near future.
C1 Univ Nice Sophia Antipolis, CNRS, I3S, UMR 7271, F-06900 Sophia Antipolis, France.
RP Collet, P (reprint author), Univ Nice Sophia Antipolis, CNRS, I3S, UMR 7271, F-06900 Sophia Antipolis, France.
EM Philippe.Collet@unice.fr
CR Abbasi E.K., 2014, 17 EUR C SOFTW MAINT
   Abo Zaid L., 2010, LNCS, V6412, P233
   Acher M, 2010, LECT NOTES COMPUT SC, V5969, P62
   Acher M., 2013, SOFTWARE SYSTEMS MOD, V27
   Acher M, 2010, LECT NOTES COMPUT SC, V6138, P3, DOI 10.1007/978-3-642-13595-8_3
   Acher M., 2012, AOSD 2012 ACM
   Acher M., 2013, VAMOS 2013 ACM
   Acher M., 2012, VAMOS, P45
   Acher M., 2011, SOFTWARE QUALITY J
   Acher M, 2013, LECT NOTES COMPUT SC, V8107, P352, DOI 10.1007/978-3-642-41533-3_22
   Acher M., 2012, LNCS, V7328, P629
   Acher M., 2011, P ASE 2011 ACM
   Acher M, 2013, SCI COMPUT PROGRAM, V78, P657, DOI 10.1016/j.scico.2012.12.004
   Acher M, 2011, 2011 16TH IEEE INTERNATIONAL CONFERENCE ON ENGINEERING OF COMPLEX COMPUTER SYSTEMS (ICECCS), P77, DOI 10.1109/ICECCS.2011.15
   Andersen N., 2012, P SPLC 2012, P97
   Apel S., 2009, J OBJECT TECHNOLOGY, V8, P49
   Bak K, 2011, LECT NOTES COMPUT SC, V6563, P102, DOI 10.1007/978-3-642-19440-5_7
   Benavides D., 2010, INFORM SYST, V35, P2010
   Chafi H., 2010, P ACM INT C OBJ OR P
   Classen A, 2011, SCI COMPUT PROGRAM, V76, P1130, DOI 10.1016/j.scico.2010.10.005
   Clements P, 2001, SOFTWARE PRODUCT LIN
   Cordy M., 2013, P 17 INT SOFTW PROD, P141
   Czarnecki K, 2007, SPLC 2007: 11TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P23
   Dhungana D, 2010, J SYST SOFTWARE, V83, P1108, DOI 10.1016/j.jss.2010.02.018
   Dhungana D., 2011, IEEE
   Dintzner N., 2014, P 8 INT WORKSH VAR M, P22
   Erdweg S, 2013, LECT NOTES COMPUT SC, V8225, P197, DOI 10.1007/978-3-319-02654-1_11
   Fowler M, 2010, DOMAIN SPECIFIC LANG
   Haugen O., 2013, P 17 INT SOFTW PROD, P277
   Hermans F, 2009, LECT NOTES COMPUT SC, V5795, P423
   Hubaux A., 2012, ACM COMPUTING SURVEY
   Kang KC, 1998, ANN SOFTW ENG, V5, P143, DOI 10.1023/A:1018980625587
   Kosar T, 2012, EMPIR SOFTW ENG, V17, P276, DOI 10.1007/s10664-011-9172-x
   Krikava F., 2014, S APPL COMP SAC PROG
   Logre I, 2014, LECT NOTES COMPUT SC, V8569, P101
   Mendonca M., 2009, OOPSLA 2009 COMP
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   Metzger A, 2007, INT REQUIR ENG CONF, P243, DOI 10.1109/RE.2007.61
   Pohl K., 2005, SOFTWARE PRODUCT LIN
   Pohl R., 2011, P 26 IEEE ACM INT C, P313
   Schobbens PY, 2007, COMPUT NETW, V51, P456, DOI 10.1016/j.comnet.2006.08.008
   Thum T, 2009, PROC INT CONF SOFTW, P254, DOI 10.1109/ICSE.2009.5070526
   Thum TH, 2012, SCI COMPUTER PROGRAM
   Trinidad P, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P359, DOI 10.1109/SPLC.2008.50
   Urli S., 2013, 4 INT WORKSH PROD LI, P4
NR 45
TC 2
Z9 2
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-662-45234-9; 978-3-662-45233-2
J9 LECT NOTES COMPUT SC
PY 2014
VL 8802
BP 273
EP 288
PG 16
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BC0GO
UT WOS:000349021200020
ER

PT S
AU Barat, S
   Kulkarni, V
AF Barat, Souvik
   Kulkarni, Vinay
BE Daniel, F
   Barkaoui, K
   Dustdar, S
TI A Component Abstraction for Business Processes
SO BUSINESS PROCESS MANAGEMENT WORKSHOPS, PT II
SE Lecture Notes in Business Information Processing
LA English
DT Proceedings Paper
CT 9th International Conference on Business Process Management (BPM 2011)
CY AUG 29, 2011
CL Clermont Ferrand, FRANCE
DE Business process component; business process family; business process
   reuse
ID FLEXIBILITY; LANGUAGE; SERVICE; MODEL
AB With continued increase in business dynamics. it is becoming increasingly harder to deliver purpose-specific business system in the ever-shrinking window of opportunity. As business systems for the same intent tend to be similar but never the same, they have considerable overlap with well-defined differences. Software product line engineering techniques attempt to address this problem for software artifacts. Separation of business process concerns from application functionality, as advocated in process centric application development, demands solution on similar lines for business processes too. To this effect. we propose an abstraction for business processes that addresses composition, variability and resolution in a unified manner. We present the abstraction, its model-based realization, and illustration with an example.
C1 [Barat, Souvik; Kulkarni, Vinay] Tata Consultancy Serv, Pune, Maharashtra, India.
RP Barat, S (reprint author), Tata Consultancy Serv, 54-B Ind Estate, Pune, Maharashtra, India.
EM souvik.barat@tcs.com; vinay.vkulkarni@tcs.com
CR Adams M, 2006, LECT NOTES COMPUT SC, V4275, P291
   Barros A, 2007, LECT NOTES COMPUT SC, V4439, P29
   Bruneton E, 2006, SOFTWARE PRACT EXPER, V36, P1257, DOI 10.1002/spe.767
   Busch C., 2004, LNCS, V3154, P266
   Eberle H, 2009, LECT NOTES COMPUT SC, V5870, P398, DOI 10.1007/978-3-642-05148-7_29
   Fantinato M, 2008, INT J COOP INF SYST, V17, P373, DOI 10.1142/S0218843008001889
   Gottschalk F., 2007, INT J COOPER INFORM, V17, P177
   HALLERBACH A, 2008, 10 INT C ENT INF SYS, P154
   Kindler E., 2006, AMFIBIA METAMODEL IN
   Kulkarni V, 2011, LECT NOTES BUS INF P, V66, P314
   Kulkarni V., 2010, FOSD 2010, P72
   La Rosa M, 2011, INFORM SYST, V36, P313, DOI 10.1016/j.is.2010.07.001
   OMG, 2010, DTC100604 OMG
   PESIC M, 2007, EDOC, P287
   Pesic M, 2006, LECT NOTES COMPUT SC, V4103, P169
   Polyvyanyy A, 2009, LECT NOTES COMPUT SC, V5701, P229
   Rosemann M, 2007, INFORM SYST, V32, P1, DOI 10.1016/j.is.2005.05.003
   Schnieders A., 2006, LNI, V85, P583
   Schumm D., 2011, J SYSTEMS INTEGRATIO, V2
   Sunbul A., 2001, J INTEGRATED DESIGN, V5, P13
   van der Aalst WMP, 1999, INFORM SOFTWARE TECH, V41, P639, DOI 10.1016/S0950-5849(99)00016-6
   van der Aalst WMP, 2005, INFORM SYST, V30, P245, DOI 10.1016/j.is.2004.02.002
   van der Aalst WMP, 2009, LECT NOTES COMPUT SC, V5667, P319, DOI 10.1007/978-3-642-04205-8_27
NR 23
TC 1
Z9 1
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 1865-1348
BN 978-3-642-28114-3
J9 LECT NOTES BUS INF P
PY 2012
VL 100
BP 301
EP 313
PG 13
WC Computer Science, Information Systems; Computer Science,
   Interdisciplinary Applications; Computer Science, Software Engineering
SC Computer Science
GA BCM77
UT WOS:000310717000029
ER

PT S
AU Bachmeyer, RC
   Delugach, HS
AF Bachmeyer, Randall C.
   Delugach, Harry S.
BE Priss, U
   Polovina, S
   Hill, R
TI A conceptual graph approach to feature modeling
SO Conceptual Structures: Knowledge Architectures for Smart Applications,
   Proceedings
SE LECTURE NOTES IN ARTIFICIAL INTELLIGENCE
LA English
DT Proceedings Paper
CT 15th International Conference on Conceptual Structures (ICCS 2007)
CY JUL 22-27, 2007
CL Sheffield, ENGLAND
SP Sheffield Hallan Univ, Cultural, Communicat & Comp Res Inst, EU IST MOSIACA Project, Inst Engn & Technol, S Yorkshire Network, Univ Sheffield, Nat Language Proc Res Grp, Dept Comp Sci, British Comp Soc, S Yorkshire Branch
HO Sheffield Hallam Univ
AB A software product-line is a set of products built from a core set of software components. Although software engineers develop software product-lines for various application types, they are most commonly used for embedded systems development, where the variability of hardware features requires variability in the supporting firmware. Feature models are used to represent the variability in these software product-lines. Various feature modeling approaches have been proposed, including feature diagrams, domain specific languages, constraint languages, and the semantic web language OWL. This paper explores a conceptual graph approach to feature modeling in an effort to produce feature models that have a more natural, and more easily expressed mapping to the problem domain. It demonstrates the approach using a standard Graph Product-line problem that has been discussed in various software product-line papers. A conceptual graph feature model is developed for the graph product-line and it is compared to other feature models for this product-line.
C1 Univ Alabama, Dept Comp Sci, Huntsville, AL 35899 USA.
RP Bachmeyer, RC (reprint author), Univ Alabama, Dept Comp Sci, N300 Technol Hall, Huntsville, AL 35899 USA.
CR BATORY D, 2005, P SOFTW PROD LIN C
   BEUCHE D, 2003, THESIS OTTO VON GUER
   Brooks Fred P., 1987, IEEE COMPUT, V20, P10, DOI DOI 10.1109/MC.1987.1663532
   BUHNE S, 2004, P WORKSH AUT REQ ENG
   Czarnecki K., 2000, GENERATIVE PROGRAMMI
   CZARNECKI K, 2005, STAGED CONFIGURATION, V10
   CZARNECKI K, 2005, LNCS, V3566, P313
   Czarnecki K., 2006, P 10 INT SOFTW PROD, P41
   Czarnecki K., 2005, INT WORKSH SOFTW FAC
   de Jonge M., 2002, ICSR7 WORKSH GEN PRO, P23
   Greenfield J., 2004, SOFTWARE FACTORIES
   Kang K., 1990, CMUSEI90TR21
   LEVENSON NG, 2001, AIAA 2001 C EXH NEW
   LOPEZHERREJON RE, 2001, LNCS, V2186, P9
   Peng X, 2006, LECT NOTES COMPUT SC, V4039, P87
   Sowa J. F., 1984, CONCEPTUAL STRUCTURE
   Wang H., 2005, WORKSH SEM WEB EN SO
   ZAVE P, FAQ SHEET FEATURE IN
NR 18
TC 1
Z9 1
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-540-73680-6
J9 LECT NOTES ARTIF INT
PY 2007
VL 4604
BP 179
EP 191
PG 13
WC Computer Science, Artificial Intelligence
SC Computer Science
GA BGN62
UT WOS:000248692300014
ER

PT J
AU Laguna, MA
   Finat, J
AF Laguna, Miguel A.
   Finat, Javier
BE Bravo, J
   Hervas, R
   Villarreal, V
TI Remote Monitoring and Fall Detection: Multiplatform Java Based Mobile
   Applications
SO AMBIENT ASSISTED LIVING
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 3rd International Workshop on Ambient Assisted Living (IWAAL)/IWANN
CY JUN 08-10, 2011
CL Torremolinos, SPAIN
DE remote monitoring; fall detection; mobile application
ID PRODUCT LINES
AB Life quality of dependent persons is associated with personal autonomy and mobility, between others parameters. But the development of mobile applications for autonomy support is a challenging activity. Some of the challenges are the diversity of target platforms (including display sizes, keypads or tactile screens variations in each platform), and the limits in memory size, processing resources, battery duration, etc. For these reasons, a software product line (SPL) approach can provide a considerable advantage in mobile application development. This article presents a SPL that makes possible the remote monitoring of dependent people to facilitate their autonomy. Wireless sensors allow real-time information such as heart rate or oxygen saturation level to be controlled. Risk situations, including fall detection, critical in elderly persons who live alone, can also be detected. In the SPL approach, only the required features are incorporated in each concrete product (avoiding the device overload with a resource-costly extensive solution). The article presents an Android/Symbian based SPL architecture, using Bluetooth wireless sensors connected to a Smartphone. The mobile system is able to detect alarm situations and is remotely connected to a central system, aimed for its use in elderly residences.
C1 [Laguna, Miguel A.] Univ Valladolid, GIRO Res Grp, E-47011 Valladolid, Spain.
RP Laguna, MA (reprint author), Univ Valladolid, GIRO Res Grp, Campus M Delibes, E-47011 Valladolid, Spain.
EM mlaguna@infor.uva.es; jfinat@agt.uva.es
RI Laguna, Miguel A./F-9886-2010
CR Alves V, 2005, LECT NOTES COMPUT SC, V3714, P70
   Anastasopoulos M, 2004, LECT NOTES COMPUT SC, V3107, P141
   [Anonymous], 2011, FEAT ECL PLUG FEAT O
   Bosch J., 2000, ADOPTING EVOLVING PR
   Cho H., 2008, INT C ADV COMM TECHN, P118
   Ericsson, ER MOB HLTH
   Laguna M.A., 2007, GPCE 2007
   Laguna M.A., 2010, P ICSOFT 2010
   Laguna MA, 2009, LECT NOTES COMPUT SC, V5518, P727, DOI 10.1007/978-3-642-02481-8_110
   Lubrin E, 2005, ICMB 2005: International Conference on Mobile Business, P235, DOI 10.1109/ICMB.2005.115
   Morais Y., 2010, ITNG 2010 7 INT C IN
   Nonin, 2011, PULS OX MON
   Salva A, 2004, MED CLIN-BARCELONA, V122, P172, DOI 10.1157/13057813
   Sochos P, 2004, LECT NOTES COMPUT SC, V3263, P138
   Tocino AV, 2009, STUD COMP INTELL, V226, P465
   WiTilt, 2011, SPARKFUN EL
NR 16
TC 1
Z9 1
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-642-21303-8
J9 LECT NOTES COMPUT SC
PY 2011
VL 6693
BP 1
EP 8
PG 8
WC Computer Science, Information Systems; Computer Science, Theory &
   Methods
SC Computer Science
GA BAW90
UT WOS:000305883500001
ER

PT S
AU Olimpiew, EM
   Gomaa, H
AF Olimpiew, Erika Mir
   Gomaa, Hassan
BE Edwards, SH
   Kulczycki, G
TI Reusable Model-Based Testing
SO FORMAL FOUNDATIONS OF REUSE AND DOMAIN ENGINEERING, PROCEEDINGS
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 11th International Conference on Software Reuse (ICSR 2009)
CY SEP 27-30, 2009
CL Falls Church, VA
SP Virginia Tech, Int Soc Adv Software Educ, Natl Sci Fdn, Software Generators, Reuse Software Engn, Pohang Univ Sci & Tedchnol
DE Reuse; model-based testing; requirements; software product lines;
   feature model; use case model; activity diagrams; decision tables
ID SYSTEM
AB A reusable model-based testing method for software product lines (SPL) is used to create test specifications from use case and feature models, which can then be configured to test individual applications that are members of the SPL. This paper describes feature-oriented model-based testing method for SPLs that can be used to reduce the number of reusable test specifications created to cover all use case scenarios, all features, and selected feature combinations of a SPL. These test specifications can be automatically selected and configured during feature-based test derivation to test a given application derived from the SPL. This paper also addresses what application configurations to test and how to configure test specifications for these applications. This model-based testing method was applied and evaluated on two SPL case studies.
C1 [Olimpiew, Erika Mir; Gomaa, Hassan] George Mason Univ, Dept Comp Sci, Fairfax, VA 22030 USA.
RP Olimpiew, EM (reprint author), George Mason Univ, Dept Comp Sci, Fairfax, VA 22030 USA.
EM eolimpie@gmu.edu; hgomaa@gmu.edu
CR BERTOLINO A, 2003, SOFTWARE PRODUCT FAM
   Cohen DM, 1997, IEEE T SOFTWARE ENG, V23, P437, DOI 10.1109/32.605761
   GEPPERT BJ, 2004, 8 INT C SOFTW REUS M
   Gomaa H., 2005, DESIGNING SOFTWARE P
   GOMAA H, 2008, P 10 INT C SOFTW REU
   Kang K. C., 1990, FEATURE ORIENTED DOM
   McGregor J. D., 2001, TESTING SOFTWARE PRO
   NEBUT C, 2003, SOFTWARE PRODUCT FAM
   Reuys A, 2005, LECT NOTES COMPUT SC, V3520, P519
   SCHEIDEMANN K, 2006, 10 INT SOFTW PROD LI
NR 10
TC 1
Z9 1
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-642-04210-2
J9 LECT NOTES COMPUT SC
PY 2009
VL 5791
BP 76
EP 85
PG 10
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BPG30
UT WOS:000278805800008
ER

PT J
AU Hanssen, GK
AF Hanssen, Geir K.
TI Agile software product line engineering: enabling factors
SO SOFTWARE-PRACTICE & EXPERIENCE
LA English
DT Article
DE software product line engineering; agile software development;
   qualitative research; industrial case study
ID INFORMATION-SYSTEMS; USER INVOLVEMENT; INNOVATION; DESIGN
AB This paper reports on a study of a software product line organization that has adopted agile software development to address process rigidity and slowing performance. Experience has showed that despite some impediments, this has become a valuable change to both the organization and its development process. The aim of this study is to identify and understand enabling factors of a combined process, and to understand their subsequent effects. Qualitative data are summarized and analyzed, giving insight into the actions taken, their effects that have emerged over time, and the enabling and contextual factors. The study concludes that a combined process is feasible, that the simplified approach makes the organization more flexible and thus capable of serving a volatile market with fast-changing technologies. This has also enabled the organization to collaborate better with external actors. Copyright (C) 2011 John Wiley & Sons, Ltd.
C1 [Hanssen, Geir K.] Norwegian Univ Sci & Technol, NO-7491 Trondheim, Norway.
   [Hanssen, Geir K.] SINTEF ICT, NO-7465 Trondheim, Norway.
RP Hanssen, GK (reprint author), Norwegian Univ Sci & Technol, Sem Saelands Vei 7-9, NO-7491 Trondheim, Norway.
EM ghanssen@sintef.no
FU Research Council of Norway [174390/I40, 179851/I40]
FX The authors are grateful to the people at CSoft for sharing their
   precious time, providing highly valuable input to this study. This work
   was done as part of the EVISOFT project (grant 174390/I40) and the Agile
   project (grant 179851/I40), both partly funded by the Research Council
   of Norway.
CR Ali Babar M., 2009, P 13 INT SOFTW PROD, P171
   Beck K, 2004, EXTREME PROGRAMMING, V2nd
   Beck K., 2000, EXTREME PROGRAMMING
   BOCKLE G, 2005, P 9 INT C SOFTW PROD, P124
   Bosch J., 2009, P 13 INT SOFTW PROD, P111
   Carbon R., 2006, P 1 INT WORKSH AG PR, P1
   CHESBROUGH HW, 2003, MIT SOLAN MANAGEMENT, V44, P9
   Clements P, 2002, SOFTWARE PRODUCT LIN
   Cockburn A., 2002, AGILE SOFTWARE DEV S
   COCKBURN A, 2005, AGILE SOFTWARE DEV S
   Cusumano M., 2006, PRODUCT PROCESS SERV
   DAFT RL, 1987, MIS QUART, V11, P355, DOI 10.2307/248682
   Damodaran L, 1996, BEHAV INFORM TECHNOL, V15, P363, DOI 10.1080/014492996120049
   Dubey A., 2007, DELIVERING SOFTWARE
   ECKSTEIN J, 2004, AGILE SOFTWARE DEV L, P234
   Enkel E, 2009, R&D MANAGE, V39, P311
   Faegri TE, 2007, IEEE SOFTWARE, V24, P96, DOI 10.1109/MS.2007.68
   GHANAM Y, 2008, P SOFTW PROD LIN C S
   GILB T, 2005, COMPETITIVE ENG HDB, P480
   GRUNBACHER P, 2001, P 34 HAW INT C SYST, P1
   Hanssen GK, 2008, J SYST SOFTWARE, V81, P843, DOI 10.1016/j.jss.2007.10.025
   Hanssen G. K., 2010, P 2010 ICSE WORKSH P, P1, DOI 10.1145/1808937.1808938
   HANSSEN GK, 2006, P 5 INT S EMP SOFTW, P164, DOI 10.1145/1159733.1159759
   Hanssen GK, 2009, PROC IEEE INT CONF S, P487, DOI 10.1109/ICSM.2009.5306278
   Hanssen GK, 2012, J SYST SOFTWARE, V85, P1455, DOI 10.1016/j.jss.2011.04.020
   Johansen T, 2005, LECT NOTES COMPUT SC, V3547, P216
   KEIL M, 1995, COMMUN ACM, V38, P33, DOI 10.1145/203356.203363
   Klein HK, 1999, MIS QUART, V23, P67, DOI 10.2307/249410
   LARMAN C, 2008, SCALING LEAN AGILE D, P348
   LARMAN C, 2003, AGILE SOFTWARE DEV S
   LEFFINGWELL D, 2007, AGILE SOFTWARE DEV S, P349
   Lettl C, 2007, J ENG TECHNOL MANAGE, V24, P53, DOI 10.1016/j.jengtecman.2007.01.004
   MARCH JG, 1991, ORGAN SCI, V2, P16
   McGregor J.D., 2008, J OBJECT TECHNOLOGY, V7, P7
   MESSERSCHMITT DG, 2003, SOFTWARE ECOSYSTEMS, P424
   MOE NB, 2002, P EUR SOFTW PROC IMP, P177
   Noor MA, 2008, J SYST SOFTWARE, V81, P868, DOI 10.1016/j.jss.2007.10.028
   Pohl K., 2005, SOFTWARE PRODUCT LIN
   Reel JS, 1999, IEEE SOFTWARE, V16, P18, DOI 10.1109/52.765782
   Sanchez R, 1996, STRATEGIC MANAGE J, V17, P63
   Sawhney M, 2005, J INTERACT MARK, V19, P4, DOI 10.1002/dir.20046
   Schwaber K., 2001, AGILE SOFTWARE DEV S, V1st
   Seaman CB, 1999, IEEE T SOFTWARE ENG, V25, P557, DOI 10.1109/32.799955
   TIAN K, 2006, P 1 INT WORKSH AG PR
   Trist E, 1977, AUSTR J MANAGEMENT, V2, P161
   Von Hippel E., 2005, DEMOCRATIZING INNOVA
   VONHIPPEL E, 1986, MANAGE SCI, V32, P791, DOI 10.1287/mnsc.32.7.791
   Wohlin C., 2000, KLUWER INT SERIES SO
   Yin R K, 2002, CASE STUDY RES
   Zook C., 2010, PROFIT CORE RETURN G
NR 50
TC 1
Z9 1
PU WILEY-BLACKWELL
PI MALDEN
PA COMMERCE PLACE, 350 MAIN ST, MALDEN 02148, MA USA
SN 0038-0644
J9 SOFTWARE PRACT EXPER
JI Softw.-Pract. Exp.
PD JUL
PY 2011
VL 41
IS 8
SI SI
BP 883
EP 897
DI 10.1002/spe.1064
PG 15
WC Computer Science, Software Engineering
SC Computer Science
GA 777DW
UT WOS:000291596600003
ER

PT J
AU Riva, C
   Selonen, P
   Systa, T
   Xu, JL
AF Riva, Claudio
   Selonen, Petri
   Systa, Tarja
   Xu, Jianli
TI A profile-based approach for maintaining software architecture: an
   industrial experience report
SO JOURNAL OF SOFTWARE MAINTENANCE AND EVOLUTION-RESEARCH AND PRACTICE
LA English
DT Article
DE software product-lines; software architectures; software maintenance
AB This paper presents our experiences in building a UML-based approach for maintaining software products of a large-scale industrial product family. It enables software architects to define rules and constraints for a product family architecture to be enforced on individual product architectures. The target system of our study was the Nokia ISA platform for a mobile phone product family, a complex software system comprising thousands of components and several million lines of code. We outline our approach and the accompanying tools, and report our experiences and lessons learned in assessing the architectural integrity of 10 ISA platform releases and the associated products. Copyright (c) 2009 John Wiley & Sons, Ltd.
C1 [Selonen, Petri; Systa, Tarja] Tampere Univ Technol, FI-33101 Tampere, Finland.
   [Riva, Claudio; Selonen, Petri; Xu, Jianli] Nokia Res Ctr, FI-33721 Tampere, Finland.
RP Systa, T (reprint author), Tampere Univ Technol, POB 553, FI-33101 Tampere, Finland.
EM tarja.systa@tut.fi
FU ITEA [if04032, ip02009]; Academy of Finland
FX Contract/grant sponsor: ITEA; contract/grant numbers: if04032,
   ip02009Contract/grant sponsor: Academy of Finland
CR Dikel D, 1997, COMPUTER, V30, P49, DOI 10.1109/2.607064
   LUNG CH, 1997, CASCON 97 P IBM CTR, P1
   *OBJ MAN GROUP, 2007, UN MOD LANG SPEC UML
   RIVA C, 2004, THESIS VIENNA U TECH
   Riva C, 2004, PROC IEEE INT CONF S, P50, DOI 10.1109/ICSM.2004.1357789
   Riva C., 2004, Proceedings. Fourth Working IEEE/IFIP Conference on Software Architecture (WICSA 2004), DOI 10.1109/WICSA.2004.1310702
   SELONEN P, 2003, ESEC 2003, P58
   SELONEN P, 2005, THESIS TAMPERE U TEC
   SIY H, 1998, ICSE 98 WORKSH P INT
   Svahnberg M, 1999, J SOFTW MAINT-RES PR, V11, P391, DOI 10.1002/(SICI)1096-908X(199911/12)11:6<391::AID-SMR199>3.0.CO;2-8
   van Deursen A, 2004, FOURTH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE (WICSA 2004), PROCEEDINGS, P122
NR 11
TC 1
Z9 1
PU WILEY-BLACKWELL
PI MALDEN
PA COMMERCE PLACE, 350 MAIN ST, MALDEN 02148, MA USA
SN 1532-060X
J9 J SOFTW MAINT EVOL-R
JI J. Softw. Maint. Evol.-Res. Pract.
PD JAN
PY 2011
VL 23
IS 1
BP 3
EP 20
DI 10.1002/smr.411
PG 18
WC Computer Science, Software Engineering
SC Computer Science
GA 721HL
UT WOS:000287344100002
ER

PT S
AU Lisboa, LB
   Nascimento, LM
   de Almeida, ES
   Meira, RD
AF Lisboa, Liana Barachisio
   Nascimento, Leandro Marques
   de Almeida, Eduardo Santana
   Meira, Romero de Lemos
BE Saiedian, H
   Williams, L
TI A case study in Software Product Lines: An educational experience
SO 21ST CONFERENCE ON SOFTWARE ENGINEERING EDUCATION AND TRAINING,
   PROCEEDINGS
SE Conference on Software Engineering Education and Training
LA English
DT Proceedings Paper
CT 21st Conference on Software Engineering Education and Training
CY APR 14-17, 2008
CL Charleston, SC
SP IEEE CS Tech Council Software Engn
AB In order to attend the industry needs, it is necessary to provide more practical issues of real software development in the academic curricula. This paper describes an educational experience in a post-graduation course at Federal University of Pernambuco, Brazil, involving software reuse. The course's goals were to provide the state-of-the-art of software development with reuse, and the state-of-the-practice developing the Software Product Line (SPL) approach based on a real project. Moreover, we describe the SPL process steps and the educational methodology applied, as well as the project's difficulties and lessons learned, along with possible improvements for the course extracted from students' feedback during the course and the project. We also expect that this work can be used as a reference material for other universities planning on teaching software reuse or SPL courses.
C1 Univ Fed Pernambuco, Recife, PE, Brazil.
RP Lisboa, LB (reprint author), Univ Fed Pernambuco, Recife, PE, Brazil.
EM lbl2@cin.ufpe.br; lmn2@cin.ufpe.br; esa2@cin.ufpe.br; srlm@cin.ufpe.br
CR ALMEIDA ES, 2007, THESIS FEDERAL U PER, P257
   Bayer J., 1999, SSR'99. Proceedings of the Fifth Symposium on Software Reusability. Bridging the Gap Between Research and Practice
   BUHRDORF R, 2003, INT WORKSH SOFTW PRO, P317
   CLEMENTS P, 2002, SOFTWARE PRODUCT LIN, P608
   Frakes WB, 2005, IEEE T SOFTWARE ENG, V31, P529, DOI 10.1109/TSE.2005.85
   Gamma E., 1995, DESIGN PATTERNS ELEM, P395
   JARING M, 2002, REPRESENTING VARIABI, P15
   Kang K., 1990, CMUSEI90TR21
   Krueger C.W., 1992, ACM COMPUT SURV, V24, P131, DOI 10.1145/130844.130856
   Moon M, 2005, IEEE T SOFTWARE ENG, V31, P551
   Myllarniemi V., 2006, INT C SOFTW REUS, P73
   Shaw M., 2000, P C FUT SOFTW ENG, P371, DOI 10.1145/336512.336592
   STEGER M, 2004, INTRO PLA BOSCH GASO, P34
   TVEDT JD, 2001, INT C SOFTW ENG, P633
NR 14
TC 1
Z9 1
PU IEEE COMPUTER SOC
PI LOS ALAMITOS
PA 10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA
SN 1093-0175
BN 978-0-7695-3144-1
J9 CONF SOFTW ENG EDUC
PY 2008
BP 155
EP 162
DI 10.1109/CSEET.2008.17
PG 8
WC Computer Science, Software Engineering; Engineering, Electrical &
   Electronic
SC Computer Science; Engineering
GA BHZ31
UT WOS:000257643000019
ER

PT S
AU Daramola, OJ
AF Daramola, Olawande J.
BE Daniel, F
   Facca, FM
TI A Process Framework for Semantics-Aware Tourism Information Systems
SO CURRENT TRENDS IN WEB ENGINEERING
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 10th International Conference on Web Engineering
CY JUL 05-09, 2010
CL Vienna, AUSTRIA
SP Vienna Univ Technol, Business Informat Grp, Austrian Comp Soc, Austrian Fed Minist Sci & Res, Austrian Fed Minist Transport, Innovat & Technol, Vienna Convent Bur, SIEMENS AG, Google, Austrian Airlines
DE Product line; Web engineering; Software Process Improvement; Tourism
   Information System; Semantic Web; Software product development
AB The growing sophistication of user requirements in tourism due to the advent of new technologies such as the Semantic Web and mobile computing has imposed new possibilities for improved intelligence in Tourism Information Systems (TIS). Traditional software engineering and web engineering approaches cannot suffice, hence the need to find new product development approaches that would sufficiently enable the next generation of TIS. The next generation of TIS are expected among other things to: enable semantics-based information processing, exhibit natural language capabilities, facilitate inter-organization exchange of information in a seamless way, and evolve proactively in tandem with dynamic user requirements. In this paper, a product development approach called Product Line for Ontology-based Semantics-Aware Tourism Information Systems (PLOSATIS) which is a novel hybridization of software product line engineering, and Semantic Web engineering concepts is proposed. PLOSATIS is presented as potentially effective, predictable and amenable to software process improvement initiatives.
C1 Covenant Univ, Dept Comp & Informat Sci, Ota, Nigeria.
RP Daramola, OJ (reprint author), Covenant Univ, Dept Comp & Informat Sci, Ota, Nigeria.
EM jodaramola@covenantuniversity.com
CR AHMED F, 2005, J INF TECHNOL, V7, P135
   Basili V., 1994, ENCY SOFTWARE ENG, P528
   Bockle G, 2004, IEEE SOFTWARE, V21, P23
   Boehm B. W., 2000, SOFTWARE COST ESTIMA, VII
   Clements P., 2002, SEI SERIES SOFTWARE
   DARAMOLA O, 2009, ENTER 2009 AMST NETH, P135
   JIN Y, 2002, P INT C EXT DAT TECH, P766
   KANG KC, 1990, CMUSEI90TR21, P1
   Lima F., 2003, Proceedings. First Latin American Web Congress, DOI 10.1109/LAWEB.2003.1250287
   MAEDCHE A, 2002, P 9 INT C INF COMM T, P113
   Paslaru Bontas Simperl E., 2007, TECHNOLOGIES BUSINES, P327
   SCHWABE D, 2004, WWW WORKSH APPL DES
   Staab S, 2002, IEEE INTELL SYST, V17, P53
   STEINBAUER A, 2005, THESIS LUDWIG FRANZE
   TYRRELL S, 2000, ACM CROSSROADS   SUM
   Vdovjak R., 2003, J WEB ENG, V2, P3
   WERTHNER H, 1999, INFORM TECHNOLOGY TO, P23
NR 17
TC 1
Z9 1
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-642-16984-7
J9 LECT NOTES COMPUT SC
PY 2010
VL 6385s
BP 521
EP 532
PG 12
WC Computer Science, Information Systems; Computer Science, Software
   Engineering; Computer Science, Theory & Methods
SC Computer Science
GA BUV36
UT WOS:000290453500050
ER

PT J
AU Park, J
   Moon, M
   Yeom, K
AF Park, Joonseok
   Moon, Mikyeong
   Yeom, Keunhyuk
TI Two-Level Service-Oriented Architecture Based on Product-Line
SO IEICE TRANSACTIONS ON INFORMATION AND SYSTEMS
LA English
DT Article
DE SOA; service reuse; service variability; UDDI; service oriented
   development
ID VARIABILITY
AB Software product-line engineering is the successful reuse of technology when applied to component-based software development. The main concept and structure of this technology is developing reusable core assets by applying commonality and variability, and then developing new software reusing these core assets. Recently, the emergence of service-oriented environments, called SOA, has provided flexible reuse environments by reusing pre-developed component structure as service units; this is platform-independent and can integrate into heterogeneous environments. The core asset of an SOA is the service. Therefore, we can increase the reusability of an SOA by combining it with the concept of a product-line. These days, there exists research that combines SOA and product-lines, taking into account reusability. However, current research does not consider the interaction between the provider and consumer in SOA environments. Furthermore, this research tends to focus on more fragmentary aspects of product-line engineering, such as modeling and proposing variability in services. In this paper, we propose a mechanism named 2-Level SOA, including a supporting environment. This proposed mechanism deploys and manages the reusable service. In addition, by reusing and customizing this reusable service, we can develop and generate new services. Our proposed approach provides a structure to maximize the flexibility of SOA, develops services that consider systematic reuse, and constructs service-oriented applications by reusing this pre-developed reusable service. Therefore, our approach can increase both efficiency and productivity when developing service-oriented applications.
C1 [Park, Joonseok; Yeom, Keunhyuk] Pusan Natl Univ, Dept Comp Engn, Pusan 609735, South Korea.
   [Moon, Mikyeong] Dongseo Univ, Div Comp & Informat Engn, Pusan 617716, South Korea.
RP Yeom, K (reprint author), Pusan Natl Univ, Dept Comp Engn, Pusan 609735, South Korea.
EM pjs50@pusan.ac.kr
FU National Research Foundation of Korea; Korean Government (MEST)
   [NRF-2010-20100328000]
FX This work was supported by the National Research Foundation of Korea
   Grant funded by the Korean Government (MEST) (NRF-2010-20100328000). The
   authors would like to thank the members of software engineering lab in
   Pusan National University: Baek Sun-jae and Shin Soo-Hye for supporting
   this project.
CR Adam S., 2008, INT C COMP SOFTW APP, P631
   Boffoli N., 2009, INT SOFTW PROD LIN C
   Chang S., 2007, INT C SERV OR COMP A, P191, DOI 10.1109/SOCA.2007.2
   Clements P, 2002, SOFTWARE PRODUCT LIN
   Endrei M., 2004, SG24630300
   Erl Th., 2008, SOA PRINCIPLES SERVI
   Huhns MN, 2005, IEEE INTERNET COMPUT, V9, P75, DOI 10.1109/MIC.2005.21
   Jiang J., 2005, 3 IEEE EUR C WEB SER, P12
   Koning M, 2009, INFORM SOFTWARE TECH, V51, P258, DOI 10.1016/j.infsof.2007.12.002
   Mahmood S, 2007, IET SOFTW, V1, P57, DOI 10.1049/iet-sen:20060045
   Moon M, 2005, IEEE T SOFTWARE ENG, V31, P551
   Murugesupillai E., 2011, INT SOFTW PROD LIN C
   *OASIS, UN DESCR DISC INT UD
   OASIS, 2007, WEB SERV BUS PROC EX
   Papazoglou MP, 2007, VLDB J, V16, P389, DOI 10.1007/s00778-007-0044-3
   Park J., 2011, J KIISE SOFTWARE APP, V38
   Park J, 2011, J SYST SCI SYST ENG, V20, P193, DOI 10.1007/s11518-011-5164-z
   Park J, 2008, INT WKSHP FUT TR DIS, P37, DOI 10.1109/FTDCS.2008.24
   Park J., 2012, THESIS PUSAN NATL U
   Park J., 2008, J KIISE SOFTWARE APP, V35
   Park J., 2010, ACM S APPL COMP MARC, P2252
   Pohl K., 2005, SOFTWARE PRODUCT LIN
   Pour G., 1998, TECHNOLOGY OBJECT OR, V26, P376
   W3C, WEB SERV DESCR LANG
NR 24
TC 1
Z9 1
PU IEICE-INST ELECTRONICS INFORMATION COMMUNICATIONS ENG
PI TOKYO
PA KIKAI-SHINKO-KAIKAN BLDG MINATO-KU SHIBAKOEN 3 CHOME, TOKYO, 105, JAPAN
SN 0916-8532
J9 IEICE T INF SYST
JI IEICE Trans. Inf. Syst.
PD DEC
PY 2012
VL E95D
IS 12
BP 2971
EP 2981
DI 10.1587/transinf.E95.D.2971
PG 11
WC Computer Science, Information Systems; Computer Science, Software
   Engineering
SC Computer Science
GA 065KD
UT WOS:000313146300028
ER

PT J
AU Hoyos, H
   Casallas, R
   Jimenez, F
AF Hoyos, Horacio
   Casallas, Rubby
   Jimenez, Fernando
GP IEEE Industrial Electronics Society
TI Model-Based Framework for Embedded System Product Line
SO 38TH ANNUAL CONFERENCE ON IEEE INDUSTRIAL ELECTRONICS SOCIETY (IECON
   2012)
SE IEEE Industrial Electronics Society
LA English
DT Proceedings Paper
CT 38th Annual Conference on IEEE-Industrial-Electronics-Society (IECON )
CY OCT 25-28, 2012
CL Montreal, CANADA
SP IEEE, IEEE Ind Elect Soc (IES)
HO Univ Quebec, Ecole Technologie Superieure Montreal (ETS)
ID DESIGN
AB The use of reconfigurable platforms for embedded system design leverages product line engineering (PLE), in which the development of products starts from a set of core assets (the platform) rather than the development of individual products from zero. Two major activities of PLE are domain engineering (i.e., platform development) and product engineering (i.e., product customization) reusing the core assets. Virtual prototyping in PLE allows rapid validation of both the platform and individual products with greater benefits in development costs, time to market and quality. However, since virtual prototypes (VP) are implemented in low-level languages, if platform development and product engineering are done at this level, productivity is negatively affected. A commonly-accepted solution for closing this productivity gap is to raise the level of abstraction in the whole design process and to automate the implementation of VPs from the high-level descriptions. In this paper, we present the HiLeS2 Framework, which is based on Model Driven Software Product Lines (MD-SPL) concepts. HiLeS2 framework provides an environment for domain and product engineering, automated construction of VPs and creation of product line integrated development environments.
C1 [Hoyos, Horacio; Casallas, Rubby; Jimenez, Fernando] Univ Los Andes, Sch Engn, Bogota 111711, Colombia.
RP Hoyos, H (reprint author), Univ Los Andes, Sch Engn, Bogota 111711, Colombia.
EM hoyos95@uniandes.edu.co; rcasalla@uniandes.edu.co;
   fjimenez@uniandes.edu.co
CR Alur R., 2001, HIERARCHICAL HYBRID, V2211/2001
   Arboleda H., 2010, P BRAZ C SOFTW THEOR, P61
   Archer M, 2008, DES AUTOM EMBED SYST, V12, P139, DOI 10.1007/s10617-008-9022-2
   Clements P, 2001, SOFTWARE PRODUCT LIN
   Densmore D, 2006, IEEE DES TEST COMPUT, V23, P359, DOI 10.1109/MDT.2006.112
   Gamatie A., 2010, ACM T EMBED IN PRESS
   Gomez C., 2010, 36 ANN C IEEE IND EL
   Gruttner K., 2010, SPEC DES LANG 2010 I, P1
   Hamouche R., 2001, EUR C OBJ OR PROGR E
   Hoyos H., 2011, TMS DEVS 11, P75
   Kolovos DS, 2008, LECT NOTES COMPUT SC, V5063, P46, DOI 10.1007/978-3-540-69927-9_4
   Lee K, 2002, LECT NOTES COMPUT SC, V2319, P62
   Pohl K., 2005, SOFTWARE PRODUCT LIN
   Riccobene E, 2006, DES AUT CON, P915
   Taha S., 2007, P INT C FOR SPEC DES
NR 15
TC 1
Z9 1
PU IEEE
PI NEW YORK
PA 345 E 47TH ST, NEW YORK, NY 10017 USA
SN 1553-572X
BN 978-1-4673-2421-2
J9 IEEE IND ELEC
PY 2012
BP 3101
EP 3106
PG 6
WC Engineering, Industrial; Engineering, Electrical & Electronic
SC Engineering
GA BEJ69
UT WOS:000316962903012
ER

PT B
AU Dobrica, L
   Niemela, E
AF Dobrica, Liliana
   Niemela, Ella
BE Cordeiro, J
   Shishkov, B
   Ranchordas, A
   Helfert, M
TI A UML-based variability specification for product line architecture
   views
SO ICSOFT 2008: PROCEEDINGS OF THE THIRD INTERNATIONAL CONFERENCE ON
   SOFTWARE AND DATA TECHNOLOGIES, VOL SE/GSDCA/MUSE
LA English
DT Proceedings Paper
CT 3rd International Conference on Software and Data Technologies
CY JUL 05-08, 2008
CL Oporto, PORTUGAL
SP Inst Syst & Technologies Informat, Control & Commun, Workflow Management Coalit, Proc Thought Leadership, IICREST
DE software architecture; service; UML; product line; variability
AB In this paper we present a rigorous and practical notation for specifying variability in product line architecture views expressed in the Unified Modeling Language (UML). The notation has been used for the explicit representation of variations and their locations in software product line architectures based on a design method already established. The improvement consists in a service orientation of architectural models. The benefit of a more familiar and widely used notation facilitates a broader understanding of the architecture and enables more extensive tool support for manipulating it. The specification notation paves the way for the development of tools.
C1 [Dobrica, Liliana] Univ Politechn Bucharest, Fac Automat & Comp, Bucharest, Romania.
RP Dobrica, L (reprint author), Univ Politechn Bucharest, Fac Automat & Comp, Spl Independentei 313, Bucharest, Romania.
RI Dobrica, Liliana/E-1854-2015; Ovaska, Eila/
OI Ovaska, Eila/0000-0003-2114-3257
CR Atkinson C., 2000, P 1 SOFTW PROD LIN C, P289
   CORIAT M, 2000, P 1 SOFTW PROD LIN C, P147
   DOBRICA L, 2008, P SERP 2008 IN PRESS
   ELKAIM W, 2000, P SPLC
   GOMAA H, 2003, P SVM
   Gomaa H, 2002, LECT NOTES COMPUT SC, V2319, P78
   Jacobson I, 1997, SOFTWARE REUSE ARCHI
   MATINLASSI M, 2002, VTT PUBLICATIONS, V456
   MCCOMAS D, 2000, P SPLCI PLA WORKSH
   *OMG, 2003, OMG UN MOD LANG SPEC
   PURHONEN A, 2004, J SYSTEMS SOFTWARE
   WEBBER D, 2002, LNCS, V2319
   RATIONAL ROSE REALTI
NR 13
TC 1
Z9 1
PU INSTICC-INST SYST TECHNOLOGIES INFORMATION CONTROL & COMMUNICATION
PI SETUBAL
PA AVENIDA D MANUEL L, 27A 2 ESQUERDO, SETUBAL, 2910-595, PORTUGAL
BN 978-989-8111-52-4
PY 2008
BP 234
EP 239
PG 6
WC Computer Science, Software Engineering
SC Computer Science
GA BIE53
UT WOS:000258925900033
ER

PT S
AU Moon, M
   Chae, HS
   Yeom, K
AF Moon, Mikyeong
   Chae, Heung Seok
   Yeom, Keunhyuk
BE Morisio, M
TI A metamodel approach to architecture variability in a product line
SO REUSE OF OFF-THE-SHELF COMPONENTS, PROCEEDINGS
SE LECTURE NOTES IN COMPUTER SCIENCE
LA English
DT Article; Proceedings Paper
CT 9th International Conference on Software Reuse ( ICSR 2006)
CY JUN 12-15, 2006
CL Turin, ITALY
SP Compagnia San Paolo, Fond CRT, ICTeam, ISASE, Polit Torino
AB Architecture describes the organizational structure of a system including components, interactions, and constraints. Reusable components, units of software systems, have been considered to support a considerable improvement in reducing development costs and time to market because their interfaces and functionality are explicitly defined. Instead of reusing an individual component, however, it is much more advantageous to reuse a whole design or architecture. A domain architecture, sharing a common software architecture across a product line, includes common components shared by all products and optional components exploited by a subset of the products. Variability, one of the key concepts in the development of domain architectures indicates the ability to derive various products from the product line. Clearly, we need to support variability during domain architecture development. In this paper, we suggest a metamodeling concept that enables a common understanding of architecture variability. The domain architecture metamodel reflects the Object Management Group's (OMG (TM)) Reusable Asset Specification (RAS) which addresses the engineering elements of reuse. We describe a domain architecture in which commonality and variability are explicitly considered.
C1 Pusan Natl Univ, Dept Comp Engn, Keumjeong Ku, Pusan 609735, South Korea.
RP Moon, M (reprint author), Pusan Natl Univ, Dept Comp Engn, Keumjeong Ku, 30 Changjeon Dong, Pusan 609735, South Korea.
EM mkmoon@pusan.ac.kr; hschae@pusan.ac.kr; yeom@pusan.ac.kr
CR Duffy D.J., 2004, DOMAIN ARCHITECTURES
   GOMMA H, 2004, DESIGNING SOFTWARE P
   Kang K., 1990, CMUSEI90TR21
   Kang KC, 1998, ANN SOFTW ENG, V5, P143, DOI 10.1023/A:1018980625587
   Keepence B, 1999, IEEE SOFTWARE, V16, P102, DOI 10.1109/52.776957
   Moon M, 2005, IEEE T SOFTWARE ENG, V31, P551
   Muthig D., 2002, P 2 SOFTW PROD LIN C
   *OMG, 2003, MET OBJ FAC MOF VERS
   OMG, 2005, REUS ASS SPEC RAS VE
NR 9
TC 1
Z9 1
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 3-540-34606-6
J9 LECT NOTES COMPUT SC
PY 2006
VL 4039
BP 115
EP 126
PG 12
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BEP52
UT WOS:000238575400009
ER

PT S
AU Chang, SH
   Kim, SD
   Rhew, SY
AF Chang, Soo Ho
   Kim, Soo Dong
   Rhew, Sung Yul
BE Munch, J
   Vierimaa, M
TI A variability-centric approach to instantiating core assets in product
   line engineering
SO PRODUCT-FOCUSED SOFTWARE PROCESS IMPROVEMENT, PROCEEDINGS
SE LECTURE NOTES IN COMPUTER SCIENCE
LA English
DT Article; Proceedings Paper
CT 7th International Conference on Product-Focused Software Process
   Improvement
CY JUN 12-14, 2006
CL Amsterdam, NETHERLANDS
SP Fraunhofer Inst Exptl Softwave Engn, Centrum Wisk Informat, VTT, Univ Oulu, Drenthe Univ, Eindhoven Univ Technol
AB As a key activity in product line engineering (PLE), instantiation is a task to generate target applications by resolving variability embedded in core assets. However, instantiation is often conducted in manual and ad-hoc fashion, largely replying on domain knowledge and experience. Hence, it can easily lead to technical problems in precisely specifying decision model consisting of product-specific variation points and variants, and in handling inter-variant conflicts/dependency. To overcome this difficulty, it is desirable to develop a systematic process which includes a set of systematic activities, detailed instructions, and concrete specification of artifacts. In this paper, we first propose a meta-model of a core asset to specify its key elements. Then, we represent a comprehensive process that defines key instantiation activities, representations of artifacts, and work instructions. With the proposed process, one can instantiate core assets more effectively and systematically.
C1 Soongsil Univ, Dept Comp Sci, Seoul, South Korea.
RP Chang, SH (reprint author), Soongsil Univ, Dept Comp Sci, Seoul, South Korea.
EM shchang@otlab.ssu.ac.kr; sdkim@comp.ssu.ac.kr; syrhew@comp.ssu.ac.kr
CR [Anonymous], 1995, 12207 ISO IEC
   Atkinson C., 2001, COMPONENT BASED PROD
   BAYER J, 1999, P S SOFTW REUS 99
   BAYER J, 2000, P 7 INT C WORKSH ENG
   CHOI S, 2004, LECT NOTES COMPUTER, V2984
   Clements P., 2003, DOCUMENTING SOFTWARE
   Clements P, 2001, SOFTWARE PRODUCT LIN
   DEELSTRA S, 2005, J SYST SOFTWARE, V74, P174
   GEYER L, 2002, LNCS, V2379, P1
   GOMMA H, 2004, DESIGNING SOFTWARE P
   IEEE, 2004, GUID SOFTW ENG BOD K
   Kim SD, 2005, INFORM SOFTWARE TECH, V47, P663, DOI 10.1016/j.infsof.2004.11.007
   Kyo C.K., 1998, ANN SOFTW ENG, V5, P143
   Pohl K., 2005, SOFTWARE PRODUCT LIN
   Pressman R., 2005, SOFTWARE ENG PRACTIT
   SINNEMA M, 2004, SPRINGER VERLAG LECT, V3154
NR 16
TC 1
Z9 1
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 3-540-34682-1
J9 LECT NOTES COMPUT SC
PY 2006
VL 4034
BP 334
EP 347
PG 14
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BET88
UT WOS:000239485900024
ER

PT S
AU Wagelaar, D
   Van der Straeten, R
AF Wagelaar, Dennis
   Van der Straeten, Ragnhild
BE Rensink, A
   Warmer, J
TI A comparison of configuration techniques for model transformations
SO MODEL DRIVEN ARCHITECTURE - FOUNDATIONS AND APPLICATIONS, PROCEEDINGS
SE LECTURE NOTES IN COMPUTER SCIENCE
LA English
DT Article; Proceedings Paper
CT 2nd European Conference on Model Driven Architecture - Foundations and
   Applications
CY JUL 10-13, 2006
CL Bilbao, SPAIN
SP European Commiss, MODELWARE Project, Object Management Grp
AB MDA generally involves applying multiple model transformations. These transformations need to be applied in a particular configuration, depending on the targeted platform. Several techniques exist to manage the configuration of various software elements or components. These techniques focus on the composition rules of the various elements. A well-known application area of such techniques are Software Product Lines, in which the various features that make up a software product need to be configured. In this paper, we will investigate how several of these techniques can be applied to manage the configuration of model transformations in an MDA context.
C1 Vrije Univ Brussel VIB, B-1050 Brussels, Belgium.
RP Wagelaar, D (reprint author), Vrije Univ Brussel VIB, Pleinlaan 2, B-1050 Brussels, Belgium.
EM dennis.wagelaar@vub.ac.be; rvdstrae@vub.ac.be
CR Baader Franz, 2003, DESCRIPTION LOGIC HD
   Batory D, 2004, IEEE T SOFTWARE ENG, V30, P355, DOI 10.1109/TSE.2004.23
   BRAVENBOER M, 2005, PROGRAM TRANSFORMATI, V69, P1
   Brickley D., 2004, RDF VOCABULARY DESCR
   Budinsky F., 2003, ECLIPSE SERIES
   Clements P.C., 2001, SEI SERIES SOFTWARE
   Coplien J, 1998, IEEE SOFTWARE, V15, P37, DOI 10.1109/52.730836
   Czarnecki K., 2005, Software Process Improvement and Practice, V10, DOI 10.1002/spip.225
   Czarnecki K., 2005, Software Process Improvement and Practice, V10, DOI 10.1002/spip.213
   JOUALT F, 2005, MOD TRANSF PRACT WOR
   Kang K.C., 1990, CMUSEI90TR021 CARN M
   MCDERMOTT J, 1982, P 10 MACH INT WORKSH, P325
   Mens T., 2005, ELECT NOTES THEOR CO, V127, P113, DOI 10.1016/j.entcs.2004.08.038
   *OBJ MAN GROUP INC, 2005, OCL 2 0 SPEC VERS 2
   *OBJ MAN GROUP INC, 2005, MOF 2 0 XMI MAPP SPE
   *OBJ MAN GROUP INC, 2003, MET OBJ FAC MOF 2 0
   REIFFMARGANIEC S, 2005, P 8 INT C FEAT INT T
   Smith M.K., 2004, OWL WEB ONTOLOGY LAN
   Stefik M, 1995, INTRO KNOWLEDGE SYST
   van Deursen A, 2000, ACM SIGPLAN NOTICES, V35, P26, DOI 10.1145/352029.352035
   VONDERBRAND M, 2001, LECT NOTES COMPUTER, V2027, P365
   VONDEURSEN A, 2005, J COMPUTING INFORM T
   Wagelaar D, 2005, LECT NOTES COMPUT SC, V3713, P367
NR 23
TC 1
Z9 1
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 3-540-35909-5
J9 LECT NOTES COMPUT SC
PY 2006
VL 4066
BP 331
EP 345
PG 15
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BEU32
UT WOS:000239521500025
ER

PT S
AU Halim, SA
   Jawawi, DNA
   Deris, S
AF Halim, Shahliza Abd
   Jawawi, Dayang Norhayati A.
   Deris, Safaai
BE Sulaiman, S
   Noor, NMM
TI Requirements Identification and Representation in Software Product Line
SO APSEC 09: SIXTEENTH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE,
   PROCEEDINGS
SE Asia-Pacific Software Engineering Conference
LA English
DT Proceedings Paper
CT 16th Asia-Pacific Software Engineering Conference
CY DEC 01-03, 2009
CL Bat Ferringhi, MALAYSIA
SP Malaysian Software Interest Grp, Univ Sains Malaysian, Sch Comp Sci, Univ Teknol Malaysian, Ctr Adv Software Engn, Univ Teknol Malaysian, Fac Comp Sci & Informat Syst, Univ Putra Malaysian, Fac Comp Sci Informat Technol, Univ Malaysian Terengganu, Fac Sci & Technol, Univ Tenaga Nasl, Coll Informat Technol
DE software product line; variability; requirements; feature model; use
   case model
ID CORE ASSET
AB Software Product Line (SPL) core assets development is an effective approach in software reuse in which core assets can be shared among the members of the product line with an explicit treatment of variability. Considering reuse early in development phase can promise the increase in reuse and understanding reuse at a later development phase. This paper concentrates on identifying and representing variability at requirement level. The proposed approach differs slightly from other approaches where identification of the variant requirements is done with commonality and variability analysis and using two important requirements model, feature and use case model. Relation between both requirements model is through matrix table. This paper illustrates the application of this approach using the library systems product line example.
C1 [Halim, Shahliza Abd; Jawawi, Dayang Norhayati A.; Deris, Safaai] Univ Technol Malaysia, Fac Comp Sci & Informat Syst, Software Engn Dept, Skudai 81300, Johor, Malaysia.
RP Halim, SA (reprint author), Univ Technol Malaysia, Fac Comp Sci & Informat Syst, Software Engn Dept, Skudai 81300, Johor, Malaysia.
EM shahliza@utm.my
CR BRAGANCA A, 2007, AUTOMATING MAPPINGS
   BROWN TJ, 2006, WEAVING BEHAV FEATUR
   BUHNE S, 2004, WHY IS IT NOT SUFFIC
   Clements P, 2002, SOFTWARE PRODUCT LIN
   Cohen S, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P86
   DONG KS, 2004, SOFTW ENG C 2004 11
   Eriksson M, 2005, LECT NOTES COMPUT SC, V3714, P33
   ERIKSSON M, 2004, SERPS 04 LINK SWED
   Gomaa H., 2005, DESIGNING SOFTWARE P
   Griss M. L., 1998, Proceedings. Fifth International Conference on Software Reuse (Cat. No.98TB100203), DOI 10.1109/ICSR.1998.685732
   Her JS, 2007, INFORM SOFTWARE TECH, V49, P740, DOI 10.1016/j.infsof.2006.08.008
   KIM J, 2004, 11 AS PAC SOFTW ENG
   KIRCHER M, 2006, SOFTW PROD LIN C 200
   Lam W, 1998, ANN SOFTW ENG, V5, P253, DOI 10.1023/A:1018912105115
   Lee K, 2002, LECT NOTES COMPUT SC, V2319, P62
   MAGNUS E, 2009, J SYST SOFTW, V82, P435
   MANNION M, 1999, REUSING SINGLE SYSTE
   MANNION M, 2008, SYSTEM ENG, V11
   McGregor JD, 2002, IEEE SOFTWARE, V19, P24, DOI 10.1109/MS.2002.1020282
   Moon M, 2005, IEEE T SOFTWARE ENG, V31, P551
   TRIGAUX JC, 2003, EPH3310300R046221531
   YU CC, 1998, P 2 INT ESPRIT ARES
NR 22
TC 1
Z9 1
PU IEEE COMPUTER SOC
PI LOS ALAMITOS
PA 10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA
SN 1530-1362
BN 978-0-7695-3909-6
J9 ASIA PAC SOFWR ENG
PY 2009
BP 340
EP 346
DI 10.1109/APSEC.2009.73
PG 7
WC Computer Science, Software Engineering; Engineering, Electrical &
   Electronic
SC Computer Science; Engineering
GA BNR42
UT WOS:000275317200041
ER

PT S
AU Keuler, T
   Lehner, T
   Decker, B
   Muthig, D
AF Keuler, T
   Lehner, T
   Decker, B
   Muthig, D
BE Althoff, KD
   Dengel, A
   Bergmann, R
   Nick, M
   RothBerghofer, T
TI Efficient implementation of intelligent office appliances with software
   product lines
SO PROFESSIONAL KNOWLEDGE MANAGEMENT
SE LECTURE NOTES IN ARTIFICIAL INTELLIGENCE
LA English
DT Article; Proceedings Paper
CT 3rd Biennial Conference on Professional Knowledge Management
CY APR 10-13, 2005
CL Kaiserslautern, GERMANY
SP German Informat Soc, German Soc Knowledge Management
AB To support the handling of documents in organizations, office appliances have to adapt to the work processes of that organization. To efficiently handle changes in the software imposed by these adaptations, we present an approach to use business process models to compose the basic features of an office appliance into customer-oriented, process-specific services offered by office devices. Software product lines shape the key concepts that enable cost-effective and therefore realistic implementations of the ideas presented.
C1 Fraunhofer Inst Expt Software Engn, D-67661 Kaiserslautern, Germany.
RP Keuler, T (reprint author), Fraunhofer Inst Expt Software Engn, D-67661 Kaiserslautern, Germany.
EM thorsten.keuler@iese.fraunhofer.de; theresa.lehner@iese.fraunhofer.de;
   bjoern.decker@iese.fraunhofer.de; dirk.muthig@iese.fraunhofer.de
CR BAYER B, 2005, PROCESS FAMILY ENG M
   BAYER J, 1999, PULSE
   BAYER J, 2004, ASSET SCOPING DENTIF
   BETTIN J, 2004, MODEL DRIVEN SOFTWAR
   BOOTH D, 2005, WEB SERVICES DESCRIP
   BURKE E, 2002, JAVA XSLT
   CABRAL L, 2004, P 1 EUR SEM WEB S ES
   Clements P, 2001, SOFTWARE PRODUCT LIN
   GARDNER T, 2001, INTRO WEB SERVICES
   HASHIMI S, 2003, SERVICE ORIENTED ARC
   MENDLING J, 2003, COMPARISON BPML BPEL
   Miller Joaquin, 2003, MDA GUIDE VERSION 1
   MITRA N, 2003, SOAP VERSION 1 2 PAR
   Peltz C., 2003, WEB SERVICES ORCHEST
   YUSHI C, 2004, WEB SERVICES COMPOSI
NR 15
TC 1
Z9 1
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 3-540-30465-7
J9 LECT NOTES ARTIF INT
PY 2005
VL 3782
BP 60
EP 69
PG 10
WC Computer Science, Artificial Intelligence
SC Computer Science
GA BDW40
UT WOS:000235835600006
ER

PT S
AU Lee, SJ
   Kim, SD
AF Lee, SJ
   Kim, SD
BE Bomarius, F
   KomiSirvio, S
TI A rendezvous of content adaptable service and product line modeling
SO PRODUCT FOCUSED SOFTWARE PROCESS IMPROVEMENT, PROCEEDINGS
SE LECTURE NOTES IN COMPUTER SCIENCE
LA English
DT Article; Proceedings Paper
CT 6th International Conference on Product Focused Software Process
   Improvement
CY JUN 13-15, 2005
CL Oulu, FINLAND
SP IESE
AB Content adaptable applications are often used in ubiquitous computing environment, and it aims to service the adaptable contents to users. In this environment, the services are dynamically selected and provided, the contexts are changed frequently. Then, the application services are to be modeled to derive the adaptable service effectively and to reuse the model. Modeling with software features and product line concepts may support for making service decision strategy. In this paper, we propose a service decision modeling technique for content adaptable applications in ubiquitous environment. It consists of defining variation points and their variants, finding out the dependencies between them, and then building the variant selection strategies. These can accomplish to define the decision model based on content adaptable service, and the definition templates help the reuse more effective.
C1 Korea Maritime Univ, Div Informat Technol Engn, Pusan 606791, South Korea.
   Soongsil Univ, Dept Comp Sci, Seoul 156743, South Korea.
RP Lee, SJ (reprint author), Korea Maritime Univ, Div Informat Technol Engn, 1 Dongsam Dong, Pusan 606791, South Korea.
EM sjlee815@ssu.ac.kr; sdkim@comp.ssu.ac.kr
CR ANASTASOPOULOS M, 2004, 04404E IESE
   BERHE G, 2004, P ACM INT C COMP FRO
   Clements P, 2002, SOFTWARE PRODUCT LIN
   DERTOUZOS M, 2002, UNFINISHED REVOLUTIO
   DICAPRIO G, 2003, EXP ONLINE, V3
   ELKHATIB K, 2004, 1 IEEE INT C QUAL SE
   GARLAN D, 2004, COMPUTER         APR, P46
   Grimm R, 2004, ACM T COMPUT SYST, V22, P421, DOI 10.1145/1035582.1035584
   Grimm R., 2000, P 9 ACM SIGOPS EUR W, P177
   JARING M, 2003, PRODUCT FAMILY ENG P, P81
   Keidl M, 2004, P 13 INT WORLD WID W, P55, DOI DOI 10.1145/1013367.1013378
   LEMLOUMA T, 2004, P INT C MOB DAT MAN
   MCFADDEN T, 2004, 2004 INT C CYB NOV
   Sinnema M, 2004, LECT NOTES COMPUT SC, V3154, P197
NR 14
TC 1
Z9 1
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 3-540-26200-8
J9 LECT NOTES COMPUT SC
PY 2005
VL 3547
BP 69
EP 83
PG 15
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BCO25
UT WOS:000230389600006
ER

PT B
AU Lopez-Herrejon, RE
AF Lopez-Herrejon, Roberto E.
BE Cordeiro, J
   Shishkov, B
   Ranchordas, A
   Helfert, M
TI Models, features and algebras - An exploratory study of model
   composition and software product lines
SO ICSOFT 2008: PROCEEDINGS OF THE THIRD INTERNATIONAL CONFERENCE ON
   SOFTWARE AND DATA TECHNOLOGIES, VOL SE/GSDCA/MUSE
LA English
DT Proceedings Paper
CT 3rd International Conference on Software and Data Technologies
CY JUL 05-08, 2008
CL Oporto, PORTUGAL
SP Inst Syst & Technologies Informat, Control & Commun, Workflow Management Coalit, Proc Thought Leadership, IICREST
DE algebra; feature; Feature Oriented Software Development (FOSD); model;
   Model Driven Software Development (MDSD)
AB Software Product Lines (SPL) are families of related programs distinguished by the features they provide. Feature Oriented Software Development (FOSD) is a paradigm that raises features to first-class entities in the definition and modularization of SPL. The relevance of model composition has been addressed in UML 2 with new construct Package Merge. In this paper we show the convergence that exists between FOSD and Package Merge. We believe exploring their synergies could be mutually beneficial. SPL compositional approaches could leverage experience on the composition of non-code artifacts, while model composition Could find in SPL new problem domains on which to evaluate and apply their theories, tools and techniques.
C1 Univ Oxford, Comp Lab, Oxford OX1 2JD, England.
RP Lopez-Herrejon, RE (reprint author), Univ Oxford, Comp Lab, Oxford OX1 2JD, England.
CR Apel S., 2007, MIP0706 U PASS
   Batory D, 2004, IEEE T SOFTWARE ENG, V30, P355, DOI 10.1109/TSE.2004.23
   Boronat Artur, 2007, Electronic Notes in Theoretical Computer Science, V166, DOI 10.1016/j.entcs.2006.06.013
   DINGEL J, 2007, UNDERSTANDING IMPROV
   HERRMAN C, 2007, ECMDA FA
   LOPEZHERREJON R, 2006, DISCIPLINED APPROACH
   Object Management Group (OMG), 2007, UML INFR SPEC V2 1 2
   Romero J.R., 2007, J OBJECT TECHNOLOGY, V6, P187
NR 8
TC 1
Z9 1
PU INSTICC-INST SYST TECHNOLOGIES INFORMATION CONTROL & COMMUNICATION
PI SETUBAL
PA AVENIDA D MANUEL L, 27A 2 ESQUERDO, SETUBAL, 2910-595, PORTUGAL
BN 978-989-8111-52-4
PY 2008
BP 293
EP 296
PG 4
WC Computer Science, Software Engineering
SC Computer Science
GA BIE53
UT WOS:000258925900043
ER

PT S
AU Kim, SD
   Chang, SH
   La, HJ
AF Kim, SD
   Chang, SH
   La, HJ
BE Gervasi, O
   Gavrilova, ML
   Kumar, V
   Lagana, A
   Lee, HP
   Mun, Y
   Taniar, D
   Tan, CJK
TI A systematic process to design product line architecture
SO COMPUTATIONAL SCIENCE AND ITS APPLICATIONS - ICCSA 2005, PT 1
SE LECTURE NOTES IN COMPUTER SCIENCE
LA English
DT Article; Proceedings Paper
CT International Conference on Computational Science and Its Applications
   (ICCSA 2005)
CY MAY 09-12, 2005
CL Singapore, SINGAPORE
SP Inst High Performance Comp, Univ Perugia, Univ Calgary, Univ Minnesota, Queens Univ Belfast, Soc Ind & Appl Math, IEE, OptimaNumerics Ltd, MASTER UP
AB Product Line Engineering is being accepted as a representative software reuse methodology by using core assets and product line architecture is known as a key element of core assets. However, current research on product line engineering has room to provide specific and detailed guidelines of designing product line architectures and reflecting variability in the architecture. In this paper, we present a reference model and a process to design the architecture with detailed instructions. Especially architectural variability is codified by describing decision model representing variation.
C1 Soongsil Univ, Dept Comp Sci, Seoul 156743, South Korea.
RP Kim, SD (reprint author), Soongsil Univ, Dept Comp Sci, 1-1 Sangdo Dong, Seoul 156743, South Korea.
EM sdkim@comp.ssu.ac.kr; shchang@otlab.ssu.ac.kr; hjla@otlab.ssu.ac.kr
CR AMERICA P, 2004, LNCS, V3154
   Bass L., 2003, SOFTWARE ARCHITECTUR
   Bosch J, 2000, DESIGN USE SOFTWARE
   CERON R, 2004, LNCS, V3047
   CHOI S, 2004, LNCS, V2984
   Clements P., 2003, DOCUMENTING SOFTWARE
   Garlan D., 1994, P SIGSOFT 94 FDN SOF, P175, DOI 10.1145/193173.195404
   Heineman GT, 2001, COMPONENT BASED SOFT
   *IEEE AWG, 2000, P1471 IEEE
   KIM S, 2004, P APSEC 2004 NOV
   KIM S, IN PRESS J SYSTEMS S
   Lauesen S., 2002, SOFTWARE REQUIREMENT
   MATINLASSI M, 2002, ESPOO2002
   SINNEMA M, 2004, LNCS, V3154
   THIEL S, 2002, LNCS, V2379
   WOODS E, 2004, LNCS, V3047
NR 16
TC 1
Z9 1
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 3-540-25860-4
J9 LECT NOTES COMPUT SC
PY 2005
VL 3480
BP 46
EP 56
PG 11
WC Computer Science, Information Systems; Computer Science,
   Interdisciplinary Applications; Computer Science, Theory & Methods
SC Computer Science
GA BCM75
UT WOS:000230019900006
ER

PT J
AU Insfran, E
   Chastek, G
   Donohoe, P
   Leite, JCSD
AF Insfran, Emilio
   Chastek, Gary
   Donohoe, Patrick
   Sampaio do Prado Leite, Julio Cesar
TI Requirements engineering in software product line engineering
SO REQUIREMENTS ENGINEERING
LA English
DT Editorial Material
DE Requirements engineering; Software product line; Reuse
AB Many attempts have been made to increase the productivity and quality of software products based on software reuse. Software product line practice is one such approach, one that focuses on developing a family of products which have a majority of features in common. Hence, there are numerous requirements that are common across the family, but others are unique to individual products. Traditional requirements engineering methods were conceived to deal with single product requirements and are usually not flexible enough to address the needs arising from reusing requirements for a family of products. There is also the additional burden of correctly identifying and engineering both product-line-wide requirements and product-specific requirements as well as evolving them. Therefore, in this special issue, we want to highlight the importance and the role of requirements engineering for product line development as well as to provide insights into the state of the art in the field.
C1 [Insfran, Emilio] Univ Politecn Valencia, Dept Informat Syst & Computat, E-46071 Valencia, Spain.
   [Chastek, Gary; Donohoe, Patrick] Carnegie Mellon Univ, Inst Software Engn, Pittsburgh, PA 15213 USA.
   [Sampaio do Prado Leite, Julio Cesar] Pontificia Univ Catolica Rio de Janeiro, Rio De Janeiro, Brazil.
RP Insfran, E (reprint author), Univ Politecn Valencia, Dept Informat Syst & Computat, E-46071 Valencia, Spain.
EM einsfran@dsic.upv.es; gjc@sei.cmu.edu; pd@sei.cmu.edu;
   julio@inf.puc-rio.br
CR Clements P, 2001, SOFTWARE PRODUCT LIN
   Derakhshanmanesh M, 2012, 1 INT WORKSH REQ ENG
   Kuloor C, 2002, P 15 INT C SOFTW SYS
   Northrop LM, 2013, FRAMEWORK SOFTWARE P
   Yu YJ, 2008, LECT NOTES ARTIF INT, V4994, P1
NR 5
TC 1
Z9 1
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0947-3602
EI 1432-010X
J9 REQUIR ENG
JI Requir. Eng.
PD NOV
PY 2014
VL 19
IS 4
SI SI
BP 331
EP 332
DI 10.1007/s00766-013-0189-0
PG 2
WC Computer Science, Information Systems; Computer Science, Software
   Engineering
SC Computer Science
GA AR8KZ
UT WOS:000343825300001
ER

PT S
AU Guizzo, G
   Colanzi, TE
   Vergilio, SR
AF Guizzo, Giovani
   Colanzi, Thelma Elita
   Vergilio, Silvia Regina
BE LeGoues, C
   Yoo, S
TI A Pattern-Driven Mutation Operator for Search-Based Product Line
   Architecture Design
SO SEARCH-BASED SOFTWARE ENGINEERING
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 6th International Symposium on Search-Based Software Engineering (SSBSE)
CY AUG 26-29, 2014
CL Fortaleza, BRAZIL
SP Carnegie Mellon Univ, UCL, Mestrado Acad Ciencias Computacao, Grupo Otimizacao Engn Software, CREST, Microsoft Res, CDL Fortaleza, New Route, Fac CDL, FUNCAP, Springer, CAPES, Conselho Nacl Desenvolvimento Cientifico & Tecnologico, Banco Nordeste, SENAI, Sebrae CE
DE Software product line architecture; design patterns; search-based design
ID FRAMEWORK
AB The application of design patterns through mutation operators in search-based design may improve the quality of the architectures produced in the evolution process. However, we did not find, in the literature, works applying such patterns in the optimization of Product Line Architecture (PLA). Existing works offer manual approaches, which are not search-based, and only apply specific patterns in particular domains. Considering this fact, this paper introduces a meta-model and a mutation operator to allow the design patterns application in the search-based PLA design. The model represents suitable scopes, that is, set of architectural elements that are suitable to receive a pattern. The mutation operator is used with a multi-objective and evolutionary approach to obtain PLA alternatives. Quantitative and qualitative analysis of empirical results show an improvement in the quality of the obtained solutions.
C1 [Guizzo, Giovani; Colanzi, Thelma Elita; Vergilio, Silvia Regina] DInf Fed Univ Parana, BR-19031970 Curitiba, Parana, Brazil.
RP Guizzo, G (reprint author), DInf Fed Univ Parana, CP 19081, BR-19031970 Curitiba, Parana, Brazil.
EM gguizzo@inf.ufpr.br; thelma@din.uem.br; silvia@inf.ufpr.br
CR 3S Team, 2011, SERV SUPP SYST UML E
   Amoui M., 2006, INT J INFORM TECHNOL, V1, P235
   Arcuri A, 2011, LECT NOTES COMPUT SC, V6956, P33, DOI 10.1007/978-3-642-23716-4_6
   Cinneide M.O., 2001, P 4 INT WORKSH PRINC, P162
   Coello CAC, 2007, EVOLUTIONARY ALGORIT
   Colanzi TE, 2012, PROC INT CONF SOFTW, P1507, DOI 10.1109/ICSE.2012.6227050
   Colanzi T.E., 2012, LNCS, V7515, P259
   Colanzi T.E., 2013, CMSBSE WORKSH ICSE
   Coplien J.O., 1998, PATTERNS HDB TECHNIQ, P311
   Deb K, 2002, IEEE T EVOLUT COMPUT, V6, P182, DOI 10.1109/4235.996017
   Durillo JJ, 2011, ADV ENG SOFTW, V42, P760, DOI 10.1016/j.advengsoft.2011.05.014
   Friedman M, 1937, J AM STAT ASSOC, V32, P675, DOI 10.2307/2279372
   Gamma E., 1995, ADDISON WESLEY PROFE, V206
   Gomaa H., 2004, DESIGNING SOFTWARE P, V8
   Guizzo G., 2013, P 32 SCCC NOV
   Harman M, 2007, GECCO 2007: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOL 1 AND 2, P1106
   Jensen A., 2010, P 12 ANN C GEN EV CO, P1341, DOI 10.1145/1830483.1830731
   Keepence B, 1999, IEEE SOFTWARE, V16, P102, DOI 10.1109/52.776957
   Philippow I., 2003, MODELLING VARIABILIT, P42
   Qayum F, 2009, 1ST INTERNATIONAL SYMPOSIUM ON SEARCH BASED SOFTWARE ENGINEERING, PROCEEDINGS, P43, DOI 10.1109/SSBSE.2009.27
   Raiha O., 2010, COMPUTER SCI REV, V4, P203
   Raiha O., 2011, 3 WORLD C NABIC, P29
   Raiha O, 2008, LECT NOTES COMPUT SC, V5361, P565
   Sant'Anna C, 2007, LECT NOTES COMPUT SC, V4758, P207
   SEI, 2014, ARC GAM MAK PED PROD
   van der Linden F., 2007, SOFTWARE PRODUCT LIN
   Ziadi T., 2003, PRODUCT LINE DERIVAT
   Zitzler E, 1999, IEEE T EVOLUT COMPUT, V3, P257, DOI 10.1109/4235.797969
NR 28
TC 1
Z9 1
PU SPRINGER INT PUBLISHING AG
PI CHAM
PA GEWERBESTRASSE 11, CHAM, CH-6330, SWITZERLAND
SN 0302-9743
BN 978-3-319-09940-8; 978-3-319-09939-2
J9 LECT NOTES COMPUT SC
PY 2014
VL 8636
BP 77
EP 91
PG 15
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BB7GP
UT WOS:000345519200006
ER

PT S
AU Devroey, X
   Perrouin, G
   Legay, A
   Cordy, M
   Schobbens, PY
   Heymans, P
AF Devroey, Xavier
   Perrouin, Gilles
   Legay, Axel
   Cordy, Maxime
   Schobbens, Pierre-Yves
   Heymans, Patrick
BE Margaria, T
   Steffen, B
TI Coverage Criteria for Behavioural Testing of Software Product Lines
SO Leveraging Applications of Formal Methods, Verification and Validation:
   Technologies for Mastering Change, Pt I
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 6th International Symposium on Leveraging Applications of Formal
   Methods, Verification and Validation (ISoLA)
CY OCT 08-11, 2014
CL Imperial, GREECE
DE Coverage Criteria; Model Based Testing; Software Product Line
   Engineering
ID MODEL
AB Featured Transition Systems (FTS) is a mathematical structure to represent the behaviour of software product line in a concise way. The combination of the well-known transition systems approach to formal behavioural modelling with feature expressions was pivotal to the design of efficient verification approaches. Such approaches indeed avoid to consider products' behaviour independently, leading to often exponential savings. Building on this successful structure, we lay the foundations of model-based testing approach to SPLs. We define several FTS-aware coverage criteria and report on our experience combining FTS with usage-based testing for configurable websites.
C1 [Devroey, Xavier; Perrouin, Gilles; Cordy, Maxime; Schobbens, Pierre-Yves; Heymans, Patrick] Univ Namur, Fac Comp Sci, PReCISE Res Ctr, Namur, Belgium.
RP Devroey, X (reprint author), Univ Namur, Fac Comp Sci, PReCISE Res Ctr, Namur, Belgium.
EM xavier.devroey@unamur.be; gilles.perrouin@unamur.be;
   axel.legay@inria.fr; maxime.cordy@unamur.be;
   pierre-yves.schobbens@unamur.be; patrick.heymans@unamur.be
CR ALL4TEC, 2014, MATELO
   Astesana J.M., 2010, P 22 IEEE INT C TOOL, V1, P68
   Beohar H., 2014, ARXIV E PRINTS
   Cichos H, 2011, LECT NOTES COMPUT SC, V6981, P425, DOI 10.1007/978-3-642-24485-8_31
   Classen A., 2013, TSE PP, P1
   Classen A., 2011, THESIS U NAMUR
   Classen A., 2010, P 32 ACM IEEE INT C, V1, P335, DOI DOI 10.1145/1806799.1806850
   Clements P, 2001, SOFTWARE PRODUCT LIN
   Cohen M.B., 2007, INT S SOFTW TEST AN, P129
   Cordy M., 2013, SPLC 2013 WORKSH ACM, P141
   Devroey X., 2013, VAMOS 2014, p[10, 1, 7]
   Devroey X., 2012, LNCS, V7609, P208
   Fantechi A, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P193
   Flores R., 2012, P 16 INT SOFTW PROD, V1, P259
   Gruler A, 2008, LECT NOTES COMPUT SC, V5051, P113, DOI 10.1007/978-3-540-68863-1_8
   Henard C., 2013, SPLC, P62
   Johansen M. F., 2012, LNCS, V7590, P269
   Kang K. C., 1990, FEATURE ORIENTED DOM
   Kastner C., 2012, FOSD 2012, P1
   Kim C. H. P., 2012, ISSRE 2012, P221
   Lochau M., 2012, LECT NOTES COMPUTER, V7305, P67
   Mathur Aditya P., 2008, FDN SOFTWARE TESTING
   Nguyen H. V., 2014, ICSE 2014 IEEE
   Oster S, 2010, LECT NOTES COMPUT SC, V6287, P196, DOI 10.1007/978-3-642-15579-6_14
   Perrouin G, 2012, SOFTWARE QUAL J, V20, P605, DOI 10.1007/s11219-011-9160-9
   Samih H., 2012, P ICTSS 2012 PH D WO, P18
   Tretmans J., 2008, LNCS, V4949, P1
   Utting M, 2007, PRACTICAL MODEL BASE
   Uzuncaova E, 2010, IEEE T SOFTWARE ENG, V36, P309, DOI 10.1109/TSE.2010.30
   von Rhein A., 2013, VAMOS 2013, P14
   WHITTAKER JA, 1994, IEEE T SOFTWARE ENG, V20, P812, DOI 10.1109/32.328991
NR 31
TC 1
Z9 1
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-662-45234-9; 978-3-662-45233-2
J9 LECT NOTES COMPUT SC
PY 2014
VL 8802
BP 336
EP 350
PG 15
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BC0GO
UT WOS:000349021200024
ER

PT S
AU Damiani, F
   Schaefer, I
   Schuster, S
   Winkelmann, T
AF Damiani, Ferruccio
   Schaefer, Ina
   Schuster, Sven
   Winkelmann, Tim
BE Margaria, T
   Steffen, B
TI Delta-Trait Programming of Software Product Lines
SO Leveraging Applications of Formal Methods, Verification and Validation:
   Technologies for Mastering Change, Pt I
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 6th International Symposium on Leveraging Applications of Formal
   Methods, Verification and Validation (ISoLA)
CY OCT 08-11, 2014
CL Imperial, GREECE
ID FINE-GRAINED REUSE; JAVA; SYSTEM
AB Delta-oriented programming (DOP) is a flexible approach for implementing software product lines (SPLs). DOP SPLs are implemented by a set of delta modules encapsulating changes to class-based object-oriented programs. A particular product in a DOP SPL is generated by applying to the empty program the modifications contained in the delta modules associated to the selected product features. Traits are pure units of behavior, designed to support flexible fine-grained reuse and to provide an effective means to counter the limitations of class-based inheritance. A trait is a set of methods which is independent from any class hierarchy and can be flexibly used to build other traits or classes by means of a suite of composition operations. In this paper, we present an approach for programming SPLs of trait-based programs where the program modifications expressed by delta modules are formulated by exploiting the trait composition mechanism. This smooth integration of the modularity mechanisms provided by delta modules and traits results in a new approach for programming SPLs, delta-trait programming (DTP), which is particularly well suited for evolving SPLs.
C1 [Damiani, Ferruccio] Univ Turin, Dipartimento Informat, I-10149 Turin, Italy.
RP Damiani, F (reprint author), Univ Turin, Dipartimento Informat, I-10149 Turin, Italy.
EM ferruccio.damiani@unito.it; i.schaefer@tu-braunschweig.de;
   s.schuster@tu-braunschweig.de; t.winkelmann@tu-braunschweig.de
RI Damiani, Ferruccio/D-2383-2011
OI Damiani, Ferruccio/0000-0001-8109-1706
CR Apel S, 2010, AUTOMAT SOFTW ENG, V17, P251, DOI 10.1007/s10515-010-0066-8
   Apel S, 2008, GPCE'08: PROCEEDINGS OF THE ACM SIGPLAN SEVENTH INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING, P101
   Bassett P.G., 1997, FRAMING SOFTWARE REU
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Batory D, 2003, PROC INT CONF SOFTW, P187, DOI 10.1109/ICSE.2003.1201199
   Bettini L, 2013, ACTA INFORM, V50, P77, DOI 10.1007/s00236-012-0173-z
   Bettini L., 2008, PPPJ, P149, DOI 10.1145/1411732.1411753
   Bettini L, 2013, SCI COMPUT PROGRAM, V78, P218, DOI 10.1016/j.scico.2011.10.006
   Bettini L., 2013, P PPPJ 2013 ACM NEW, P67
   Bettini L., 2013, SCI COMPUTER PROGRAM
   Bettini L, 2013, SCI COMPUT PROGRAM, V78, P521, DOI 10.1016/j.scico.2011.06.007
   Bono V, 2008, INT FED INFO PROC, V273, P367
   Clements P, 2001, SOFTWARE PRODUCT LIN
   Damiani F, 2014, FORM ASP COMPUT, V26, P761, DOI 10.1007/s00165-013-0278-3
   Damiani F, 2012, P16 INT SOFTW PROD L, V2, P53
   Delaware B, 2009, FOAL09: FOUNDATIONS OF ASPECT-ORIENTED LANGUAGES, P31
   Ducasse S, 2006, ACM T PROGR LANG SYS, V28, P331, DOI 10.1145/1119479.1119483
   Hahnle R., 2012, LECT NOTES COMPUTER, V7609, P32
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Kang K., 1990, TECHNICAL REPORT
   Kastner C., 2008, P INT C AUT SOFTW EN, P258
   Kiczales G., 2001, LNCS, V2072, P327, DOI DOI 10.1007/3-540-45337-718
   Krueger C, 2002, IEEE SOFTWARE, V19, P29, DOI 10.1109/MS.2002.1020284
   Lienhard A., 2005, P 20 C AUT SOFTW ENG, P66, DOI 10.1145/1101908.1101921
   Liquori L, 2008, THEOR COMPUT SCI, V398, P243, DOI 10.1016/j.tcs.2008.01.051
   Lopez-Herrejon RE, 2005, LECT NOTES COMPUT SC, V3586, P169
   Mikhajlov L., 1998, LECT NOTES COMPUTER, V1445, P355
   Nierstrasz O, 2006, J OBJECT TECHNOLOGY, V5, P129
   Pohl K., 2005, SOFTWARE PRODUCT LIN
   Reppy J, 2007, LECT NOTES COMPUT SC, V4609, P373
   Schaefer I., 2010, P 2 INT WORKSH FEAT, P49, DOI DOI 10.1145/1868688.1868696
   Schaefer I., 2011, P INT C ASP OR SOFTW, P43, DOI DOI 10.1145/1960275.1960283
   Schaefer I., 2012, INT J SOFTWARE TOOLS, V14, P477
   Schaefer I, 2010, LECT NOTES COMPUT SC, V6287, P77, DOI 10.1007/978-3-642-15579-6_6
   Scharli N, 2003, LECT NOTES COMPUT SC, V2743, P248
   Schunz S, 2012, PALGRAVE STUD EUR UN, P25
   Schuster S., 2012, THESIS TU BRAUNSCHWE
   Smith C, 2005, LECT NOTES COMPUT SC, V3586, P453
NR 38
TC 1
Z9 1
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-662-45234-9; 978-3-662-45233-2
J9 LECT NOTES COMPUT SC
PY 2014
VL 8802
BP 289
EP 303
PG 15
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BC0GO
UT WOS:000349021200021
ER

PT B
AU Misic, VB
AF Misic, VB
BE AlAni, B
   Arabnia, HR
   Mun, Y
TI Measuring the coherence of software product line architectures
SO SERP'03: PROCEEDINGS OF THE INTERNATIONAL CONFERENCE ON SOFTWARE
   ENGINEERING RESEARCH AND PRACTICE, VOLS 1 AND 2
LA English
DT Proceedings Paper
CT International Conference on Software Engineering Research and Practice
CY JUN 23-26, 2003
CL LAS VEGAS, NV
SP Comp Sci Res, Educ & Applicat Press, Int Technol Inst, Korean Soc Internet Informat, World Acad Sci Informat Technol
AB One of the promising approaches to software development Is the concept of Product Line Architectures, or PLAs: architectural frameworks for developing software applications for a series of related products. Assessment of software PLAs and their measurement is still a largely undeveloped territory, where main emphasis Is put on the experience and Insight of Individual designers, rather than on some more objective measure. We propose the coherence measure as a vehicle to Increase the designers' understanding of the quality of PLAs, and to give valuable insight into the possible modifications of the PLA in order to Increase its conceptual quality.
C1 Univ Manitoba, Dept Comp Sci, Winnipeg, MB R3T 2N2, Canada.
RP Misic, VB (reprint author), Univ Manitoba, Dept Comp Sci, Winnipeg, MB R3T 2N2, Canada.
CR BASS L, 1998, SEI SERIES SOFTWARE
   Briand LC, 1996, IEEE T SOFTWARE ENG, V22, P68, DOI 10.1109/32.481535
   Briand L. C., 1998, Empirical Software Engineering, V3, DOI 10.1023/A:1009783721306
   DINCEL E, 2001, LNCS, V2290, P346
   Fenton N. E., 1996, SOFTWARE METRICS RIG
   GARLAN D, 1995, IEEE SOFTWARE, V12, P17, DOI 10.1109/52.469757
   Jazayeri M., 2000, SOFTWARE ARCHITECTUR
   Lai C. T. R., 1999, SOFTWARE PRODUCT LIN
   Medvidovic N, 2000, IEEE T SOFTWARE ENG, V26, P70, DOI 10.1109/32.825767
   MISIC V, 2001, 7 INT SOFTW METR S L, P135
   Page-Jones M., 1988, PRACTICAL GUIDE STRU
   STEVENS WP, 1974, IBM SYST J, V13, P115
   Szyperski C., 1998, COMPONENT SOFTWARE O
   Whitmire S., 1997, OBJECT ORIENTED DESI
NR 14
TC 1
Z9 1
PU C S R E A PRESS
PI ATHENS
PA 115 AVALON DR, ATHENS, GA 30606 USA
BN 1-932415-21-1
PY 2003
BP 364
EP 369
PG 6
WC Computer Science, Software Engineering
SC Computer Science
GA BY09H
UT WOS:000187617100057
ER

PT S
AU Henard, C
   Papadakis, M
   Le Traon, Y
AF Henard, Christopher
   Papadakis, Mike
   Le Traon, Yves
BE LeGoues, C
   Yoo, S
TI Mutation-Based Generation of Software Product Line Test Configurations
SO SEARCH-BASED SOFTWARE ENGINEERING
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 6th International Symposium on Search-Based Software Engineering (SSBSE)
CY AUG 26-29, 2014
CL Fortaleza, BRAZIL
SP Carnegie Mellon Univ, UCL, Mestrado Acad Ciencias Computacao, Grupo Otimizacao Engn Software, CREST, Microsoft Res, CDL Fortaleza, New Route, Fac CDL, FUNCAP, Springer, CAPES, Conselho Nacl Desenvolvimento Cientifico & Tecnologico, Banco Nordeste, SENAI, Sebrae CE
DE Software Product Lines; Test Configuration Generation; Search-Based
   Software Engineering; Mutation; Feature Models
ID TEST SUITES; SEARCH
AB Software Product Lines (SPLs) are families of software products that can be configured and managed through a combination of features. Such products are usually represented with a Feature Model (FM). Testing the entire SPL may not be conceivable due to economical or time constraints and, more simply, because of the large number of potential products. Thus, defining methods for generating test configurations is required, and is now a very active research topic for the testing community. In this context, mutation has recently being advertised as a promising technique. Mutation evaluates the ability of the test suite to detect defective versions of the FM, called mutants. In particular, it has been shown that existing test configurations achieving the mutation criterion correlate with fault detection. Despite the potential benefit of mutation, there is no approach which aims at generating test configurations for SPL with respect to the mutation criterion. In this direction, we introduce a search-based approach which explores the SPL product space to generate product test configurations with the aim of detecting mutants.
C1 [Henard, Christopher; Papadakis, Mike; Le Traon, Yves] Univ Luxembourg, Interdisciplinary Ctr Secur Reliabil & Trust SnT, Luxembourg, Luxembourg.
RP Henard, C (reprint author), Univ Luxembourg, Interdisciplinary Ctr Secur Reliabil & Trust SnT, Luxembourg, Luxembourg.
EM christopher.henard@uni.lu; michail.papadakis@uni.lu; yves.letraon@uni.lu
CR Benavides D, 2010, INFORM SYST, V35, P615, DOI 10.1016/j.is.2010.01.001
   Biere A., 2008, J SATISFIABILITY BOO, V4, P75
   Cohen MB, 2008, IEEE T SOFTWARE ENG, V34, P633, DOI 10.1109/TSE.2008.50
   do Carmo Machado I., 2012, ACM SIGSOFT SOFT ENG, V37, P1
   Droste S, 2002, THEOR COMPUT SCI, V276, P51, DOI 10.1016/S0304-3975(01)00182-7
   Engstrom E, 2011, INFORM SOFTWARE TECH, V53, P2, DOI 10.1016/j.infsof.2010.05.011
   Ensan F., 2012, LNCS, V7328, P613
   Fraser G, 2012, IEEE T SOFTWARE ENG, V38, P278, DOI 10.1109/TSE.2011.93
   Gargantini A, 2011, INFORM SOFTWARE TECH, V53, P1263, DOI 10.1016/j.infsof.2011.06.008
   Garvin BJ, 2011, EMPIR SOFTW ENG, V16, P61, DOI 10.1007/s10664-010-9135-7
   Harman M, 2010, IEEE T SOFTWARE ENG, V36, P226, DOI 10.1109/TSE.2009.71
   Harman M, 2011, SIGSOFT FSE, P212, DOI DOI 10.1145/2025113.2025144
   Henard C, 2013, IEEE ICST WORKSHOP, P188, DOI 10.1109/ICSTW.2013.30
   Henard C., 2014, IEEE T SOFTWARE ENG
   Henard C., 2013, SPLC, P62
   Jia Y, 2011, IEEE T SOFTWARE ENG, V37, P649, DOI 10.1109/TSE.2010.62
   Kaminski G, 2013, J SYST SOFTWARE, V86, P2002, DOI 10.1016/j.jss.2012.08.024
   Kaminski G, 2011, INFORM SOFTWARE TECH, V53, P1137, DOI 10.1016/j.infsof.2011.03.009
   Knauber P, 2002, LECT NOTES COMPUT SC, V2290, P155
   Kuhn DR, 2004, IEEE T SOFTWARE ENG, V30, P418, DOI 10.1109/TSE.2004.24
   Lehre PK, 2014, INFORM SCIENCES, V259, P510, DOI 10.1016/j.ins.2010.01.031
   Lopez-Herrejon RE, 2013, PROC IEEE INT CONF S, P404, DOI 10.1109/ICSM.2013.58
   McMinn P, 2004, SOFTW TEST VERIF REL, V14, P105, DOI 10.1002/stvr.294
   Mendonca M., 2009, SOFTWARE PRODUCT LIN
   Neto PADS, 2011, INFORM SOFTWARE TECH, V53, P407, DOI 10.1016/j.infsof.2010.12.003
   Nie CH, 2011, ACM COMPUT SURV, V43, DOI 10.1145/1883612.1883618
   Offutt J, 2011, INFORM SOFTWARE TECH, V53, P1098, DOI 10.1016/j.infsof.2011.03.007
   Papadakis M, 2012, INFORM SOFTWARE TECH, V54, P915, DOI 10.1016/j.infsof.2012.02.004
   Papadakis M., 2014, SAMPLING PROGRAM INP
   Perrouin G., 2010, AUTOMATED SCALABLE T
   Petke J., 2013, ESEC SIGSOFT FSE, P26
   Pohl K., 2005, SOFTWARE PRODUCT LIN
   Xu Z., 2013, SPLC, P52
NR 33
TC 1
Z9 1
PU SPRINGER INT PUBLISHING AG
PI CHAM
PA GEWERBESTRASSE 11, CHAM, CH-6330, SWITZERLAND
SN 0302-9743
BN 978-3-319-09940-8; 978-3-319-09939-2
J9 LECT NOTES COMPUT SC
PY 2014
VL 8636
BP 92
EP 106
PG 15
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BB7GP
UT WOS:000345519200007
ER

PT S
AU Medeiros, FM
   de Almeida, ES
   Meira, SRL
AF Medeiros, Flavio M.
   de Almeida, Eduardo S.
   Meira, Silvio R. L.
BE Bosch, J
   Lee, JJ
TI SOPLE-DE: An Approach to Design Service-Oriented Product Line
   Architectures
SO SOFTWARE PRODUCT LINES: GOING BEYOND
SE Lecture Notes in Computer Science
LA English
DT Proceedings Paper
CT 14th International Software Product Lines Conference
CY SEP 13-17, 2010
CL Jeju Island, SOUTH KOREA
SP Korean Inst Informat Sci & Engn, CoSDEC, Hitachi, Carnegie Mellon, Software Engn Inst, BigLever Software Inc, IBM, Fraunhofer
DE Service-Oriented Architecture (SOA); Software Product Line (SPL);
   Software Architecture and Software Development Processes
AB Software reuse is crucial for enterprises interested in software quality and productivity gains. In this context, Software Product Line (SPL) and Service-Oriented Architecture (SOA) are two reuse strategies that share common goals and can be used together to increase reuse and produce service-oriented systems faster, cheaper and customizable to specific customers. In this sense, this work investigates the problem of designing software product lines using service-oriented architectures, and presents a systematic approach to design software product lines based on services. The proposed approach provides guidance to identify, design and document architectural components, services, service compositions and their associated flows. In addition, an initial experimental study performed with the intention of validating and refining the approach is also depicted demonstrating that the proposed solution can be viable.
C1 [Medeiros, Flavio M.; Meira, Silvio R. L.] Univ Fed Pernambuco, Recife, PE, Brazil.
RP Medeiros, FM (reprint author), Univ Fed Pernambuco, Recife, PE, Brazil.
EM fmm2@cin.ufpe.br; esa@dcc.ufpa.br; srlm@cin.ufpe.br
CR Arsanjani A., 2004, SERVICE ORIENTED MOD
   Basili V. R., 1994, ENCY SOFTWARE ENG
   Bass L., 2003, SOFTWARE ARCHITECTUR
   Boffoli N., 2008, SOAPL, P143
   BOOCH G, 1995, MANAGING OBJECT ORIE
   Clements P, 2001, SOFTWARE PRODUCT LIN
   GUNTHER S, 2008, SOAPL
   Krueger C. W., 1992, ACM COMPUTING SURVEY, V24
   Lee J, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P275
   MEDEIROS FM, 2009, SOAPL 2009
   MEDEIROS F.P.M., 2010, THESIS FEDERAL U PER
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
NR 12
TC 1
Z9 1
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 0302-9743
BN 978-3-642-15578-9
J9 LECT NOTES COMPUT SC
PY 2010
VL 6287
BP 456
EP 460
PG 5
WC Computer Science, Software Engineering; Computer Science, Theory &
   Methods
SC Computer Science
GA BTD71
UT WOS:000286579500036
ER

PT S
AU Zaid, LA
   De Troyer, O
AF Zaid, Lamia Abo
   De Troyer, Olga
BE Halpin, T
   Nurcan, S
   Krogstie, J
   Soffer, P
   Proper, E
   Schmidt, R
   Bider, I
TI Towards Modeling Data Variability in Software Product Lines
SO ENTERPRISE, BUSINESS-PROCESS AND INFORMATION SYSTEMS MODELING
SE Lecture Notes in Business Information Processing
LA English
DT Proceedings Paper
CT 16th International Conference on Exploring Modeling Methods for Systems
   Analysis and Design
CY JUN 20-21, 2011
CL London, ENGLAND
SP European INTEROP Network Excellence, AIS SIGSAND, Enterprise Engn Network, ORM Fdn
DE Data intensive SPLs; Variable Data Model; Database Variability
AB In this paper, we provide an approach for modeling data variability as part of the overall software product line modeling approach. Modeling data variability in software product lines allows tailoring the data to the variability of a product. For this purpose, we have extended our Feature Assembly Modeling technique with the concept of persistency feature. We explain how these persistency features can be used to express the data variability, how they can be created and how they relate to the other features of the software product line. We also show how to derive a so-called variable data model from these persistency features and how an actual data model for a product of the product line can be derived. Additionally, annotations provide traceability between the variability of the features and the variability in the data model.
C1 [Zaid, Lamia Abo; De Troyer, Olga] VUB, Dept Comp Sci, WISE Lab, B-1050 Brussels, Belgium.
RP Zaid, LA (reprint author), VUB, Dept Comp Sci, WISE Lab, Pl Laan 2, B-1050 Brussels, Belgium.
EM Lamia.Abo.Zaid@vub.ac.be; Olga.DeTroyer@vub.ac.be
CR Abo Zaid L., 2010, 5 INT C SOFTW DAT TE, V1, P29
   Abo Zaid L., 2009, 24 ANN ACM S APPL CO
   Abo Zaid L., 2008, 4 WORKSH SEM WEB EN
   Bartholdt J., 2008, ICSEA 2008, P465
   Bolchini C, 2007, LECT NOTES COMPUT SC, V4801, P149
   Bosch J, 2000, DESIGN USE SOFTWARE
   Bosch J, 2005, LECT NOTES COMPUT SC, V3714, P2
   Clements P.C., 2002, CMUSEI2002TR038
   Connolly T. M., 2009, DATABASE SYSTEMS PRA
   Czarnecki K., 2005, OOPSLA 2005 INT WORK
   Eriksson M, 2005, LECT NOTES COMPUT SC, V3714, P33
   Fowler M., 2004, UML DISTILLED BRIEF
   Griss ML, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P76
   Gupta A., 1999, MAT VIEWS TECHNIQUES
   Halpin T, 2008, MOR KAUF D, P1, DOI 10.1016/B978-012373568-3.50005-9
   Kang K, 1990, CMUSEI90TR021
   Kang KC, 1998, ANN SOFTW ENG, V5, P143, DOI 10.1023/A:1018980625587
   Nystrom D., 2004, P WORKSH SOFTW ENG A
   Pettersson U., 2005, ESEC FSE 2005 EUR SO
   Rosenmuller M, 2009, DATA KNOWL ENG, V68, P1493, DOI 10.1016/j.datak.2009.07.013
   Rosenmuller M., 2008, P EDBT WORKSH SOFTW, P1, DOI 10.1145/1385486.1385488
   Sabetzadeh M., 2007, 15 IEEE INT REQ ENG
   Siegmund N., 2009, BTW 2009, P297
   Tesanovic A., 2004, P 8 INT DAT ENG APPL
   Thalheim B., 2009, ENCY DATABASE SYSTEM, P1083
   Zaid LA, 2010, LECT NOTES COMPUT SC, V6412, P233
NR 26
TC 1
Z9 1
PU SPRINGER-VERLAG BERLIN
PI BERLIN
PA HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY
SN 1865-1348
BN 978-3-642-21758-6
J9 LECT NOTES BUS INF P
PY 2011
VL 81
BP 453
EP 467
PG 15
WC Computer Science, Information Systems
SC Computer Science
GA BZM12
UT WOS:000301992900033
ER
